{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PP's Notes \u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u57fa\u7840\u77e5\u8bc6\u548c\u4f7f\u7528\u5de5\u5177\u65f6\u9047\u5230\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u65b9\u5411\u7684\u4e00\u4e9b\u5f52\u7eb3\u603b\u7ed3\u7b49\u3002 Enjoy learning~ \u5fae\u535a\uff1a\u84dd\u767d\u7edb B\u7ad9\uff1a\u84dd\u767d\u7edb","title":"Welcome"},{"location":"#welcome-to-pps-notes","text":"\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u57fa\u7840\u77e5\u8bc6\u548c\u4f7f\u7528\u5de5\u5177\u65f6\u9047\u5230\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u65b9\u5411\u7684\u4e00\u4e9b\u5f52\u7eb3\u603b\u7ed3\u7b49\u3002 Enjoy learning~ \u5fae\u535a\uff1a\u84dd\u767d\u7edb B\u7ad9\uff1a\u84dd\u767d\u7edb","title":"Welcome to PP's Notes"},{"location":"Classification/back_propagation_neural_networks/","text":"Introduction Back-propagation neural networks\uff0c\u53cd\u5411\u4f20\u64ad\u795e\u7ecf\u7f51\u7edc\u3002","title":"Multi-Layer Perceptron(MLP)"},{"location":"Classification/back_propagation_neural_networks/#introduction","text":"Back-propagation neural networks\uff0c\u53cd\u5411\u4f20\u64ad\u795e\u7ecf\u7f51\u7edc\u3002","title":"Introduction"},{"location":"Classification/logistic_regression/","text":"Introduction Logistic Regression\uff0c\u903b\u8f91\u65af\u8482\u56de\u5f52\u3002","title":"Logistic Regression"},{"location":"Classification/logistic_regression/#introduction","text":"Logistic Regression\uff0c\u903b\u8f91\u65af\u8482\u56de\u5f52\u3002","title":"Introduction"},{"location":"Classification/random_forest/","text":"Introduction Random Forest\uff0c\u968f\u673a\u68ee\u6797\u3002","title":"Random Forest"},{"location":"Classification/random_forest/#introduction","text":"Random Forest\uff0c\u968f\u673a\u68ee\u6797\u3002","title":"Introduction"},{"location":"Classification/support_vector_machine/","text":"Introduction Support Vector Machine(SVM)\uff0c\u652f\u6301\u5411\u91cf\u673a\u3002","title":"Support Vector Machine(SVM)"},{"location":"Classification/support_vector_machine/#introduction","text":"Support Vector Machine(SVM)\uff0c\u652f\u6301\u5411\u91cf\u673a\u3002","title":"Introduction"},{"location":"DeepLearning/Introduction/","text":"\u8bf4\u660e \u7b14\u8bb0\u8bf4\u660e \u6b64\u677f\u5757\u5e76\u4e0d\u662f\u6211\u7684\u539f\u521b\uff0c\u800c\u662f\u5b66\u4e60\u65f6\u5019\u7684\u7b14\u8bb0\u3002 \u8be5\u7b14\u8bb0\u4e3a\u4e2a\u4eba\u5411\uff0c\u662f\u4e2a\u4eba\u89c9\u5f97\u91cd\u8981\u800c\u6458\u6284\u7684\u77e5\u8bc6\u70b9\u3002 \u672c\u7b14\u8bb0\u8df3\u8fc7\u524d\u8a00\u90e8\u5206\uff0c\u4ece\u7b2c\u4e8c\u7ae0\u5f00\u59cb\u8bb0\u5f55\u3002\u5373\u4ece\u7b2c\u4e8c\u7ae0 \u7ebf\u6027\u4ee3\u6570\u5f00\u59cb\u3002 \u4e66\u672c\u4ecb\u7ecd \u6b64\u6a21\u5757\u4e3b\u8981\u662f\u5bf9Deep Learning\u7684\u5b66\u4e60\u3002 \u6240\u53c2\u8003\u7684\u6559\u6750\u662f \u82b1\u4e66: Deep Learning \uff0c\u8be5\u4e66\u7531\u5168\u7403\u77e5\u540d\u7684\u4e09\u4f4d\u4e13\u5bb6 Ian Goodfellow\u3001Yoshua Bengio \u548c Aaron Courville\u8054\u5408\u64b0\u5199\uff0c\u662f\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u5960\u57fa\u6027\u7684\u7ecf\u5178\u6559\u6750\u3002","title":"Introduction"},{"location":"DeepLearning/Introduction/#_1","text":"","title":"\u8bf4\u660e"},{"location":"DeepLearning/Introduction/#_2","text":"\u6b64\u677f\u5757\u5e76\u4e0d\u662f\u6211\u7684\u539f\u521b\uff0c\u800c\u662f\u5b66\u4e60\u65f6\u5019\u7684\u7b14\u8bb0\u3002 \u8be5\u7b14\u8bb0\u4e3a\u4e2a\u4eba\u5411\uff0c\u662f\u4e2a\u4eba\u89c9\u5f97\u91cd\u8981\u800c\u6458\u6284\u7684\u77e5\u8bc6\u70b9\u3002 \u672c\u7b14\u8bb0\u8df3\u8fc7\u524d\u8a00\u90e8\u5206\uff0c\u4ece\u7b2c\u4e8c\u7ae0\u5f00\u59cb\u8bb0\u5f55\u3002\u5373\u4ece\u7b2c\u4e8c\u7ae0 \u7ebf\u6027\u4ee3\u6570\u5f00\u59cb\u3002","title":"\u7b14\u8bb0\u8bf4\u660e"},{"location":"DeepLearning/Introduction/#_3","text":"\u6b64\u6a21\u5757\u4e3b\u8981\u662f\u5bf9Deep Learning\u7684\u5b66\u4e60\u3002 \u6240\u53c2\u8003\u7684\u6559\u6750\u662f \u82b1\u4e66: Deep Learning \uff0c\u8be5\u4e66\u7531\u5168\u7403\u77e5\u540d\u7684\u4e09\u4f4d\u4e13\u5bb6 Ian Goodfellow\u3001Yoshua Bengio \u548c Aaron Courville\u8054\u5408\u64b0\u5199\uff0c\u662f\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u5960\u57fa\u6027\u7684\u7ecf\u5178\u6559\u6750\u3002","title":"\u4e66\u672c\u4ecb\u7ecd"},{"location":"DeepLearning/section_1/","text":"\u7b2c\u4e8c\u7ae0 \u7ebf\u6027\u4ee3\u6570 \u6ca1\u5565\u8981\u5199\u7684\u3002 \u7b2c\u4e09\u7ae0 \u6982\u7387\u4e0e\u4fe1\u606f\u8bba 3.3 \u6982\u7387\u5206\u5e03 \u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u7528 \u6982\u7387\u8d28\u91cf\u51fd\u6570 (probability mass function, PMF)\u6765\u8868\u8ff0\u3002\u7528P\u8868\u793a\u6982\u7387\u8d28\u91cf\u51fd\u6570\u3002 \u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u7528 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 (probability density function, PDF)\u6765\u63cf\u8ff0\u3002\u7528p\u8868\u793a\u3002 \u7b2c\u56db\u7ae0 \u6570\u503c\u8ba1\u7b97 4.1 \u4e0a\u6ea2\u548c\u4e0b\u6ea2 \u5fc5\u987b\u5bf9\u4e0a\u6ea2\u548c\u4e0b\u6ea2\u8fdb\u884c\u6570\u503c\u7a33\u5b9a\u7684\u4f8b\u5b50\u662fsoftmax\u51fd\u6570\u3002 softmax\u51fd\u6570 \u7ecf\u5e38\u7528\u8bed\u9884\u6d4b\u4e0eMultinoulli\u5206\u5e03\u76f8\u5173\u8054\u7684\u6982\u7387\u3002 softmax({\\boldsymbol x})_i=\\frac{exp(x_i)}{\\sum_{j=1}^{n}exp(x_j)} \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u7b97\u6cd5\u662f\u81ea\u52a8\u4fdd\u6301\u6570\u503c\u7684\u7a33\u5b9a\u3002\u6bd4\u5982Theano\u8f6f\u4ef6\u5305\uff0c\u80fd\u81ea\u52a8\u68c0\u6d4b\u75c5\u7a33\u5b9a\u6df1\u5ea6\u5b66\u4e60\u4e2d\u8bb8\u591a\u5e38\u89c1\u7684\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u8868\u8fbe\u5f0f\u3002 4.2 \u75c5\u6001\u6761\u4ef6 \u8f93\u5165\u88ab\u8f7b\u5fae\u6270\u52a8\u800c\u8fc5\u901f\u6539\u53d8\u7684\u51fd\u6570\u5bf9\u79d1\u5b66\u8ba1\u7b97\u6765\u8bf4\u53ef\u80fd\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u8f93\u5165\u4e2d\u7684\u6444\u5165\u8bef\u5dee\u53ef\u80fd\u5bfc\u81f4\u8f93\u51fa\u7684\u5de8\u5927\u53d8\u5316\u3002 \u6bd4\u5982\u51fd\u6570$f({\\boldsymbol x})={\\boldsymbol A}^{-1}{\\boldsymbol x}$\u5982\u679c\u77e9\u9635${\\boldsymbol A}$\u7684 \u6700\u5927\u7279\u5f81\u503c\u548c\u6700\u5c0f\u7279\u5f81\u503c\u7684\u6a21\u4e4b\u6bd4(\u7edd\u5bf9\u503c) \u5f88\u5927\u65f6\uff0c\u77e9\u9635\u6c42\u9006\u5bf9\u8f93\u5165\u7684\u8bef\u5dee\u7279\u522b\u654f\u611f\u3002 4.3 \u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\u3002 \u68af\u5ea6(gradient)\u662f\u76f8\u5bf9\u4e00\u4e2a\u5411\u91cf\u6c42\u5bfc\u7684\u5bfc\u6570\uff0cf\u7684\u5bfc\u6570\u662f\u5305\u542b\u6240\u6709\u504f\u5bfc\u6570\u7684\u5411\u91cf\uff0c\u8bb0\u4e3a$\\nabla_xf({\\boldsymbol x})$\u3002\u5728\u591a\u7ef4\u7684\u60c5\u51b5\u4e0b\uff0c\u4e34\u754c\u70b9\u662f\u68af\u5ea6\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u4e3a0\u7684\u70b9\u3002 \u5728\u8d1f\u68af\u5ea6\u7684\u65b9\u5411\u4e0a\u79fb\u52a8\u53ef\u4ee5\u51cf\u5c0ff\u3002\u8fd9\u662f\u6700\u901f\u4e0b\u964d\u6cd5(method of steepest descent)\u6216 \u68af\u5ea6\u4e0b\u964d (gradient descent)\u3002$\\epsilon$\u4e3a\u5b66\u4e60\u7387\uff0c \u666e\u904d\u7684\u65b9\u5f0f\u662f\u9009\u62e9\u4e00\u4e2a\u5c0f\u5e38\u6570 \u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u5206\u5c40\u51e0\u4e2a$\\epsilon$\u8ba1\u7b97$f({\\boldsymbol x}-\\epsilon\\nabla_xf({\\boldsymbol x}))$\uff0c\u5e76\u9009\u62e9\u5176\u4e2d\u80fd\u4ea7\u751f\u6700\u5c0f\u76ee\u6807\u51fd\u6570\u503c\u7684$\\epsilon$\u3002\u8fd9\u79cd\u7b56\u7565\u4e3a \u7ebf\u641c\u7d22 \u3002 {\\boldsymbol x}'={\\boldsymbol x}-\\epsilon\\nabla_xf({\\boldsymbol x}) \u867d\u7136\u68af\u5ea6\u4e0b\u964d\u88ab\u9650\u5236\u5728\u8fde\u7eed\u7a7a\u95f4\u4e2d\u7684\u4f18\u5316\u95ee\u9898\uff0c\u4f46\u53ef\u4ee5\u63a8\u5e7f\u5230 \u79bb\u6563\u7a7a\u95f4 \u3002\u9012\u589e\u5e26\u6709\u79bb\u6563\u53c2\u6570\u7684\u76ee\u6807\u51fd\u6570\u79f0\u4e3a \u722c\u5c71 (hill climbing)\u7b97\u6cd5\u3002 4.3.1 \u68af\u5ea6\u4e4b\u4e0a\uff1aJacobian\u548cHessian\u77e9\u9635 \u6709\u65f6\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f\u5411\u91cf\u7684\u51fd\u6570\u7684\u6240\u6709\u504f\u5bfc\u6570\u3002\u5305\u542b\u6240\u6709\u8fd9\u6837\u7684\u504f\u5bfc\u6570\u7684\u77e9\u9635\u88ab\u79f0\u4e3a\u96c5\u53ef\u6bd4(Jacobian)\u77e9\u9635. \u6709\u65f6\u6211\u4eec\u5bf9\u4e8c\u9636\u5bfc\u6570(\u66f2\u7387)\u611f\u5174\u8da3\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u5bfc\u6570\u5408\u5e76\u4e3a\u4e00\u4e2a\u77e9\u9635\uff0c\u79f0\u4e3a\u9ed1\u8d5b(Hessian)\u77e9\u9635\u3002Hessain\u77e9\u9635\u7b49\u4ef7\u4e8e\u68af\u5ea6\u7684Jacobian\u77e9\u9635\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u80cc\u666f\u4e0b\uff0c\u9047\u5230\u7684\u5927\u591a\u6570\u51fd\u6570\u7684Hessian\u77e9\u9635\u51e0\u4e4e\u5904\u5904\u90fd\u662f\u5bf9\u79f0\u7684\u3002 \u56e0\u4e3aHessain\u77e9\u9635\u662f\u5b9e\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5206\u89e3\u4e3a\u4e00\u7ec4\u5b9e\u7279\u5f81\u503c\u548c\u4e00\u7ec4\u7279\u5f81\u5411\u91cf\u7684\u6b63\u4ea4\u57fa\u3002\u5728\u7279\u5b9a\u65b9\u5411${\\boldsymbol d}$\u4e0a\u7684\u4e8c\u9636\u5bfc\u6570\u53ef\u4ee5\u5199\u6210${\\boldsymbol d}^T\\boldsymbol{Hd}$\uff08${\\boldsymbol d}$\u662f\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u7684\u4e58\u79ef\u662f\u4e00\u4e2a\u6570\uff0c\u662f\u4e0e\u7279\u5f81\u5411\u91cf${\\boldsymbol d}$\u5bf9\u5e94\u7684\u7279\u5f81\u503c\uff09\u3002\u5f53${\\boldsymbol d}$\u662f${\\boldsymbol H}$\u7684\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\u65f6\uff0c \u8fd9\u4e2a\u65b9\u5411\u7684\u4e8c\u9636\u5bfc\u6570\u5c31\u662f\u5bf9\u5e94\u7684\u7279\u5f81\u503c \u3002\u5bf9\u4e8e\u5176\u4ed6\u65b9\u5411\u7684${\\boldsymbol d}$\uff0c\u4e0d\u662f\u7279\u5f81\u5411\u91cf\uff0c\u8be5\u65b9\u5411\u7684\u4e8c\u9636\u5bfc\u6570\u662f\u6240\u6709\u7279\u5f81\u503c\u7684 \u52a0\u6743\u5e73\u5747 \uff0c\u4e0e\u7279\u5f81\u5411\u91cf${\\boldsymbol d}$\u7684\u5939\u89d2\u8d8a\u5c0f\u7684\u6743\u91cd\u8d8a\u5927\u3002\u6700\u5927\u7279\u5f81\u503c\u786e\u5b9a\u6700\u5927\u4e8c\u9636\u5bfc\u6570\uff0c\u6700\u5c0f\u7279\u5f81\u503c\u786e\u5b9a\u6700\u5c0f\u4e8c\u9636\u5bfc\u6570\u3002 \u5728\u591a\u7ef4\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u68c0\u6d4b\u51fd\u6570\u7684\u6240\u6709\u4e8c\u9636\u5bfc\u6570\uff0c\u53ef\u4ee5\u7528\u8fc7\u68c0\u6d4bHessian\u7684\u7279\u5f81\u503c\u6765\u5224\u65ad\u4e34\u754c\u70b9\u662f\u5c40\u90e8\u6781\u5927\u70b9\u3001\u5c40\u90e8\u6781\u5c0f\u70b9\u8fd8\u662f\u978d\u70b9\u3002\u5f53Hessian\u77e9\u9635 \u6b63\u5b9a \u65f6\uff0c\u4e34\u754c\u70b9\u65f6\u5c40\u90e8\u6781\u5c0f\u70b9\uff1b \u8d1f\u5b9a \u65f6\uff0c\u662f\u5c40\u90e8\u6781\u5927\u70b9\u3002\u8ddf\u9ad8\u4e2d\u7684\u5bfc\u6570\u548c\u4e8c\u9636\u5bfc\u6570\u662f\u4e00\u6837\u7684\u3002 \u7528Hessian\u77e9\u9635\u7684\u4fe1\u606f\u6765\u6307\u5bfc\u641c\u7d22\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u725b\u987f\u6cd5(Newton's method)\u3002\u725b\u987f\u6cd5\u57fa\u4e8e\u4e00\u4e2a\u4e8c\u9636\u6cf0\u52d2\u5c55\u5f00\u6765\u8fd1\u4f3c${\\boldsymbol x}^{(0)}$\u9644\u8fd1\u7684$f(\\boldsymbol x)$\u3002\u5f53$f$\u662f\u4e00\u4e2a\u6b63\u5b9a\u4e8c\u6b21\u51fd\u6570\u65f6\uff0c\u725b\u987f\u6cd5\u53ea\u8981\u7528\u4e00\u6b21${\\boldsymbol x}^*={\\boldsymbol{x}}^{(0)}-{\\boldsymbol{H}}(f)({\\boldsymbol{x}}^{(0)})^{-1}\\nabla_x f({\\boldsymbol{x}}^{(0)})$\u5c31\u80fd\u76f4\u63a5\u6761\u5230\u51fd\u6570\u7684\u6700\u5c0f\u70b9\u3002\u5982\u679c$f$\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u4e8c\u6b21\u4f46\u662f\u80fd\u5728\u5c40\u90e8\u8fd1\u4f3c\u4e3a\u6b63\u5b9a\u4e8c\u6b21\uff0c\u725b\u987f\u6cd5\u5219\u9700\u8981\u8fed\u4ee3\u5e94\u7528\u8be5\u5f0f\u3002 \u8fed\u4ee3\u5730\u66f4\u65b0\u8fd1\u4f3c\u51fd\u6570\u548c\u8df3\u5230\u8fd1\u4f3c\u51fd\u6570\u7684\u6700\u5c0f\u70b9 \u53ef\u4ee5\u6bd4 \u68af\u5ea6\u4e0b\u964d \u66f4\u5feb\u5730\u5230\u8fbe\u4e34\u754c\u70b9\u3002\u8fd9\u5728\u63a5\u8fd1\u5c40\u90e8\u6781\u5c0f\u70b9\u65f6\u662f\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u6027\u8d28\uff0c\u4f46\u662f \u5728\u978d\u70b9\u9644\u8fd1\u662f\u6709\u5bb3\u7684 \u3002 \u4ec5\u4f7f\u7528\u68af\u5ea6\u4fe1\u606f\u7684\u4f18\u5316\u7b97\u6cd5\u88ab\u79f0\u4e3a \u4e00\u9636\u4f18\u5316\u7b97\u6cd5 (first-order optimization algorithms)\uff0c\u5982\u68af\u5ea6\u4e0b\u964d\u3002\u4f7f\u7528Hessian\u77e9\u9635\u7684\u4f18\u5316\u7b97\u6cd5\u88ab\u79f0\u4e3a \u4e8c\u9636\u6700\u4f18\u5316\u7b97\u6cd5 (second-order optimization algorithms)\uff0c\u5982\u725b\u987f\u6cd5\u3002 Lipschitz\u6761\u4ef6 \u5373\u5229\u666e\u5e0c\u8328\u8fde\u7eed\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u6bd4\u901a\u5e38\u8fde\u7eed\u66f4\u5f3a\u7684 \u5149\u6ed1\u6027\u6761\u4ef6 \u3002\u76f4\u89c9\u4e0a\uff0cLipschitz\u8fde\u7eed\u51fd\u6570\u9650\u5236\u4e86\u51fd\u6570\u6539\u53d8\u7684\u901f\u5ea6\uff0c\u7b26\u5408Lipschitz\u6761\u4ef6\u7684\u51fd\u6570\u7684\u659c\u7387\uff0c\u5fc5\u5c0f\u4e8e\u4e00\u4e2a\u79f0\u4e3aLipschitz\u5e38\u6570\u7684\u5b9e\u6570\u3002 \u5728\u6df1\u5ea6\u5b66\u4e60\u7684\u80cc\u666f\u4e0b\uff0c\u9650\u5236\u51fd\u6570\u6ee1\u8db3Lipschitz\u8fde\u7eed\u6216\u5176\u5bfc\u6570Lipschitz\u8fde\u7eed\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u4fdd\u8bc1\u3002Lipschitz\u8fde\u7eed\u51fd\u6570\u7684\u53d8\u5316\u901f\u5ea6\u4ee5Lipschitz\u5e38\u6570$\\cal L$\u4e3a\u754c\u3002\u8fd9\u4e2a\u5c5e\u6027\u5141\u8bb8\u6211\u4eec\u91cf\u5316\u6211\u4eec\u7684\u5047\u8bbe\u2014\u2014\u68af\u5ea6\u4e0b\u964d\u7b49\u7b97\u6cd5\u5bfc\u81f4\u7684\u8f93\u5165\u7684\u5fae\u5c0f\u53d8\u5316\u5c06\u4f7f\u8f93\u51fa\u53ea\u4ea7\u751f\u5fae\u5c0f\u53d8\u5316\uff0c\u56e0\u6b64\u662f\u5f88\u6709\u7528\u7684\u3002\uff08\u53d8\u5316\u901f\u5ea6\u662f\u6709\u4e0a\u754c\u7684\uff09 \u6700\u6210\u529f\u7684\u7279\u5b9a\u4f18\u5316\u9886\u57df\u6216\u8bb8\u662f \u51f8\u4f18\u5316 (Convex optimization)\u3002\u51f8\u4f18\u5316\u901a\u8fc7 \u66f4\u5f3a\u7684\u9650\u5236 \u63d0\u4f9b\u66f4\u591a\u7684\u4fdd\u8bc1\u3002\u51f8\u4f18\u5316\u7b97\u6cd5\u53ea\u5bf9\u51f8\u51fd\u6570\u9002\u7528\uff0c\u5373Hessian\u5904\u5904\u534a\u6b63\u5b9a\u7684\u51fd\u6570\u3002\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u6ca1\u6709\u978d\u70b9\u800c\u4e14\u5176\u6240\u6709\u5c40\u90e8\u6781\u5c0f\u70b9\u5fc5\u7136\u662f\u5168\u5c40\u6700\u5c0f\u70b9\u3002\u7136\u800c\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5927\u591a\u6570\u95ee\u9898\u90fd\u96be\u4ee5\u8868\u793a\u6210\u51f8\u4f18\u5316\u7684\u5f62\u5f0f\u3002\u51f8\u4f18\u5316\u4ec5\u7528\u4f5c\u4e00\u4e9b\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u5b50\u7a0b\u5e8f\u3002\u51f8\u4f18\u5316\u4e2d\u7684\u5206\u6790\u601d\u8def\u5bf9\u8bc1\u660e\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u6536\u655b\u6027\u975e\u5e38\u6709\u7528\uff0c\u7136\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6df1\u5ea6\u5b66\u4e60\u80cc\u666f\u4e0b\u51f8\u4f18\u5316\u7684\u91cd\u8981\u6027\u5927\u5927\u51cf\u5c11\u3002 4.4 \u7ea6\u675f\u4f18\u5316 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u5728$\\boldsymbol{x}$\u6240\u6709\u53ef\u80fd\u503c\u4e0b\u6700\u5c0f\u5316\u4e00\u4e2a\u51fd\u6570$f(x)$\uff1b\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728$\\boldsymbol{x}$\u7684\u67d0\u4e9b\u96c6\u5408$\\Bbb{S}$\u4e2d\u627e$f(x)$\u6700\u5c0f\u503c\u3002\u8fd9\u5c31\u662f \u7ea6\u675f\u4f18\u5316 (constrained optimization)\u3002\u5728\u7ea6\u675f\u4f18\u5316\u672f\u8bed\u4e2d\uff0c\u96c6\u5408$\\Bbb{S}$\u5185\u7684\u70b9$\\boldsymbol{x}$\u88ab\u79f0\u4e3a \u53ef\u884c\u70b9 (feasible)\u3002\u6211\u4eec\u5c1d\u5c1d\u5e0c\u671b\u627e\u5230\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u5c0f\u7684\u89e3\uff0c\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u5e38\u89c1\u65b9\u6cd5\u662f\u5f3a\u52a0\u4e00\u4e2a \u8303\u6570\u7ea6\u675f \uff0c\u5982$\\parallel{\\boldsymbol{x}}\\parallel\\leq 1$\u3002 \u7ea6\u675f\u4f18\u5316\u7684\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\u662f\u5c06\u7ea6\u675f\u8003\u8651\u5728\u5185\u540e\u7b80\u5355\u5730\u5bf9\u68af\u5ea6\u4e0b\u964d\u8fdb\u884c\u4fee\u6539\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5c0f\u7684\u6052\u5b9a\u7684\u6b65\u957f$\\epsilon$\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u53d6\u68af\u5ea6\u4e0b\u964d\u7684\u5355\u6b65\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u6295\u5f71\u56de$\\Bbb{S}$\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u7ebf\u641c\u7d22\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u6b65\u957f\u4e3a$\\epsilon$\u7684\u8303\u56f4\u5185\u641c\u7d22\u53ef\u884c\u7684\u65b0$\\boldsymbol{x}$\u70b9\uff0c\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u5c06\u7ebf\u4e0a\u7684\u6bcf\u4e2a\u70b9\u6295\u5f71\u5230\u7ea6\u675f\u533a\u57df\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5728\u68af\u5ea6\u4e0b\u964d\u6216\u8005\u7ebf\u641c\u7d22\u524d\u5c06\u68af\u5ea6\u6295\u5f71\u5230\u53ef\u884c\u57df\u7684\u5207\u7a7a\u95f4\u4f1a\u66f4\u9ad8\u6548\u3002 \u7ea6\u675f\u4f18\u5316\u7684\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u65b9\u6cd5\u662f\u8bbe\u8ba1\u4e00\u4e2a\u4e0d\u540c\u7684\u3001\u65e0\u7ea6\u675f\u7684\u4f18\u5316\u95ee\u9898\uff0c\u5176\u89e3\u53ef\u4ee5\u8f6c\u5316\u6210\u539f\u59cb\u7ea6\u675f\u95ee\u9898\u7684\u89e3\u3002 Karush-Kuhn-Tucker(KKT) \u65b9\u6cd5\u662f\u9488\u5bf9\u7ea6\u675f\u4f18\u5316\u975e\u5e38\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4ecb\u7ecdKKT\u65b9\u6cd5\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u79f0\u4e3a\u5e7f\u4e49Lagrangian(generalized Lagrangian)\u6216 \u5e7f\u4e49Lagrange\u51fd\u6570 (generalized Lagrange function)\u7684\u65b0\u51fd\u6570\u3002\u4e3a\u4e86\u5b9a\u4e49Lagrangian\uff0c\u6211\u4eec\u5148\u8981\u901a\u8fc7\u7b49\u5f0f\u548c\u4e0d\u7b49\u5f0f\u7684\u5f62\u5f0f\u63cf\u8ff0$\\Bbb{S}$\u3002\u6211\u4eec\u5e0c\u671b\u901a\u8fc7m\u4e2a\u7b49\u5f0f\u7ea6\u675f$g^{(i)}$\u548cn\u4e2a\u4e0d\u7b49\u5f0f\u7ea6\u675f$h^{(j)}$\u63cf\u8ff0$\\Bbb{S}$\u3002\u6211\u4eec\u4e3a\u6bcf\u4e2a\u7ea6\u675f\u5f15\u5165\u65b0\u7684\u53d8\u91cf$\\lambda_i$\u548c$\\alpha_j$\uff0c\u8fd9\u4e9b\u65b0\u53d8\u91cf\u88ab\u79f0\u4e3aKKT\u4e58\u5b50\u3002\u5e7f\u4e49\u7684Lagrangian\u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\uff1a L({\\boldsymbol{x},\\boldsymbol{\\lambda},\\boldsymbol{\\alpha}})=f({\\boldsymbol{x}})+\\sum_i\\lambda_i g^{(i)}({\\boldsymbol{x}})+\\sum_j\\alpha_j h^{(j)}({\\boldsymbol{x}}) \u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u65e0\u7ea6\u675f\u7684\u5e7f\u4e49Lagrangian\u89e3\u51b3\u7ea6\u675f\u6700\u5c0f\u5316\u95ee\u9898\u3002\u53ea\u8981\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u53ef\u884c\u70b9\u4e14$f(\\boldsymbol{x})$\u4e0d\u5141\u8bb8\u53d6$\\infty$\uff0c\u90a3\u4e48 \\min_{\\boldsymbol{x}} \\max_{\\boldsymbol{\\lambda}} \\max_{\\boldsymbol{\\alpha},\\boldsymbol{\\alpha}\\geq0}L({\\boldsymbol{x},\\boldsymbol{\\lambda},\\boldsymbol{\\alpha}}) \u4e0e\u4e0b\u5217\u51fd\u6570\u6709\u76f8\u540c\u7684\u6700\u4f18\u76ee\u6807\u51fd\u6570\u503c\u548c\u6700\u4f18\u70b9\u96c6$\\boldsymbol{x}$\u3002 \\min_{\\boldsymbol{x}\\in\\Bbb{S}}f({\\boldsymbol{x}}) \u5982\u679c$h^{(i)}({\\boldsymbol{x}}^*=0)$\uff0c\u5219\u79f0\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u7ea6\u675f\u662f \u6d3b\u8dc3 \u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ec4\u7b80\u5355\u7684\u6027\u8d28\u6765\u63cf\u8ff0\u7ea6\u675f\u4f18\u5316\u95ee\u9898\u7684\u6700\u4f18\u70b9\u3002\u8fd9\u4e9b\u6027\u8d28\u79f0\u4e3aKarush-Kuhn-Tucker(KKT)\u6761\u4ef6\u3002\u8fd9\u4e9b\u662f\u786e\u5b9a\u4e00\u4e2a\u70b9\u662f\u6700\u4f18\u70b9\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u5145\u5206\u6761\u4ef6\u3002\u8fd9\u4e9b\u6761\u4ef6\u662f\uff1a (1)\u5e7f\u4e49Lagrangian\u7684\u68af\u5ea6\u4e3a0\u3002 (2)\u6240\u6709\u5173\u4e8e$\\boldsymbol{x}$\u548cKKT\u4e58\u5b50\u7684\u7ea6\u675f\u90fd\u6ee1\u8db3\u3002 (3)\u4e0d\u7b49\u5f0f\u7ea6\u675f\u663e\u793a\u7684\u201c\u4e92\u8865\u677e\u5f1b\u6027\u201d\uff1a$\\boldsymbol{\\alpha}\\odot h(\\boldsymbol{x})=0$\u3002 \u7b2c\u4e94\u7ae0 \u673a\u5668\u5b66\u4e60\u57fa\u7840 \u673a\u5668\u5b66\u4e60\u672c\u8d28\u4e0a\u5c5e\u4e8e\u5e94\u7528\u7edf\u8ba1\u5b66\uff0c\u66f4\u591a\u5730\u5173\u6ce8\u5982\u4f55\u7528\u8ba1\u7b97\u673a\u7edf\u8ba1\u5730\u4f30\u8ba1\u590d\u6742\u51fd\u6570\uff0c\u4e0d\u592a\u5173\u6ce8\u4e3a\u8fd9\u4e9b\u51fd\u6570\u63d0\u4f9b\u7f6e\u4fe1\u533a\u95f4\uff1b\u56e0\u6b64\u6211\u4eec\u56de\u63a2\u8ba8\u4e24\u79cd\u7edf\u8ba1\u5b66\u5730\u4e3b\u8981\u65b9\u6cd5\uff1a \u9891\u7387\u6d3e\u4f30\u8ba1 \u548c \u8d1d\u53f6\u65af\u63a8\u65ad \u3002 5.1 \u5b66\u4e60\u7b97\u6cd5 5.1.1 \u4efb\u52a1$T$ \u901a\u7545\u673a\u5668\u5b66\u4e60 \u4efb\u52a1 \u5b9a\u4e49\u4e3a\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u5e94\u8be5\u5982\u4f55\u5904\u7406\u6837\u672c\u3002 \u6837\u672c \u662f\u6307\u6211\u4eec\u4ece\u67d0\u4e9b\u5e0c\u671b\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u5904\u7406\u7684\u5bf9\u8c61\u6216\u4e8b\u4ef6\u4e2d\u6536\u96c6\u5230\u7684\u5df2\u7ecf\u91cf\u5316\u7684 \u7279\u5f81 \u7684\u96c6\u5408\u3002 \u673a\u5668\u5b66\u4e60\u53ef\u4ee5\u89e3\u51b3\u5f88\u591a\u7c7b\u578b\u7684\u4efb\u52a1\u3002\u4e00\u4e9b\u975e\u5e38\u5e38\u89c1\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u5217\u4e3e\u5982\u4e0b\uff1a (1)\u5206\u7c7b\uff1a\u6307\u5b9a\u67d0\u4e9b\u8f93\u5165\u5c5e\u4e8e$k$\u7c7b\u4e2d\u7684 \u54ea\u4e00\u7c7b \u3002\u8fd8\u6709\u8f93\u51fa\u4e0d\u540c\u7c7b\u522b\u7684 \u6982\u7387\u5206\u5e03 \u3002\u5206\u7c7b\u4efb\u52a1\u4e2d\u6709\u4e00\u4e2a\u4efb\u52a1\u662f \u5bf9\u8c61\u8bc6\u522b \uff0c\u8f93\u5165\u662f\u56fe\u7247\uff0c\u8f93\u51fa\u662f\u8868\u793a\u56fe\u7247\u7269\u4f53\u7684\u6570\u5b57\u7801\u3002 (2)\u8f93\u5165\u7f3a\u5931\u5206\u7c7b\uff1a\uff08\u5f53\u8f93\u5165\u5411\u91cf\u7684\u6bcf\u4e2a\u5ea6\u91cf\u4e0d\u88ab\u4fdd\u8bc1\u7684\u65f6\u5019\uff09\u5f53\u4e00\u4e9b\u8f93\u5165\u53ef\u80fd\u4e22\u5931\u65f6\uff0c\u5b66\u4e60\u7b97\u6cd5\u5fc5\u987b \u5b66\u4e60\u4e00\u7ec4\u51fd\u6570 \uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u5206\u7c7b\u51fd\u6570\u3002\u6bcf\u4e2a\u51fd\u6570\u5bf9\u5e94\u7740\u5206\u7c7b\u5177\u6709\u4e0d\u540c\u7f3a\u5931\u8f93\u5165\u5b50\u96c6\u7684$\\boldsymbol{x}$\u3002\uff08\u5728\u533b\u7597\u8bca\u65ad\u4e2d\u7ecf\u5e38\u51fa\u73b0\uff09\u6709\u6548\u5730\u5b9a\u4e49\u8fd9\u6837\u4e00\u4e2a\u5927\u96c6\u5408\u51fd\u6570\u7684\u65b9\u6cd5\u662f\u5b66\u4e60\u6240\u6709\u76f8\u5173\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\uff0c\u7136\u540e\u901a\u8fc7\u8fb9\u7f18\u5316\u7f3a\u5931\u53d8\u91cf\u6765\u89e3\u51b3\u5206\u7c7b\u4efb\u52a1\u3002\u4f7f\u7528$n$\u4e2a\u8f93\u5165\u53d8\u91cf\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u83b7\u5f97\u6bcf\u4e2a\u53ef\u80fd\u7684\u7f3a\u5931\u8f93\u5165\u96c6\u5408\u6240\u9700\u7684\u6240\u6709$2^n$\u4e2a\u4e0d\u540c\u7684\u5206\u7c7b\u51fd\u6570\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4ec5\u9700\u8981\u5b66\u4e60\u4e00\u4e2a\u63cf\u8ff0\u8054\u5408\u6982\u7387\u5206\u5e03\u7684\u51fd\u6570\u3002 (3)\u56de\u5f52\uff1a\u5bf9\u7ed9\u5b9a\u8f93\u5165 \u9884\u6d4b \u6570\u503c\u3002$f:\\Bbb{R}^n\\to\\Bbb{R}$\u3002 (4)\u8f6c\u5f55\uff1a\u8fd9\u7c7b\u4efb\u52a1\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u89c2\u6d4b\u4e00\u4e9b\u76f8\u5bf9\u975e\u7ed3\u6784\u5316\u8868\u793a\u7684\u6570\u636e\uff0c\u5e76\u8f6c\u5f55\u4fe1\u606f\u4e3a\u79bb\u6563\u7684\u6587\u672c\u5f62\u5f0f\u3002\u5982 \u5149\u5b66\u5b57\u7b26\u8bc6\u522b(OCR) \u8981\u6c42\u6839\u636e\u6587\u672c\u56fe\u7247\u8fd4\u56de\u6587\u5b57\u5e8f\u5217(ASKII\u7801\u6216Unicode\u7801)\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f \u8bed\u97f3\u8bc6\u522b \uff0c\u8f93\u5165\u4e00\u6bb5\u97f3\u9891\u6ce2\u5f62\uff0c\u8f93\u51fa\u4ee5\u5e8f\u5217\u97f3\u9891\u7eaa\u5f55\u4e2d\u6240\u8bf4\u7684\u5b57\u7b26\u6216\u5355\u8bcdID\u7684\u7f16\u7801\u3002 (5)\u673a\u5668\u7ffb\u8bd1\uff1a\u8f93\u5165\u662f\u4e00\u79cd\u8bed\u8a00\u7684\u7b26\u53f7\u5e8f\u5217\uff0c\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5c06\u5176\u8f6c\u5316\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u7b26\u53f7\u5e8f\u5217\u3002\uff08\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff09 (6)\u7ed3\u6784\u5316\u8f93\u51fa\uff1a\u7ed3\u6784\u5316\u8f93\u51fa\u4efb\u52a1\u7684\u8f93\u51fa\u662f\u5411\u91cf\u6216\u8005\u5176\u4ed6\u5305\u542b\u591a\u4e2a\u503c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u6784\u6210\u8f93\u51fa\u7684\u8fd9\u4e9b\u4e0d\u540c\u5143\u7d20\u95f4\u5177\u6709\u91cd\u8981\u5173\u7cfb\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8303\u7574\uff0c\u5305\u62ec\u4e0a\u9762\u7684\u8f6c\u5f55\u4efb\u52a1\u548c\u7ffb\u8bd1\u4efb\u52a1\u5728\u5185\u7684\u5f88\u591a\u5176\u4ed6\u4efb\u52a1\u3002\u4f8b\u5982 \u8bed\u6cd5\u5206\u6790 \u2014\u2014\u6620\u5c04\u81ea\u7136\u8bed\u8a00\u53e5\u5b50\u5230\u8bed\u6cd5\u7ed3\u6784\u6811\uff0c\u5e76 \u6807\u8bb0 \u6811\u7684\u8282\u70b9\u4e3a\u52a8\u8bcd\u3001\u540d\u8bcd\u3001\u526f\u8bcd\u7b49\u7b49\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u56fe\u50cf\u7684 \u50cf\u7d20\u7ea7\u5206\u5272 \uff0c\u5c06\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5206\u914d\u5230\u7279\u5b9a\u7c7b\u522b\u3002\u5728\u8fd9\u4e9b\u6807\u6ce8\u578b\u4efb\u52a1\u4e2d\uff0c\u8f93\u51fa\u7684\u7ed3\u6784\u5f62\u5f0f\u4e0d\u9700\u8981\u548c\u8f93\u5165\u5c3d\u53ef\u80fd\u76f8\u4f3c\u3002\u4f8b\u5982\u4e3a\u56fe\u7247\u6dfb\u52a0\u63cf\u8ff0\u7684\u4efb\u52a1\uff0c\u8f93\u5165\u56fe\u7247\uff0c\u8f93\u51fa\u81ea\u7136\u8bed\u8a00\u53e5\u5b50\u3002\u8fd9\u7c7b\u4efb\u52a1\u88ab\u79f0\u4e3a\u7ed3\u6784\u5316\u8f93\u51fa\u4efb\u52a1\u662f\u56e0\u4e3a\u8f93\u51fa\u503c\u4e4b\u95f4\u5185\u90e8\u7d27\u5bc6\u5173\u7cfb\uff0c\u4f8b\u5982\u6dfb\u52a0\u7684\u63cf\u8ff0\u7684\u5355\u8bcd\u5fc5\u987b\u7ec4\u5408\u6210\u4e00\u4e2a\u901a\u987a\u7684\u53e5\u5b50\u3002 (7)\u5f02\u5e38\u68c0\u6d4b\uff1a\u8fd9\u7c7b\u4efb\u52a1\uff0c\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5728\u4e00\u7ec4\u4e8b\u4ef6\u6216\u5bf9\u8c61\u4e2d\u7b5b\u9009\uff0c\u5e76\u6807\u8bb0\u4e0d\u6b63\u5e38\u6216\u975e\u5178\u578b\u7684\u4e2a\u4f53\u3002\u4f8b\u5982\u5f15\u7528\u5361\u6b3a\u8bc8\u68c0\u6d4b\uff0c\u5bf9\u4eba\u7684\u8d2d\u4e70\u4e60\u60ef\u7f04\u9ed8\uff0c\u53ef\u4ee5\u68c0\u6d4b\u5361\u662f\u5426\u88ab\u6ee5\u7528\u3002 (8)\u5408\u6210\u548c\u91c7\u6837\uff1a\u8fd9\u7c7b\u4efb\u52a1\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7a0b\u5e8f\u751f\u6210\u4e00\u4e9b\u548c\u8bad\u7ec3\u6570\u636e\u76f8\u4f3c\u7684\u65b0\u6837\u672c\u3002\u5408\u6210\u548c\u91c7\u6837\u5728\u5a92\u4f53\u5e94\u7528\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\u89c6\u9891\u6e38\u620f\u53ef\u4ee5 \u81ea\u52a8\u751f\u6210 \u5927\u578b\u7269\u4f53\u6216\u98ce\u666f\u7684\u7eb9\u7406\u3002\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u91c7\u6837\u6216\u5408\u6210\u8fc7\u7a0b\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684\u8f93\u5165\u751f\u6210\u4e00\u4e9b \u7279\u5b9a\u7c7b\u578b \u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u5728 \u8bed\u97f3\u5408\u6210 \u4e2d\uff0c\u6839\u636e\u4e66\u5199\u7684\u53e5\u5b50\u8f93\u51fa\u53e5\u5b50\u8bed\u97f3\u7684\u97f3\u9891\u6ce2\u5f62\u3002\u8fd9\u662f\u4e00\u7c7b\u7ed3\u6784\u5316\u8f93\u51fa\u4efb\u52a1\uff0c\u4f46\u662f\u591a\u4e86\u6bcf\u4e2a\u8f93\u5165\u5e76\u975e\u53ea\u6709\u4e00\u4e2a\u6b63\u786e\u8f93\u51fa\u7684\u6761\u4ef6\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u8f93\u51fa\u6709\u5f88\u591a\u53d8\u5316\u4f7f\u5f97\u7ed3\u679c\u770b\u4e0a\u53bb\u66f4\u52a0\u81ea\u7136\u548c\u771f\u5b9e\u3002 (9)\u7f3a\u5931\u503c\u586b\u8865\uff1a\u5728\u8fd9\u7c7b\u4efb\u52a1\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5bf9\u65b0\u6837\u672c$\\boldsymbol{x}\\in\\Bbb{R}^n$\u4e2d\u7f3a\u5931\u7684\u67d0\u4e9b\u5143\u7d20$x_i$\u8fdb\u884c\u586b\u8865\u3002 (10)\u53bb\u566a\uff1a\u8fd9\u7c7b\u4efb\u52a1\u91cd\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u8f93\u5165\u662f\uff0c\u5e72\u51c0\u6837\u672c$\\boldsymbol{x}\\in\\Bbb{R}^n$\u7ecf\u8fc7\u672a\u77e5\u635f\u574f\u8fc7\u7a0b\u540e\u5f97\u5230\u7684\u635f\u574f\u6837\u672c$\\tilde{\\boldsymbol{x}}\\in\\Bbb{R}^n$\u3002\u7b97\u6cd5\u6839\u636e\u635f\u574f\u540e\u7684\u6837\u672c$\\tilde{\\boldsymbol{x}}$\u9884\u6d4b\u5e72\u51c0\u7684\u6837\u672c$\\boldsymbol{x}$\uff0c\u6216\u8005\u66f4\u4e00\u822c\u5730\u9884\u6d4b\u6761\u4ef6\u6982\u7387\u5206\u5e03$p(\\boldsymbol{x}|\\tilde{\\boldsymbol{x}})$\u3002 (11)\u5bc6\u5ea6\u4f30\u8ba1\u6216\u6982\u7387\u8d28\u91cf\u51fd\u6570\u4f30\u8ba1\uff1a\u5728\u5bc6\u5ea6\u4f30\u8ba1\u95ee\u9898\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5b66\u4e60\u51fd\u6570$p_{model}:\\Bbb{R}^n\\to\\Bbb{R}$\uff0c\u5176\u4e2d$p_{model}(\\boldsymbol{x})$\u53ef\u4ee5\u89e3\u91ca\u4e3a\u6837\u672c\u91c7\u6837\u7a7a\u95f4\u5730\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08x\u8fde\u7eed\uff09\u6216\u8005\u6982\u7387\u8d28\u91cf\u51fd\u6570\uff08x\u79bb\u6563\uff09\u3002\u7b97\u6cd5\u9700\u8981\u5b66\u4e60\u89c2\u6d4b\u5230\u7684\u6570\u636e\u7684\u7ed3\u6784\u3002\u7b97\u6cd5\u5fc5\u987b\u77e5\u9053\u4ec0\u4e48\u60c5\u51b5\u4e0b\u6837\u672c\u805a\u96c6\u51fa\u73b0\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e0d\u592a\u53ef\u80fd\u51fa\u73b0\u3002\u4ee5\u4e0a\u63cf\u8ff0\u7684\u5927\u591a\u6570\u4efb\u52a1\u90fd\u9700\u8981\u5b66\u4e60\u7b97\u6cd5\u81f3\u5c11\u80fd\u9690\u5f0f\u5730\u6355\u83b7\u6982\u7387\u5206\u5e03\u7684\u7ed3\u6784\u3002\u5bc6\u5ea6\u4f30\u8ba1\u53ef\u4ee5\u8ba9\u6211\u4eec \u663e\u5f0f\u5730\u6355\u83b7\u8be5\u5206\u5e03 \u3002\u539f\u5219\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8be5\u5206\u5e03\u4e0a\u8ba1\u7b97\u4ee5\u4fbf\u89e3\u51b3\u5176\u4ed6\u4efb\u52a1\u3002\u4f8b\u5982\u53ef\u4ee5\u7528\u8be5\u5206\u5e03\u89e3\u51b3\u7f3a\u5931\u503c\u586b\u8865\u4efb\u52a1\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\u6982\u7387\u5206\u5e03$p(\\boldsymbol{x})$\u662f\u96be\u4ee5\u8ba1\u7b97\u7684\u3002 5.1.2 \u6027\u80fd\u5ea6\u91cf$P$ \u8bc4\u4f30\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u80fd\u529b\u3002 \u5bf9\u4e8e\u5206\u7c7b\u3001\u7f3a\u5931\u8f93\u5165\u5206\u7c7b\u548c\u8f6c\u5f55\u4efb\u52a1\uff0c\u901a\u5e38\u7528\u51c6\u786e\u7387(accuracy)\u6216\u9519\u8bef\u7387(error rate)\u3002\u901a\u5e38\u628a\u9519\u8bef\u7387\u79f0\u4e3a 0-1\u635f\u5931\u7684\u671f\u671b \u3002 \u67d0\u4e9b\u60c5\u51b5\u4e0b\u5f88\u96be\u786e\u5b9a\u5e94\u8be5\u5ea6\u91cf\u4ec0\u4e48\uff0c\u6bd4\u5982\u8f6c\u5f55\u3002\u8fd8\u6709\u4e00\u4e9b\u60c5\u51b5\uff0c\u6211\u4eec\u77e5\u9053\u5e94\u8be5\u5ea6\u91cf\u54ea\u4e9b\u6570\u503c\uff0c\u4f46\u662f\u5ea6\u91cf\u5b83\u4eec\u4e0d\u592a\u73b0\u5b9e\uff0c\u6bd4\u5982\u5bc6\u5ea6\u4f30\u8ba1\u3002 5.1.3 \u7ecf\u9a8c$E$ \u5747\u65b9\u8bef\u5dee(mean squared error)\uff1a MSE_{test}=\\frac{1}{m}\\sum_i({\\hat{\\boldsymbol{y}}}^{(test)}-\\boldsymbol{y}^{(test)}) 5.2 \u5bb9\u91cf\u3001\u8fc7\u62df\u5408\u548c\u6b20\u62df\u5408 \u8bad\u7ec3\u96c6\u4e0a\u7684\u5ea6\u91cf\u8bef\u5dee\u79f0\u4e3a\u8bad\u7ec3\u8bef\u5dee(training error)\u3002\u6d4b\u8bd5\u96c6\u4e0a\u7684\u8bef\u5dee\u53eb\u505a\u6d4b\u8bd5\u8bef\u5dee(test error)\uff0c\u4e5f\u53eb\u6cdb\u5316\u8bef\u5dee(generalization error)\u3002\u6cdb\u5316\u8bef\u5dee\u88ab\u5b9a\u4e49\u4e3a\u65b0\u8f93\u5165\u7684 \u8bef\u5dee\u671f\u671b \u3002 \u8bad\u7ec3\u65f6\uff0c\u6211\u4eec\u804c\u80fd\u89c2\u6d4b\u5230\u8bad\u7ec3\u96c6\uff0c\u4f46\u662f\u6211\u4eec\u8981\u7684\u662f\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u6027\u80fd\u3002\u5982\u679c\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u662f\u4efb\u610f\u6536\u96c6\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u505a\u7684\u5f88\u6709\u9650\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u7684 \u6536\u96c6\u65b9\u5f0f \u6709\u4e9b\u5047\u8bbe\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u591f\u5bf9\u7b97\u6cd5\u505a\u4e9b\u6539\u8fdb\u3002 \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u901a\u8fc7\u6570\u636e\u96c6\u4e0a\u88ab\u79f0\u4e3a\u6570\u636e\u751f\u6210\u8fc7\u7a0b(data generating process)\u7684\u6982\u7387\u5206\u5e03\u751f\u6210\u3002\u901a\u5e38\u6211\u4eec\u4f1a\u505a\u4e00\u7cfb\u5217\u88ab\u7edf\u79f0\u4e3a \u72ec\u7acb\u540c\u5206\u5e03\u5047\u8bbe \u7684\u5047\u8bbe\u3002\u8fd9\u4e2a\u5047\u8bbe\u65f6\u8bf4\u6bcf\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u90fd\u662f\u5f7c\u6b64\u76f8\u4e92\u72ec\u7acb(independent)\u7684\uff0c\u5e76\u4e14\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u662f\u540c\u5206\u5e03\u7684(identically distributed)\uff0c\u91c7\u6837\u81ea\u76f8\u540c\u7684\u5206\u5e03\u3002\u8fd9\u4e2a\u5047\u8bbe\u6211\u4eec\u80fd\u591f\u5728\u5355\u4e2a\u6837\u672c\u7684\u6982\u7387\u5206\u5e03\u63cf\u8ff0\u6570\u636e\u751f\u6210\u8fc7\u7a0b\u3002\u7136\u540e\u76f8\u540c\u7684\u5206\u5e03\u53ef\u4ee5\u7528\u6765\u751f\u6210\u6bcf\u4e00\u4e2a\u6837\u672c\u548c\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u6837\u672c\u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u5171\u4eab\u7684\u6f5c\u5728\u5206\u5e03\u79f0\u4e3a\u6570\u636e\u751f\u6210\u5206\u5e03(data generating distribution)\uff0c\u8bb0\u4f5c$p_{data}$\u3002\u8fd9\u4e2a\u6982\u7387\u6846\u67b6\u548c\u72ec\u7acb\u540c\u5206\u5e03\u5047\u8bbe\u5141\u8bb8\u6211\u4eec\u4ece\u6570\u5b66\u4e0a\u7814\u7a76\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u51b3\u5b9a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6548\u679c\u662f\u5426\u597d\u7684\u56e0\u7d20\uff1a (1)\u964d\u4f4e\u8bad\u7ec3\u8bef\u5dee (2)\u7f29\u5c0f\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u7684\u5dee\u8ddd\u3002 \u4e0a\u9762\u8fd9\u4e24\u4e2a\u56e0\u7d20\u5bf9\u5e94\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u4e24\u4e2a\u4e3b\u8981\u6311\u6218\uff1a \u6b20\u62df\u5408 (underfitting)\u548c \u8fc7\u62df\u5408 (overfitting)\u3002\u6b20\u62df\u5408\u662f\u6307\u6a21\u578b\u4e0d\u80fd\u5728\u8bad\u7ec3\u96c6\u4e0a\u83b7\u5f97\u8db3\u591f\u4f4e\u7684\u8bef\u5dee\u3002\u800c\u8fc7\u62df\u5408\u662f\u6307\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u4e4b\u95f4\u7684\u5dee\u8ddd\u592a\u5927\u3002 \u901a\u8fc7\u8c03\u6574\u6a21\u578b\u7684 \u5bb9\u91cf (capacity)\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u6a21\u578b\u662f\u5426\u504f\u5411\u4e8e\u8fc7\u62df\u5408\u6216\u8005\u6b20\u62df\u5408\u3002\u901a\u4fd7\u5730\u8bf4\uff0c\u6a21\u578b\u5730\u5bb9\u91cf\u662f\u6307 \u5176\u62df\u5408\u5404\u79cd\u51fd\u6570\u7684\u80fd\u529b \u3002\u5bb9\u91cf\u4f4e\u7684\u6a21\u578b\u53ef\u80fd\u5f88\u96be\u62df\u5408\u8bad\u7ec3\u96c6\u3002\u5bb9\u91cf\u9ad8\u7684\u6a21\u578b\u53ef\u80fd\u4f1a\u8fc7\u62df\u5408\uff0c\u56e0\u4e3a\u8bb0\u4f4f\u4e86\u4e0d\u9002\u7528\u4e8e\u6d4b\u8bd5\u96c6\u5730\u8bad\u7ec3\u96c6\u6027\u8d28\u3002 \u7528\u4e8e\u63a7\u5236\u8bad\u7ec3\u7b97\u6cd5\u5bb9\u91cf\u7684\u65b9\u6cd5\u662f\u9009\u62e9 \u5047\u8bbe\u7a7a\u95f4 (hypothesis space)\uff0c\u5373\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u9009\u62e9\u4e3a\u89e3\u51b3\u65b9\u6848\u7684\u6570\u636e\u96c6\u3002\u4f8b\u5982\u7ebf\u6027\u56de\u5f52\u51fd\u6570\u5c06\u5173\u4e8e\u5176\u8f93\u5165\u7684\u6240\u6709\u7ebf\u6027\u51fd\u6570\u4f5c\u4e3a\u5047\u8bbe\u7a7a\u95f4\u3002\u5e7f\u4e49\u7ebf\u6027\u56de\u5f52\u7684\u5047\u8bbe\u7a7a\u95f4\u5305\u542b\u591a\u9879\u5f0f\u51fd\u6570\uff0c\u800c\u975e\u4ec5\u6709\u7ebf\u6027\u51fd\u6570\u3002\u8fd9\u6837\u505a\u5c31\u589e\u52a0\u4e86\u6a21\u578b\u7684\u5bb9\u91cf\u3002 \u7b97\u6cd5\u7684\u5bb9\u91cf\u9002\u5408\u4e0e\u4efb\u52a1\u7684\u590d\u6742\u5ea6\u548c\u6240\u63d0\u4f9b\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf\u65f6\uff0c\u7b97\u6cd5\u6548\u679c\u901a\u7545\u4f1a\u6700\u4f73\uff0c\u5bb9\u91cf\u4e0d\u8db3\u4e0d\u80fd\u89e3\u51b3\u590d\u6742\u4efb\u52a1\uff0c\u5bb9\u91cf\u9ad8\u53ef\u80fd\u4f1a\u8fc7\u62df\u5408\u3002 \u8fd8\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u6539\u53d8\u6a21\u578b\u7684\u5bb9\u91cf\u3002\u5bb9\u91cf\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u6a21\u578b\u7684\u9009\u62e9\u3002\u6a21\u578b\u89c4\u5b9a\u4e86\u8c03\u6574\u53c2\u6570\u964d\u4f4e\u8bad\u7ec3\u76ee\u6807\u65f6\uff0c\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u4ece\u54ea\u4e9b\u51fd\u6570\u65cf\u4e2d\u9009\u62e9\u51fd\u6570\u3002\u8fd9\u662f\u6a21\u578b\u7684 \u8868\u793a\u5bb9\u91cf (representational capacity)\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4ece\u8fd9\u4e9b\u51fd\u6570\u4e2d\u6311\u9009\u51fa\u6700\u4f18\u51fd\u6570\u662f\u975e\u5e38\u56f0\u96be\u7684\u4f18\u5316\u95ee\u9898\u3002\u5b9e\u9645\u4e2d\u4e0d\u4f1a\u771f\u7684\u627e\u5230\u6700\u4f18\u51fd\u6570\uff0c\u800c\u4ec5\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\u8bad\u7ec3\u8bef\u5dee\u7684\u51fd\u6570\u3002\u6709\u4e00\u4e9b \u989d\u5916\u7684\u9650\u5236\u56e0\u7d20 \uff0c\u6bd4\u5982\u4f18\u5316\u7b97\u6cd5\u7684\u4e0d\u5b8c\u7f8e\uff0c\u610f\u5473\u7740\u5b66\u4e60\u7b97\u6cd5\u7684 \u6709\u6548\u5bb9\u91cf (effective capacity)\u53ef\u80fd\u5c0f\u4e8e\u6a21\u578b\u65cf\u7684\u8868\u793a\u5bb9\u91cf\u3002 \u63d0\u9ad8\u6a21\u578b\u6cdb\u5316\u80fd\u529b\u7684\u4e00\u4e2a\u7b80\u7ea6\u539f\u5219\uff0c\u662f \u5965\u5361\u59c6\u5243\u5200 (Occam's razor)\uff0c\u8be5\u539f\u5219\u662f\uff0c\u5728\u540c\u6837\u80fd\u591f\u89e3\u91ca\u5df2\u77e5\u89c2\u6d4b\u73b0\u8c61\u7684\u5047\u8bbe\u4e2d\uff0c\u5e94\u8be5\u6311\u9009\"\u6700\u7b80\u5355\"\u7684\u90a3\u4e00\u4e2a\u3002 \u7edf\u8ba1\u5b66\u4e60\u7406\u8bba\u63d0\u4f9b\u4e86\u91cf\u5316\u6a21\u578b\u5bb9\u91cf\u7684\u4e0d\u540c\u65b9\u6cd5\u3002\u6700\u6709\u540d\u7684\u662fVapnik-Chervonenkis\u7ef4\u5ea6(Vapnik-Chervonenkis dimension, VC)\u3002 VC\u7ef4 \u5ea6\u91cf\u4e8c\u5143\u5206\u7c7b\u5668\u7684\u5bb9\u91cf\u3002VC\u7ef4\u5b9a\u4e49\u4e3a\u8be5\u5206\u7c7b\u5668\u80fd\u591f\u5206\u7c7b\u7684\u8bad\u7ec3\u6837\u672c\u7684\u6700\u5927\u6570\u76ee\u3002\u5047\u8bbe\u5b58\u5728$m$\u4e2a\u4e0d\u540c$\\boldsymbol{x}$\u70b9\u7684\u8bad\u7ec3\u96c6\u3002\u5206\u7c7b\u5668\u53ef\u4ee5\u4efb\u610f\u5730\u6807\u8bb0\u8be5$m$\u4e2a\u4e0d\u540c\u7684$\\boldsymbol{x}$\uff0cVC\u7ef4\u88ab\u5b9a\u4e49\u4e3a$m$\u7684\u6700\u5927\u53ef\u80fd\u503c\u3002 \u7edf\u8ba1\u5b66\u7406\u8bba\u4e2d\u6700\u91cd\u8981\u7684\u7ed3\u8bba\u9610\u8ff0\u4e86\u8bad\u7ec3\u8bef\u5dee\u548c\u6cdb\u5316\u8bef\u5dee\u4e4b\u95f4\u7684\u5dee\u5f02\u7684\u4e0a\u754c\u968f\u7740\u6a21\u578b\u5bb9\u91cf\u7684\u589e\u957f\u800c\u589e\u957f\uff0c\u968f\u7740\u8bad\u7ec3\u6837\u672c\u589e\u591a\u800c\u4e0b\u964d\u3002\u8fd9\u4e9b\u8fb9\u754c\u5f88\u5c11\u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u4e00\u90e8\u5206\u539f\u56e0\u662f\u8fb9\u754c\u592a\u677e\uff0c\u53e6\u4e00\u90e8\u5206\u539f\u56e0\u662f \u5f88\u96be\u786e\u5b9a\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u5bb9\u91cf \u3002\u6709\u6548\u5bb9\u91cf\u53d7\u9650\u4e8e\u4f18\u5316\u7b97\u6cd5\u7684\u80fd\u529b\uff0c\u786e\u5b9a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u5bb9\u91cf\u7279\u522b\u56f0\u96be\u3002\u800c\u4e14\u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u4e00\u822c\u975e\u51f8\u4f18\u5316\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u6709\u5f88\u5c11\u7684\u7406\u8bba\u5206\u6790\u3002 \u7ebf\u6027\u56de\u5f52\u662f\u53c2\u6570\u6a21\u578b\uff0c\u5b66\u4e60\u5230\u7684\u51fd\u6570\u5728\u89c2\u6d4b\u65b0\u6570\u636e\u6b20\uff0c\u53c2\u6570\u662f\u6709\u9650\u4e14\u56fa\u5b9a\u7684\u5411\u91cf\u3002 \u975e\u53c2\u6570\u6a21\u578b (non-parametric)\u6ca1\u6709\u8fd9\u6837\u7684\u9650\u5236\u3002\u6709\u65f6\u975e\u53c2\u6570\u6a21\u578b\u4ec5\u662f\u4e00\u4e9b\u4e0d\u80fd\u5b9e\u9645\u5b9e\u73b0\u7684\u7406\u8bba\u62bd\u8c61(\u6bd4\u5982\u641c\u7d22\u6240\u6709\u53ef\u80fd\u6982\u7387\u5206\u5e03\u7684\u7b97\u6cd5)\uff0c\u7136\u800c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e9b\u4f7f\u7528\u7684\u975e\u53c2\u6570\u6a21\u578b\uff0c\u4f7f\u4ed6\u4eec\u7684\u590d\u6742\u5ea6\u548c\u8bad\u7ec3\u96c6\u5927\u5c0f\u6709\u5173\u3002\u4e00\u4e2a\u793a\u4f8b\u662f\u6700\u8fd1\u90bb\u56de\u5f52(nearest neighbor regression)\u3002 \u7406\u60f3\u6a21\u578b\u5047\u8bbe\u6211\u4eec\u80fd\u591f\u9884\u5148\u77e5\u9053\u751f\u6210\u6570\u636e\u7684\u771f\u5b9e\u6982\u7387\u5206\u5e03\u3002\u7136\u800c\u8fd9\u6837\u7684\u6a21\u578b\u4ecd\u7136\u5728\u5f88\u591a\u95ee\u9898\u4e0a\u53d1\u751f\u9519\u8bef\uff0c\u56e0\u4e3a\u5206\u5e03\u4e2d\u4ecd\u7136\u4f1a\u6709\u4e00\u4e9b\u566a\u58f0\u3002\u4ece\u9884\u5148\u77e5\u9053\u7684\u771f\u5b9e\u5206\u5e03$p(\\boldsymbol{x},y)$\u9884\u6d4b\u800c\u51fa\u73b0\u7684\u8bef\u5dee\u88ab\u79f0\u4e3a \u8d1d\u53f6\u65af\u8bef\u5dee (Bayes error)\u3002 5.2.1 \u6ca1\u6709\u514d\u8d39\u7684\u5348\u9910\u5b9a\u7406 \u5f52\u7eb3\u63a8\u7406\uff0c\u6216\u662f\u4ece\u4e00\u7ec4\u6709\u9650\u7684\u6837\u672c\u4e2d\u63a8\u65ad\u4e00\u822c\u7684\u89c4\u5219\uff0c\u5728\u903b\u8f91\u4e0a\u4e0d\u662f\u5f88\u6709\u6548\u3002\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\uff0c\u673a\u5668\u5b66\u4e60\u4ec5\u901a\u8fc7 \u6982\u7387\u6cd5\u5219 \u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u65e0\u9700\u4f7f\u7528\u7eaf\u903b\u8f91\u63a8\u7406\u6574\u4e2a\u786e\u5b9a\u6027\u6cd5\u5219\u3002\u673a\u5668\u5b66\u4e60\u4fdd\u8bc1\u627e\u5230\u4e00\u4e2a\u5728\u6240\u5173\u6ce8\u7684 \u5927\u591a\u6570 \u6837\u672c\u4e0a \u53ef\u80fd \u6b63\u786e\u7684\u89c4\u5219\u3002\u53ef\u60dc\uff0c \u6ca1\u6709\u514d\u8d39\u5348\u9910\u5b9a\u7406 (no free lunch theorem)\u8868\u660e\uff0c\u5728\u6240\u6709\u53ef\u80fd\u7684\u6570\u636e\u751f\u6210\u5206\u5e03\u4e0a\u5e73\u5747\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2a\u5206\u7c7b\u7b97\u6cd5\u5728\u672a\u5b9e\u73b0\u89c2\u6d4b\u7684\u70b9\u4e0a\u90fd\u6709\u76f8\u540c\u7684\u9519\u8bef\u7387\u3002\u6362\u8a00\u4e4b\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c \u6ca1\u6709\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u603b\u662f\u6bd4\u5176\u4ed6\u7684\u8981\u597d \u3002\u6211\u4eec\u80fd\u591f\u8bbe\u60f3\u7684\u6700\u5148\u8fdb\u7684\u7b97\u6cd5\u548c\u7b80\u5355\u5730\u5c06\u6240\u6709\u70b9\u5f52\u4e3a\u540c\u4e00\u7c7b\u5730\u7b80\u5355\u7b97\u6cd5\u6709\u7740\u76f8\u540c\u5730\u5e73\u5747\u6027\u80fd(\u5728\u6240\u6709\u53ef\u80fd\u5730\u4efb\u52a1\u4e0a)\u3002 \u673a\u5668\u5b66\u4e60\u7814\u7a76\u5730\u76ee\u6807\u4e0d\u662f\u627e\u4e00\u4e2a\u901a\u7528\u5b66\u4e60\u7b97\u6cd5\u6216\u662f\u7edd\u5bf9\u6700\u597d\u5730\u5b66\u4e60\u7b97\u6cd5\u3002\u53cd\u4e4b\uff0c\u6211\u4eec\u5730\u76ee\u6807\u662f\u7406\u89e3\u4ec0\u4e48\u6837\u5730\u5206\u5e03\u4e0e\u4eba\u5de5\u667a\u80fd\u83b7\u53d6\u7ecf\u9a8c\u5730\"\u771f\u5b9e\u4e16\u754c\"\u76f8\u5173\uff0c\u4ec0\u4e48\u6837\u7684\u5b66\u4e60\u7b97\u6cd5 \u5728\u6211\u4eec\u5173\u6ce8\u7684\u6570\u636e\u751f\u6210\u5206\u5e03\u4e0a\u6548\u679c\u6700\u597d \u3002 5.2.2 \u6b63\u5219\u5316 \u7b97\u6cd5\u7684\u6548\u679c\u4e0d\u4ec5\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d7\u5f71\u54cd\u4e8e \u5047\u8bbe\u7a7a\u95f4\u7684\u51fd\u6570\u6570\u91cf \uff0c\u4e5f\u53d6\u51b3\u4e8e\u8fd9\u4e9b \u51fd\u6570\u7684\u5177\u4f53\u5f62\u5f0f \u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u63a7\u5236\u7b97\u6cd5\u7684\u6027\u80fd\uff0c(1)\u5141\u8bb8\u4f7f\u7528\u7684\u51fd\u6570\u79cd\u7c7b\uff1b(2)\u8fd9\u4e9b\u51fd\u6570\u7684\u6570\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u52a0\u5165 \u6743\u91cd\u8870\u51cf (weight decay)\u6765\u4fee\u6539\u7ebf\u6027\u56de\u5f52\u7684\u8bad\u7ec3\u6807\u51c6\u3002\u5e26\u6743\u91cd\u8870\u51cf\u7684\u7ebf\u6027\u56de\u5f52\u6700\u5c0f\u5316\u8bad\u7ec3\u96c6\u4e0a\u7684 \u5747\u65b9\u8bef\u5dee \u548c \u6b63\u5219\u9879 \u7684\u548c$J(\\boldsymbol{w})$\uff0c\u5176\u504f\u597d\u4e8e\u5e73\u65b9\u8303\u6570$L^2$\u8f83\u5c0f\u7684\u6743\u91cd\u3002\u5177\u4f53\u5982\u4e0b\uff1a J(\\boldsymbol{w})=MSE_{train}+\\lambda\\boldsymbol{w}^T\\boldsymbol{w} \u66f4\u4e00\u822c\u5730\uff0c\u6b63\u5219\u5316\u4e00\u4e2a\u5b66\u4e60\u51fd\u6570$f(\\boldsymbol{x};\\boldsymbol{\\theta})$\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u4ee3\u4ef7\u51fd\u6570\u6dfb\u52a0\u88ab\u79f0\u4e3a\u6b63\u5219\u5316\u9879\u7684\u60e9\u7f5a\u3002 \u8868\u793a\u5bf9\u51fd\u6570\u5730\u504f\u597d\u662f\u6bd4\u589e\u51cf\u5047\u8bbe\u7a7a\u95f4\u7684\u6210\u5458\u51fd\u6570\u66f4\u4e00\u822c\u7684\u63a7\u5236\u6a21\u578b\u5bb9\u91cf\u7684\u65b9\u6cd5\u3002\u6709\u5f88\u591a\u5176\u4ed6\u65b9\u6cd5\u9690\u5f0f\u6216\u663e\u5f0f\u5730\u8868\u8fbe\u5bf9\u4e0d\u540c\u89e3\u5730\u504f\u597d\u3002\u8fd9\u4e9b\u90fd\u662f \u6b63\u5219\u5316 (regularization)\u3002\u6b63\u5219\u5316\u662f\u6307\u6211\u4eec\u4fee\u6539\u5b66\u4e60\u7b97\u6cd5\uff0c\u4f7f\u5176\u964d\u4f4e\u6cdb\u5316\u8bef\u5dee\u800c\u975e\u8bad\u7ec3\u8bef\u5dee\u3002\u6b63\u5219\u5316\u662f\u673a\u5668\u5b66\u4e60\u9886\u57df\u5730\u4e2d\u5fc3\u95ee\u9898\u4e4b\u4e00\uff0c\u53ea\u6709\u4f18\u5316\u80fd\u591f\u4e0e\u5176\u91cd\u8981\u6027\u76f8\u5ab2\u3002\u6df1\u5ea6\u5b66\u4e60\u4e2d\u666e\u904d\u7684(\u7279\u522b\u662f\u672c\u4e66)\u7684\u7406\u5ff5\u662f\u5927\u91cf\u4efb\u52a1(\u4f8b\u5982\u4eba\u7c7b\u80fd\u505a\u7684\u667a\u80fd\u4efb\u52a1)\u4e5f\u8bb8\u90fd\u80fd\u4f7f\u7528\u975e\u5e38\u901a\u7528\u7684\u6b63\u5219\u5316\u5f62\u5f0f\u6765\u6709\u6548\u89e3\u51b3\u3002 5.3 \u8d85\u53c2\u6570\u548c\u9a8c\u8bc1\u96c6 \u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u90fd\u6709 \u8d85\u53c2\u6570 \uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6765\u63a7\u5236\u7b97\u6cd5\u884c\u4e3a\u3002\u8d85\u53c2\u6570\u7684\u503c\u4e0d\u662f\u901a\u8fc7\u5b66\u4e60\u7b97\u6cd5\u672c\u8eab\u5b66\u4e60\u51fa\u6765\u7684\u3002\u6709\u65f6\u5019\u4e00\u4e2a\u9009\u9879\u88ab\u8bbe\u4e3a\u8d85\u53c2\u6570\uff0c\u662f\u56e0\u4e3a\u5b83\u592a\u96be\u4f18\u5316\u4e86\u3002\u66f4\u591a\u7684\u60c5\u51b5\u662f\uff0c\u8be5\u9009\u9879\u5fc5\u987b\u662f\u8d85\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9002\u5408\u5728\u8bad\u7ec3\u96c6\u4e0a\u5b66\u4e60\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u8bad\u7ec3\u7b97\u6cd5\u89c2\u6d4b\u4e0d\u5230\u7684\u9a8c\u8bc1\u96c6(validtaion set)\u6837\u672c\u3002 \u9a8c\u8bc1\u96c6\u662f\u7528\u6765\"\u8bad\u7ec3\"\u8d85\u53c2\u6570\u7684 \u3002\u5c3d\u7ba1\u9a8c\u8bc1\u96c6\u7684\u8bef\u5dee\u901a\u5e38\u4f1a\u6bd4\u8bad\u7ec3\u96c6\u8bef\u5dee\u5c0f\uff0c\u9a8c\u8bc1\u96c6\u4f1a\u4f4e\u4f30\u6cdb\u5316\u8bef\u5dee\u3002 5.3.1 \u4ea4\u53c9\u9a8c\u8bc1 \u5c0f\u89c4\u6a21\u6d4b\u8bd5\u96c6\u610f\u5473\u7740\u5e73\u5747\u6d4b\u8bd5\u8bef\u5dee\u4f30\u8ba1\u7684\u7edf\u8ba1\u4e0d\u786e\u5b9a\u6027\uff0c\u8fd9\u4f7f\u5f97\u5f88\u96be\u554a\u5224\u65ad\u7b97\u6cd5A\u662f\u5426\u6bd4\u7b97\u6cd5B\u5728\u7ed9\u5b9a\u7684\u4efb\u52a1\u4e0a\u505a\u5f97\u66f4\u597d\u3002\u6240\u4ee5\u6211\u4eec\u7528k\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u4ee3\u4ef7\u662f\u589e\u52a0\u4e86\u8ba1\u7b97\u91cf\u3002 5.4 \u4f30\u8ba1\u3001\u504f\u5dee\u548c\u65b9\u5dee 5.4.1 \u70b9\u4f30\u8ba1 \u70b9\u4f30\u8ba1 (point estimator)\u8bd5\u56fe\u4e3a\u4e00\u4e9b\u611f\u5174\u8da3\u7684\u91cf\u63d0\u4f9b\u5355\u4e2a\"\u6700\u4f18\"\u9884\u6d4b\u3002\u4e00\u822c\u5730\uff0c\u611f\u5174\u8da3\u5730\u91cf\u53ef\u4ee5\u662f \u5355\u4e2a\u53c2\u6570 \uff0c\u6216\u662f\u67d0\u4e9b\u53c2\u6570\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a \u5411\u91cf\u53c2\u6570 \u3002\u4e3a\u4e86\u533a\u5206\u53c2\u6570\u4f30\u8ba1\u548c\u771f\u5b9e\u503c\uff0c\u6211\u4eec\u4e60\u60ef\u5c06\u53c2\u6570$\\theta$\u7684\u70b9\u4f30\u8ba1\u8868\u793a\u4e3a$\\hat{\\theta}$\u3002 \u4ee4$\\{\\boldsymbol{x}^{(1)},...,\\boldsymbol{x}^{(m)}\\}$\u662f$m$\u4e2a\u72ec\u7acb\u540c\u5206\u5e03\u7684\u6570\u636e\u70b9\u3002\u70b9\u4f30\u8ba1\u6216\u7edf\u8ba1\u91cf(statistics)\u662f\u8fd9\u4e9b\u6570\u636e\u7684\u4efb\u610f\u51fd\u6570\uff1a \\hat{\\boldsymbol{\\theta}}_m=g(\\boldsymbol{x}^{(1)},...,\\boldsymbol{x}^{(m)}) \u8fd9\u4e2a\u5b9a\u4e49\u4e0d\u8981\u6c42$g$\u8fd4\u56de\u4e00\u4e2a\u63a5\u8fd1\u771f\u5b9e$\\boldsymbol{\\Theta}$\u7684\u503c\uff0c\u6d3b\u7740$g$\u7684\u503c\u57df\u6070\u597d\u662f$\\boldsymbol{\\theta}$\u7684\u5141\u8bb8\u53d6\u503c\u8303\u56f4\u3002\u70b9\u4f30\u8ba1\u7684\u5b9a\u4e49\u975e\u5e38\u5bbd\u6cdb\u3002 \u6211\u4eec\u91c7\u53d6\u9891\u7387\u6d3e\u5728\u7edf\u8ba1\u4e0a\u7684\u89c2\u70b9\uff0c\u5047\u8bbe\u771f\u5b9e\u53c2\u6570$\\boldsymbol{\\theta}$\u662f \u56fa\u5b9a\u4f46\u672a\u77e5\u7684 \u3002 \u70b9\u4f30\u8ba1\u4e5f\u53ef\u4ee5\u6307\u8f93\u5165\u548c\u76ee\u6807\u53d8\u91cf\u4e4b\u95f4\u5173\u7cfb\u7684\u4f30\u8ba1\u3002\u6211\u4eec\u5c06\u8fd9\u79cd\u7c7b\u578b\u7684\u70b9\u4f30\u8ba1\u79f0\u4e3a \u51fd\u6570\u4f30\u8ba1 \u3002 \u6709\u65f6\u5019\u6211\u4eec\u4f1a\u5173\u6ce8\u51fd\u6570\u4f30\u8ba1(\u6216\u51fd\u6570\u8fd1\u4f3c)\u3002\u8fd9\u65f6\u6211\u4eec\u8bd5\u56fe\u4ece\u8f93\u5165\u5411\u91cf$\\boldsymbol{x}$\u9884\u6d4b\u53d8\u91cf$\\boldsymbol{y}$\u3002\u6211\u4eec\u5047\u8bbe\u6709\u4e00\u4e2a\u51fd\u6570$f(\\boldsymbol{x})$\u8868\u793a$\\boldsymbol{y}$\u548c$\\boldsymbol{x}$\u4e4b\u95f4\u7684\u8fd1\u4f3c\u5173\u7cfb\u3002\u5728\u51fd\u6570\u4f30\u8ba1\u4e2d\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u7528\u6a21\u578b\u4f30\u8ba1\u533a\u8fd1\u4f3c$f$\uff0c\u6216\u8005\u4f30\u8ba1$\\hat{f}$\u3002\u51fd\u6570\u4f30\u8ba1\u548c\u53c2\u6570\u4f30\u8ba1$\\boldsymbol{\\theta}$\u662f\u4e00\u6837\u7684\uff0c \u51fd\u6570\u4f30\u8ba1 $\\hat{f}$ \u662f\u51fd\u6570\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\u4f30\u8ba1 \u3002 5.4.2 \u504f\u5dee \u4f30\u8ba1\u7684 \u504f\u5dee \u88ab\u5b9a\u4e49\u4e3a\uff1a bias(\\boldsymbol{\\hat{\\theta}}_m)=\\Bbb{E}(\\boldsymbol{\\hat{\\theta}}_m)-\\boldsymbol{\\theta} \u5176\u4e2d\u671f\u671b\u4f5c\u7528\u5728\u6240\u6709\u6570\u636e(\u770b\u4f5c\u662f\u4ece\u968f\u673a\u53d8\u91cf\u91c7\u6837\u5f97\u5230\u7684)\u4e0a\uff0c$\\theta$\u662f\u7528\u4e8e\u5b9a\u4e49\u6570\u636e\u751f\u6210\u5206\u5e03\u7684$\\theta$\u7684\u771f\u5b9e\u503c\u3002\u5982\u679c$bias(\\boldsymbol{\\hat{\\theta}}_m)=0$\uff0c\u5219\u4f30\u8ba1\u91cf$(\\boldsymbol{\\hat{\\theta}}_m)$\u88ab\u79f0\u4e3a\u662f \u65e0\u504f (unbiased)\u3002\u5982\u679c$\\lim_{m\\to\\infty}bias(\\boldsymbol{\\hat{\\theta}}_m)=0$\uff0c\u90a3\u4e48\u4f30\u8ba1\u91cf$(\\boldsymbol{\\hat{\\theta}}_m)$\u88ab\u79f0\u4e3a\u662f \u6e10\u8fdb\u65e0\u504f (asymptotically unbiased)\u3002 \u793a\u4f8b\uff1a\u4f2f\u52aa\u5229\u5206\u5e03 \u8003\u8651\u4e00\u7ec4\u670d\u4ece\u5747\u503c\u4e3a$\\theta$\u7684\u4f2f\u52aa\u5229\u5206\u5e03\u7684\u72ec\u7acb\u540c\u5206\u5e03\u7684\u6837\u672c$\\{\\boldsymbol{x}^{(1)},...,\\boldsymbol{x}^{(m)}\\}$\uff1a P(x^{(i)});\\theta=\\theta^{x^{(i)}}(1-\\theta)^{1-x^{(i)}} \u8fd9\u4e2a\u5206\u5e03\u4e2d\u53c2\u6570$\\theta$\u7684\u5e38\u7528\u4f30\u8ba1\u91cf\u662f\u8bad\u7ec3\u6837\u672c\u7684\u5747\u503c\uff1a \\hat{\\theta}_{m}=\\frac{1}{m}\\sum_{i=1}^{m}x^{(i)}","title":"Section 1"},{"location":"DeepLearning/section_1/#_1","text":"\u6ca1\u5565\u8981\u5199\u7684\u3002","title":"\u7b2c\u4e8c\u7ae0 \u7ebf\u6027\u4ee3\u6570"},{"location":"DeepLearning/section_1/#_2","text":"3.3 \u6982\u7387\u5206\u5e03 \u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u7528 \u6982\u7387\u8d28\u91cf\u51fd\u6570 (probability mass function, PMF)\u6765\u8868\u8ff0\u3002\u7528P\u8868\u793a\u6982\u7387\u8d28\u91cf\u51fd\u6570\u3002 \u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\u7528 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 (probability density function, PDF)\u6765\u63cf\u8ff0\u3002\u7528p\u8868\u793a\u3002","title":"\u7b2c\u4e09\u7ae0 \u6982\u7387\u4e0e\u4fe1\u606f\u8bba"},{"location":"DeepLearning/section_1/#_3","text":"4.1 \u4e0a\u6ea2\u548c\u4e0b\u6ea2 \u5fc5\u987b\u5bf9\u4e0a\u6ea2\u548c\u4e0b\u6ea2\u8fdb\u884c\u6570\u503c\u7a33\u5b9a\u7684\u4f8b\u5b50\u662fsoftmax\u51fd\u6570\u3002 softmax\u51fd\u6570 \u7ecf\u5e38\u7528\u8bed\u9884\u6d4b\u4e0eMultinoulli\u5206\u5e03\u76f8\u5173\u8054\u7684\u6982\u7387\u3002 softmax({\\boldsymbol x})_i=\\frac{exp(x_i)}{\\sum_{j=1}^{n}exp(x_j)} \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u7b97\u6cd5\u662f\u81ea\u52a8\u4fdd\u6301\u6570\u503c\u7684\u7a33\u5b9a\u3002\u6bd4\u5982Theano\u8f6f\u4ef6\u5305\uff0c\u80fd\u81ea\u52a8\u68c0\u6d4b\u75c5\u7a33\u5b9a\u6df1\u5ea6\u5b66\u4e60\u4e2d\u8bb8\u591a\u5e38\u89c1\u7684\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u8868\u8fbe\u5f0f\u3002 4.2 \u75c5\u6001\u6761\u4ef6 \u8f93\u5165\u88ab\u8f7b\u5fae\u6270\u52a8\u800c\u8fc5\u901f\u6539\u53d8\u7684\u51fd\u6570\u5bf9\u79d1\u5b66\u8ba1\u7b97\u6765\u8bf4\u53ef\u80fd\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u8f93\u5165\u4e2d\u7684\u6444\u5165\u8bef\u5dee\u53ef\u80fd\u5bfc\u81f4\u8f93\u51fa\u7684\u5de8\u5927\u53d8\u5316\u3002 \u6bd4\u5982\u51fd\u6570$f({\\boldsymbol x})={\\boldsymbol A}^{-1}{\\boldsymbol x}$\u5982\u679c\u77e9\u9635${\\boldsymbol A}$\u7684 \u6700\u5927\u7279\u5f81\u503c\u548c\u6700\u5c0f\u7279\u5f81\u503c\u7684\u6a21\u4e4b\u6bd4(\u7edd\u5bf9\u503c) \u5f88\u5927\u65f6\uff0c\u77e9\u9635\u6c42\u9006\u5bf9\u8f93\u5165\u7684\u8bef\u5dee\u7279\u522b\u654f\u611f\u3002 4.3 \u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\u3002 \u68af\u5ea6(gradient)\u662f\u76f8\u5bf9\u4e00\u4e2a\u5411\u91cf\u6c42\u5bfc\u7684\u5bfc\u6570\uff0cf\u7684\u5bfc\u6570\u662f\u5305\u542b\u6240\u6709\u504f\u5bfc\u6570\u7684\u5411\u91cf\uff0c\u8bb0\u4e3a$\\nabla_xf({\\boldsymbol x})$\u3002\u5728\u591a\u7ef4\u7684\u60c5\u51b5\u4e0b\uff0c\u4e34\u754c\u70b9\u662f\u68af\u5ea6\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u4e3a0\u7684\u70b9\u3002 \u5728\u8d1f\u68af\u5ea6\u7684\u65b9\u5411\u4e0a\u79fb\u52a8\u53ef\u4ee5\u51cf\u5c0ff\u3002\u8fd9\u662f\u6700\u901f\u4e0b\u964d\u6cd5(method of steepest descent)\u6216 \u68af\u5ea6\u4e0b\u964d (gradient descent)\u3002$\\epsilon$\u4e3a\u5b66\u4e60\u7387\uff0c \u666e\u904d\u7684\u65b9\u5f0f\u662f\u9009\u62e9\u4e00\u4e2a\u5c0f\u5e38\u6570 \u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u5206\u5c40\u51e0\u4e2a$\\epsilon$\u8ba1\u7b97$f({\\boldsymbol x}-\\epsilon\\nabla_xf({\\boldsymbol x}))$\uff0c\u5e76\u9009\u62e9\u5176\u4e2d\u80fd\u4ea7\u751f\u6700\u5c0f\u76ee\u6807\u51fd\u6570\u503c\u7684$\\epsilon$\u3002\u8fd9\u79cd\u7b56\u7565\u4e3a \u7ebf\u641c\u7d22 \u3002 {\\boldsymbol x}'={\\boldsymbol x}-\\epsilon\\nabla_xf({\\boldsymbol x}) \u867d\u7136\u68af\u5ea6\u4e0b\u964d\u88ab\u9650\u5236\u5728\u8fde\u7eed\u7a7a\u95f4\u4e2d\u7684\u4f18\u5316\u95ee\u9898\uff0c\u4f46\u53ef\u4ee5\u63a8\u5e7f\u5230 \u79bb\u6563\u7a7a\u95f4 \u3002\u9012\u589e\u5e26\u6709\u79bb\u6563\u53c2\u6570\u7684\u76ee\u6807\u51fd\u6570\u79f0\u4e3a \u722c\u5c71 (hill climbing)\u7b97\u6cd5\u3002 4.3.1 \u68af\u5ea6\u4e4b\u4e0a\uff1aJacobian\u548cHessian\u77e9\u9635 \u6709\u65f6\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f\u5411\u91cf\u7684\u51fd\u6570\u7684\u6240\u6709\u504f\u5bfc\u6570\u3002\u5305\u542b\u6240\u6709\u8fd9\u6837\u7684\u504f\u5bfc\u6570\u7684\u77e9\u9635\u88ab\u79f0\u4e3a\u96c5\u53ef\u6bd4(Jacobian)\u77e9\u9635. \u6709\u65f6\u6211\u4eec\u5bf9\u4e8c\u9636\u5bfc\u6570(\u66f2\u7387)\u611f\u5174\u8da3\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u5bfc\u6570\u5408\u5e76\u4e3a\u4e00\u4e2a\u77e9\u9635\uff0c\u79f0\u4e3a\u9ed1\u8d5b(Hessian)\u77e9\u9635\u3002Hessain\u77e9\u9635\u7b49\u4ef7\u4e8e\u68af\u5ea6\u7684Jacobian\u77e9\u9635\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u80cc\u666f\u4e0b\uff0c\u9047\u5230\u7684\u5927\u591a\u6570\u51fd\u6570\u7684Hessian\u77e9\u9635\u51e0\u4e4e\u5904\u5904\u90fd\u662f\u5bf9\u79f0\u7684\u3002 \u56e0\u4e3aHessain\u77e9\u9635\u662f\u5b9e\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5206\u89e3\u4e3a\u4e00\u7ec4\u5b9e\u7279\u5f81\u503c\u548c\u4e00\u7ec4\u7279\u5f81\u5411\u91cf\u7684\u6b63\u4ea4\u57fa\u3002\u5728\u7279\u5b9a\u65b9\u5411${\\boldsymbol d}$\u4e0a\u7684\u4e8c\u9636\u5bfc\u6570\u53ef\u4ee5\u5199\u6210${\\boldsymbol d}^T\\boldsymbol{Hd}$\uff08${\\boldsymbol d}$\u662f\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u7684\u4e58\u79ef\u662f\u4e00\u4e2a\u6570\uff0c\u662f\u4e0e\u7279\u5f81\u5411\u91cf${\\boldsymbol d}$\u5bf9\u5e94\u7684\u7279\u5f81\u503c\uff09\u3002\u5f53${\\boldsymbol d}$\u662f${\\boldsymbol H}$\u7684\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\u65f6\uff0c \u8fd9\u4e2a\u65b9\u5411\u7684\u4e8c\u9636\u5bfc\u6570\u5c31\u662f\u5bf9\u5e94\u7684\u7279\u5f81\u503c \u3002\u5bf9\u4e8e\u5176\u4ed6\u65b9\u5411\u7684${\\boldsymbol d}$\uff0c\u4e0d\u662f\u7279\u5f81\u5411\u91cf\uff0c\u8be5\u65b9\u5411\u7684\u4e8c\u9636\u5bfc\u6570\u662f\u6240\u6709\u7279\u5f81\u503c\u7684 \u52a0\u6743\u5e73\u5747 \uff0c\u4e0e\u7279\u5f81\u5411\u91cf${\\boldsymbol d}$\u7684\u5939\u89d2\u8d8a\u5c0f\u7684\u6743\u91cd\u8d8a\u5927\u3002\u6700\u5927\u7279\u5f81\u503c\u786e\u5b9a\u6700\u5927\u4e8c\u9636\u5bfc\u6570\uff0c\u6700\u5c0f\u7279\u5f81\u503c\u786e\u5b9a\u6700\u5c0f\u4e8c\u9636\u5bfc\u6570\u3002 \u5728\u591a\u7ef4\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u68c0\u6d4b\u51fd\u6570\u7684\u6240\u6709\u4e8c\u9636\u5bfc\u6570\uff0c\u53ef\u4ee5\u7528\u8fc7\u68c0\u6d4bHessian\u7684\u7279\u5f81\u503c\u6765\u5224\u65ad\u4e34\u754c\u70b9\u662f\u5c40\u90e8\u6781\u5927\u70b9\u3001\u5c40\u90e8\u6781\u5c0f\u70b9\u8fd8\u662f\u978d\u70b9\u3002\u5f53Hessian\u77e9\u9635 \u6b63\u5b9a \u65f6\uff0c\u4e34\u754c\u70b9\u65f6\u5c40\u90e8\u6781\u5c0f\u70b9\uff1b \u8d1f\u5b9a \u65f6\uff0c\u662f\u5c40\u90e8\u6781\u5927\u70b9\u3002\u8ddf\u9ad8\u4e2d\u7684\u5bfc\u6570\u548c\u4e8c\u9636\u5bfc\u6570\u662f\u4e00\u6837\u7684\u3002 \u7528Hessian\u77e9\u9635\u7684\u4fe1\u606f\u6765\u6307\u5bfc\u641c\u7d22\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u725b\u987f\u6cd5(Newton's method)\u3002\u725b\u987f\u6cd5\u57fa\u4e8e\u4e00\u4e2a\u4e8c\u9636\u6cf0\u52d2\u5c55\u5f00\u6765\u8fd1\u4f3c${\\boldsymbol x}^{(0)}$\u9644\u8fd1\u7684$f(\\boldsymbol x)$\u3002\u5f53$f$\u662f\u4e00\u4e2a\u6b63\u5b9a\u4e8c\u6b21\u51fd\u6570\u65f6\uff0c\u725b\u987f\u6cd5\u53ea\u8981\u7528\u4e00\u6b21${\\boldsymbol x}^*={\\boldsymbol{x}}^{(0)}-{\\boldsymbol{H}}(f)({\\boldsymbol{x}}^{(0)})^{-1}\\nabla_x f({\\boldsymbol{x}}^{(0)})$\u5c31\u80fd\u76f4\u63a5\u6761\u5230\u51fd\u6570\u7684\u6700\u5c0f\u70b9\u3002\u5982\u679c$f$\u4e0d\u662f\u4e00\u4e2a\u771f\u6b63\u4e8c\u6b21\u4f46\u662f\u80fd\u5728\u5c40\u90e8\u8fd1\u4f3c\u4e3a\u6b63\u5b9a\u4e8c\u6b21\uff0c\u725b\u987f\u6cd5\u5219\u9700\u8981\u8fed\u4ee3\u5e94\u7528\u8be5\u5f0f\u3002 \u8fed\u4ee3\u5730\u66f4\u65b0\u8fd1\u4f3c\u51fd\u6570\u548c\u8df3\u5230\u8fd1\u4f3c\u51fd\u6570\u7684\u6700\u5c0f\u70b9 \u53ef\u4ee5\u6bd4 \u68af\u5ea6\u4e0b\u964d \u66f4\u5feb\u5730\u5230\u8fbe\u4e34\u754c\u70b9\u3002\u8fd9\u5728\u63a5\u8fd1\u5c40\u90e8\u6781\u5c0f\u70b9\u65f6\u662f\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u6027\u8d28\uff0c\u4f46\u662f \u5728\u978d\u70b9\u9644\u8fd1\u662f\u6709\u5bb3\u7684 \u3002 \u4ec5\u4f7f\u7528\u68af\u5ea6\u4fe1\u606f\u7684\u4f18\u5316\u7b97\u6cd5\u88ab\u79f0\u4e3a \u4e00\u9636\u4f18\u5316\u7b97\u6cd5 (first-order optimization algorithms)\uff0c\u5982\u68af\u5ea6\u4e0b\u964d\u3002\u4f7f\u7528Hessian\u77e9\u9635\u7684\u4f18\u5316\u7b97\u6cd5\u88ab\u79f0\u4e3a \u4e8c\u9636\u6700\u4f18\u5316\u7b97\u6cd5 (second-order optimization algorithms)\uff0c\u5982\u725b\u987f\u6cd5\u3002 Lipschitz\u6761\u4ef6 \u5373\u5229\u666e\u5e0c\u8328\u8fde\u7eed\u6761\u4ef6\uff0c\u662f\u4e00\u4e2a\u6bd4\u901a\u5e38\u8fde\u7eed\u66f4\u5f3a\u7684 \u5149\u6ed1\u6027\u6761\u4ef6 \u3002\u76f4\u89c9\u4e0a\uff0cLipschitz\u8fde\u7eed\u51fd\u6570\u9650\u5236\u4e86\u51fd\u6570\u6539\u53d8\u7684\u901f\u5ea6\uff0c\u7b26\u5408Lipschitz\u6761\u4ef6\u7684\u51fd\u6570\u7684\u659c\u7387\uff0c\u5fc5\u5c0f\u4e8e\u4e00\u4e2a\u79f0\u4e3aLipschitz\u5e38\u6570\u7684\u5b9e\u6570\u3002 \u5728\u6df1\u5ea6\u5b66\u4e60\u7684\u80cc\u666f\u4e0b\uff0c\u9650\u5236\u51fd\u6570\u6ee1\u8db3Lipschitz\u8fde\u7eed\u6216\u5176\u5bfc\u6570Lipschitz\u8fde\u7eed\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u4fdd\u8bc1\u3002Lipschitz\u8fde\u7eed\u51fd\u6570\u7684\u53d8\u5316\u901f\u5ea6\u4ee5Lipschitz\u5e38\u6570$\\cal L$\u4e3a\u754c\u3002\u8fd9\u4e2a\u5c5e\u6027\u5141\u8bb8\u6211\u4eec\u91cf\u5316\u6211\u4eec\u7684\u5047\u8bbe\u2014\u2014\u68af\u5ea6\u4e0b\u964d\u7b49\u7b97\u6cd5\u5bfc\u81f4\u7684\u8f93\u5165\u7684\u5fae\u5c0f\u53d8\u5316\u5c06\u4f7f\u8f93\u51fa\u53ea\u4ea7\u751f\u5fae\u5c0f\u53d8\u5316\uff0c\u56e0\u6b64\u662f\u5f88\u6709\u7528\u7684\u3002\uff08\u53d8\u5316\u901f\u5ea6\u662f\u6709\u4e0a\u754c\u7684\uff09 \u6700\u6210\u529f\u7684\u7279\u5b9a\u4f18\u5316\u9886\u57df\u6216\u8bb8\u662f \u51f8\u4f18\u5316 (Convex optimization)\u3002\u51f8\u4f18\u5316\u901a\u8fc7 \u66f4\u5f3a\u7684\u9650\u5236 \u63d0\u4f9b\u66f4\u591a\u7684\u4fdd\u8bc1\u3002\u51f8\u4f18\u5316\u7b97\u6cd5\u53ea\u5bf9\u51f8\u51fd\u6570\u9002\u7528\uff0c\u5373Hessian\u5904\u5904\u534a\u6b63\u5b9a\u7684\u51fd\u6570\u3002\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u6ca1\u6709\u978d\u70b9\u800c\u4e14\u5176\u6240\u6709\u5c40\u90e8\u6781\u5c0f\u70b9\u5fc5\u7136\u662f\u5168\u5c40\u6700\u5c0f\u70b9\u3002\u7136\u800c\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5927\u591a\u6570\u95ee\u9898\u90fd\u96be\u4ee5\u8868\u793a\u6210\u51f8\u4f18\u5316\u7684\u5f62\u5f0f\u3002\u51f8\u4f18\u5316\u4ec5\u7528\u4f5c\u4e00\u4e9b\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u5b50\u7a0b\u5e8f\u3002\u51f8\u4f18\u5316\u4e2d\u7684\u5206\u6790\u601d\u8def\u5bf9\u8bc1\u660e\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u6536\u655b\u6027\u975e\u5e38\u6709\u7528\uff0c\u7136\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6df1\u5ea6\u5b66\u4e60\u80cc\u666f\u4e0b\u51f8\u4f18\u5316\u7684\u91cd\u8981\u6027\u5927\u5927\u51cf\u5c11\u3002 4.4 \u7ea6\u675f\u4f18\u5316 \u6709\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u5728$\\boldsymbol{x}$\u6240\u6709\u53ef\u80fd\u503c\u4e0b\u6700\u5c0f\u5316\u4e00\u4e2a\u51fd\u6570$f(x)$\uff1b\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728$\\boldsymbol{x}$\u7684\u67d0\u4e9b\u96c6\u5408$\\Bbb{S}$\u4e2d\u627e$f(x)$\u6700\u5c0f\u503c\u3002\u8fd9\u5c31\u662f \u7ea6\u675f\u4f18\u5316 (constrained optimization)\u3002\u5728\u7ea6\u675f\u4f18\u5316\u672f\u8bed\u4e2d\uff0c\u96c6\u5408$\\Bbb{S}$\u5185\u7684\u70b9$\\boldsymbol{x}$\u88ab\u79f0\u4e3a \u53ef\u884c\u70b9 (feasible)\u3002\u6211\u4eec\u5c1d\u5c1d\u5e0c\u671b\u627e\u5230\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\u5c0f\u7684\u89e3\uff0c\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u5e38\u89c1\u65b9\u6cd5\u662f\u5f3a\u52a0\u4e00\u4e2a \u8303\u6570\u7ea6\u675f \uff0c\u5982$\\parallel{\\boldsymbol{x}}\\parallel\\leq 1$\u3002 \u7ea6\u675f\u4f18\u5316\u7684\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\u662f\u5c06\u7ea6\u675f\u8003\u8651\u5728\u5185\u540e\u7b80\u5355\u5730\u5bf9\u68af\u5ea6\u4e0b\u964d\u8fdb\u884c\u4fee\u6539\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5c0f\u7684\u6052\u5b9a\u7684\u6b65\u957f$\\epsilon$\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u53d6\u68af\u5ea6\u4e0b\u964d\u7684\u5355\u6b65\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u6295\u5f71\u56de$\\Bbb{S}$\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u7ebf\u641c\u7d22\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u6b65\u957f\u4e3a$\\epsilon$\u7684\u8303\u56f4\u5185\u641c\u7d22\u53ef\u884c\u7684\u65b0$\\boldsymbol{x}$\u70b9\uff0c\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u5c06\u7ebf\u4e0a\u7684\u6bcf\u4e2a\u70b9\u6295\u5f71\u5230\u7ea6\u675f\u533a\u57df\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5728\u68af\u5ea6\u4e0b\u964d\u6216\u8005\u7ebf\u641c\u7d22\u524d\u5c06\u68af\u5ea6\u6295\u5f71\u5230\u53ef\u884c\u57df\u7684\u5207\u7a7a\u95f4\u4f1a\u66f4\u9ad8\u6548\u3002 \u7ea6\u675f\u4f18\u5316\u7684\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u65b9\u6cd5\u662f\u8bbe\u8ba1\u4e00\u4e2a\u4e0d\u540c\u7684\u3001\u65e0\u7ea6\u675f\u7684\u4f18\u5316\u95ee\u9898\uff0c\u5176\u89e3\u53ef\u4ee5\u8f6c\u5316\u6210\u539f\u59cb\u7ea6\u675f\u95ee\u9898\u7684\u89e3\u3002 Karush-Kuhn-Tucker(KKT) \u65b9\u6cd5\u662f\u9488\u5bf9\u7ea6\u675f\u4f18\u5316\u975e\u5e38\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u4ecb\u7ecdKKT\u65b9\u6cd5\uff0c\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u79f0\u4e3a\u5e7f\u4e49Lagrangian(generalized Lagrangian)\u6216 \u5e7f\u4e49Lagrange\u51fd\u6570 (generalized Lagrange function)\u7684\u65b0\u51fd\u6570\u3002\u4e3a\u4e86\u5b9a\u4e49Lagrangian\uff0c\u6211\u4eec\u5148\u8981\u901a\u8fc7\u7b49\u5f0f\u548c\u4e0d\u7b49\u5f0f\u7684\u5f62\u5f0f\u63cf\u8ff0$\\Bbb{S}$\u3002\u6211\u4eec\u5e0c\u671b\u901a\u8fc7m\u4e2a\u7b49\u5f0f\u7ea6\u675f$g^{(i)}$\u548cn\u4e2a\u4e0d\u7b49\u5f0f\u7ea6\u675f$h^{(j)}$\u63cf\u8ff0$\\Bbb{S}$\u3002\u6211\u4eec\u4e3a\u6bcf\u4e2a\u7ea6\u675f\u5f15\u5165\u65b0\u7684\u53d8\u91cf$\\lambda_i$\u548c$\\alpha_j$\uff0c\u8fd9\u4e9b\u65b0\u53d8\u91cf\u88ab\u79f0\u4e3aKKT\u4e58\u5b50\u3002\u5e7f\u4e49\u7684Lagrangian\u53ef\u4ee5\u5982\u4e0b\u5b9a\u4e49\uff1a L({\\boldsymbol{x},\\boldsymbol{\\lambda},\\boldsymbol{\\alpha}})=f({\\boldsymbol{x}})+\\sum_i\\lambda_i g^{(i)}({\\boldsymbol{x}})+\\sum_j\\alpha_j h^{(j)}({\\boldsymbol{x}}) \u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u4f18\u5316\u65e0\u7ea6\u675f\u7684\u5e7f\u4e49Lagrangian\u89e3\u51b3\u7ea6\u675f\u6700\u5c0f\u5316\u95ee\u9898\u3002\u53ea\u8981\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u53ef\u884c\u70b9\u4e14$f(\\boldsymbol{x})$\u4e0d\u5141\u8bb8\u53d6$\\infty$\uff0c\u90a3\u4e48 \\min_{\\boldsymbol{x}} \\max_{\\boldsymbol{\\lambda}} \\max_{\\boldsymbol{\\alpha},\\boldsymbol{\\alpha}\\geq0}L({\\boldsymbol{x},\\boldsymbol{\\lambda},\\boldsymbol{\\alpha}}) \u4e0e\u4e0b\u5217\u51fd\u6570\u6709\u76f8\u540c\u7684\u6700\u4f18\u76ee\u6807\u51fd\u6570\u503c\u548c\u6700\u4f18\u70b9\u96c6$\\boldsymbol{x}$\u3002 \\min_{\\boldsymbol{x}\\in\\Bbb{S}}f({\\boldsymbol{x}}) \u5982\u679c$h^{(i)}({\\boldsymbol{x}}^*=0)$\uff0c\u5219\u79f0\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u7ea6\u675f\u662f \u6d3b\u8dc3 \u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ec4\u7b80\u5355\u7684\u6027\u8d28\u6765\u63cf\u8ff0\u7ea6\u675f\u4f18\u5316\u95ee\u9898\u7684\u6700\u4f18\u70b9\u3002\u8fd9\u4e9b\u6027\u8d28\u79f0\u4e3aKarush-Kuhn-Tucker(KKT)\u6761\u4ef6\u3002\u8fd9\u4e9b\u662f\u786e\u5b9a\u4e00\u4e2a\u70b9\u662f\u6700\u4f18\u70b9\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u5145\u5206\u6761\u4ef6\u3002\u8fd9\u4e9b\u6761\u4ef6\u662f\uff1a (1)\u5e7f\u4e49Lagrangian\u7684\u68af\u5ea6\u4e3a0\u3002 (2)\u6240\u6709\u5173\u4e8e$\\boldsymbol{x}$\u548cKKT\u4e58\u5b50\u7684\u7ea6\u675f\u90fd\u6ee1\u8db3\u3002 (3)\u4e0d\u7b49\u5f0f\u7ea6\u675f\u663e\u793a\u7684\u201c\u4e92\u8865\u677e\u5f1b\u6027\u201d\uff1a$\\boldsymbol{\\alpha}\\odot h(\\boldsymbol{x})=0$\u3002","title":"\u7b2c\u56db\u7ae0 \u6570\u503c\u8ba1\u7b97"},{"location":"DeepLearning/section_1/#_4","text":"\u673a\u5668\u5b66\u4e60\u672c\u8d28\u4e0a\u5c5e\u4e8e\u5e94\u7528\u7edf\u8ba1\u5b66\uff0c\u66f4\u591a\u5730\u5173\u6ce8\u5982\u4f55\u7528\u8ba1\u7b97\u673a\u7edf\u8ba1\u5730\u4f30\u8ba1\u590d\u6742\u51fd\u6570\uff0c\u4e0d\u592a\u5173\u6ce8\u4e3a\u8fd9\u4e9b\u51fd\u6570\u63d0\u4f9b\u7f6e\u4fe1\u533a\u95f4\uff1b\u56e0\u6b64\u6211\u4eec\u56de\u63a2\u8ba8\u4e24\u79cd\u7edf\u8ba1\u5b66\u5730\u4e3b\u8981\u65b9\u6cd5\uff1a \u9891\u7387\u6d3e\u4f30\u8ba1 \u548c \u8d1d\u53f6\u65af\u63a8\u65ad \u3002 5.1 \u5b66\u4e60\u7b97\u6cd5 5.1.1 \u4efb\u52a1$T$ \u901a\u7545\u673a\u5668\u5b66\u4e60 \u4efb\u52a1 \u5b9a\u4e49\u4e3a\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u5e94\u8be5\u5982\u4f55\u5904\u7406\u6837\u672c\u3002 \u6837\u672c \u662f\u6307\u6211\u4eec\u4ece\u67d0\u4e9b\u5e0c\u671b\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u5904\u7406\u7684\u5bf9\u8c61\u6216\u4e8b\u4ef6\u4e2d\u6536\u96c6\u5230\u7684\u5df2\u7ecf\u91cf\u5316\u7684 \u7279\u5f81 \u7684\u96c6\u5408\u3002 \u673a\u5668\u5b66\u4e60\u53ef\u4ee5\u89e3\u51b3\u5f88\u591a\u7c7b\u578b\u7684\u4efb\u52a1\u3002\u4e00\u4e9b\u975e\u5e38\u5e38\u89c1\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u5217\u4e3e\u5982\u4e0b\uff1a (1)\u5206\u7c7b\uff1a\u6307\u5b9a\u67d0\u4e9b\u8f93\u5165\u5c5e\u4e8e$k$\u7c7b\u4e2d\u7684 \u54ea\u4e00\u7c7b \u3002\u8fd8\u6709\u8f93\u51fa\u4e0d\u540c\u7c7b\u522b\u7684 \u6982\u7387\u5206\u5e03 \u3002\u5206\u7c7b\u4efb\u52a1\u4e2d\u6709\u4e00\u4e2a\u4efb\u52a1\u662f \u5bf9\u8c61\u8bc6\u522b \uff0c\u8f93\u5165\u662f\u56fe\u7247\uff0c\u8f93\u51fa\u662f\u8868\u793a\u56fe\u7247\u7269\u4f53\u7684\u6570\u5b57\u7801\u3002 (2)\u8f93\u5165\u7f3a\u5931\u5206\u7c7b\uff1a\uff08\u5f53\u8f93\u5165\u5411\u91cf\u7684\u6bcf\u4e2a\u5ea6\u91cf\u4e0d\u88ab\u4fdd\u8bc1\u7684\u65f6\u5019\uff09\u5f53\u4e00\u4e9b\u8f93\u5165\u53ef\u80fd\u4e22\u5931\u65f6\uff0c\u5b66\u4e60\u7b97\u6cd5\u5fc5\u987b \u5b66\u4e60\u4e00\u7ec4\u51fd\u6570 \uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u5206\u7c7b\u51fd\u6570\u3002\u6bcf\u4e2a\u51fd\u6570\u5bf9\u5e94\u7740\u5206\u7c7b\u5177\u6709\u4e0d\u540c\u7f3a\u5931\u8f93\u5165\u5b50\u96c6\u7684$\\boldsymbol{x}$\u3002\uff08\u5728\u533b\u7597\u8bca\u65ad\u4e2d\u7ecf\u5e38\u51fa\u73b0\uff09\u6709\u6548\u5730\u5b9a\u4e49\u8fd9\u6837\u4e00\u4e2a\u5927\u96c6\u5408\u51fd\u6570\u7684\u65b9\u6cd5\u662f\u5b66\u4e60\u6240\u6709\u76f8\u5173\u53d8\u91cf\u7684\u6982\u7387\u5206\u5e03\uff0c\u7136\u540e\u901a\u8fc7\u8fb9\u7f18\u5316\u7f3a\u5931\u53d8\u91cf\u6765\u89e3\u51b3\u5206\u7c7b\u4efb\u52a1\u3002\u4f7f\u7528$n$\u4e2a\u8f93\u5165\u53d8\u91cf\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u83b7\u5f97\u6bcf\u4e2a\u53ef\u80fd\u7684\u7f3a\u5931\u8f93\u5165\u96c6\u5408\u6240\u9700\u7684\u6240\u6709$2^n$\u4e2a\u4e0d\u540c\u7684\u5206\u7c7b\u51fd\u6570\uff0c\u4f46\u662f\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4ec5\u9700\u8981\u5b66\u4e60\u4e00\u4e2a\u63cf\u8ff0\u8054\u5408\u6982\u7387\u5206\u5e03\u7684\u51fd\u6570\u3002 (3)\u56de\u5f52\uff1a\u5bf9\u7ed9\u5b9a\u8f93\u5165 \u9884\u6d4b \u6570\u503c\u3002$f:\\Bbb{R}^n\\to\\Bbb{R}$\u3002 (4)\u8f6c\u5f55\uff1a\u8fd9\u7c7b\u4efb\u52a1\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u89c2\u6d4b\u4e00\u4e9b\u76f8\u5bf9\u975e\u7ed3\u6784\u5316\u8868\u793a\u7684\u6570\u636e\uff0c\u5e76\u8f6c\u5f55\u4fe1\u606f\u4e3a\u79bb\u6563\u7684\u6587\u672c\u5f62\u5f0f\u3002\u5982 \u5149\u5b66\u5b57\u7b26\u8bc6\u522b(OCR) \u8981\u6c42\u6839\u636e\u6587\u672c\u56fe\u7247\u8fd4\u56de\u6587\u5b57\u5e8f\u5217(ASKII\u7801\u6216Unicode\u7801)\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f \u8bed\u97f3\u8bc6\u522b \uff0c\u8f93\u5165\u4e00\u6bb5\u97f3\u9891\u6ce2\u5f62\uff0c\u8f93\u51fa\u4ee5\u5e8f\u5217\u97f3\u9891\u7eaa\u5f55\u4e2d\u6240\u8bf4\u7684\u5b57\u7b26\u6216\u5355\u8bcdID\u7684\u7f16\u7801\u3002 (5)\u673a\u5668\u7ffb\u8bd1\uff1a\u8f93\u5165\u662f\u4e00\u79cd\u8bed\u8a00\u7684\u7b26\u53f7\u5e8f\u5217\uff0c\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5c06\u5176\u8f6c\u5316\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u7b26\u53f7\u5e8f\u5217\u3002\uff08\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff09 (6)\u7ed3\u6784\u5316\u8f93\u51fa\uff1a\u7ed3\u6784\u5316\u8f93\u51fa\u4efb\u52a1\u7684\u8f93\u51fa\u662f\u5411\u91cf\u6216\u8005\u5176\u4ed6\u5305\u542b\u591a\u4e2a\u503c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u6784\u6210\u8f93\u51fa\u7684\u8fd9\u4e9b\u4e0d\u540c\u5143\u7d20\u95f4\u5177\u6709\u91cd\u8981\u5173\u7cfb\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8303\u7574\uff0c\u5305\u62ec\u4e0a\u9762\u7684\u8f6c\u5f55\u4efb\u52a1\u548c\u7ffb\u8bd1\u4efb\u52a1\u5728\u5185\u7684\u5f88\u591a\u5176\u4ed6\u4efb\u52a1\u3002\u4f8b\u5982 \u8bed\u6cd5\u5206\u6790 \u2014\u2014\u6620\u5c04\u81ea\u7136\u8bed\u8a00\u53e5\u5b50\u5230\u8bed\u6cd5\u7ed3\u6784\u6811\uff0c\u5e76 \u6807\u8bb0 \u6811\u7684\u8282\u70b9\u4e3a\u52a8\u8bcd\u3001\u540d\u8bcd\u3001\u526f\u8bcd\u7b49\u7b49\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u56fe\u50cf\u7684 \u50cf\u7d20\u7ea7\u5206\u5272 \uff0c\u5c06\u6bcf\u4e00\u4e2a\u50cf\u7d20\u5206\u914d\u5230\u7279\u5b9a\u7c7b\u522b\u3002\u5728\u8fd9\u4e9b\u6807\u6ce8\u578b\u4efb\u52a1\u4e2d\uff0c\u8f93\u51fa\u7684\u7ed3\u6784\u5f62\u5f0f\u4e0d\u9700\u8981\u548c\u8f93\u5165\u5c3d\u53ef\u80fd\u76f8\u4f3c\u3002\u4f8b\u5982\u4e3a\u56fe\u7247\u6dfb\u52a0\u63cf\u8ff0\u7684\u4efb\u52a1\uff0c\u8f93\u5165\u56fe\u7247\uff0c\u8f93\u51fa\u81ea\u7136\u8bed\u8a00\u53e5\u5b50\u3002\u8fd9\u7c7b\u4efb\u52a1\u88ab\u79f0\u4e3a\u7ed3\u6784\u5316\u8f93\u51fa\u4efb\u52a1\u662f\u56e0\u4e3a\u8f93\u51fa\u503c\u4e4b\u95f4\u5185\u90e8\u7d27\u5bc6\u5173\u7cfb\uff0c\u4f8b\u5982\u6dfb\u52a0\u7684\u63cf\u8ff0\u7684\u5355\u8bcd\u5fc5\u987b\u7ec4\u5408\u6210\u4e00\u4e2a\u901a\u987a\u7684\u53e5\u5b50\u3002 (7)\u5f02\u5e38\u68c0\u6d4b\uff1a\u8fd9\u7c7b\u4efb\u52a1\uff0c\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5728\u4e00\u7ec4\u4e8b\u4ef6\u6216\u5bf9\u8c61\u4e2d\u7b5b\u9009\uff0c\u5e76\u6807\u8bb0\u4e0d\u6b63\u5e38\u6216\u975e\u5178\u578b\u7684\u4e2a\u4f53\u3002\u4f8b\u5982\u5f15\u7528\u5361\u6b3a\u8bc8\u68c0\u6d4b\uff0c\u5bf9\u4eba\u7684\u8d2d\u4e70\u4e60\u60ef\u7f04\u9ed8\uff0c\u53ef\u4ee5\u68c0\u6d4b\u5361\u662f\u5426\u88ab\u6ee5\u7528\u3002 (8)\u5408\u6210\u548c\u91c7\u6837\uff1a\u8fd9\u7c7b\u4efb\u52a1\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7a0b\u5e8f\u751f\u6210\u4e00\u4e9b\u548c\u8bad\u7ec3\u6570\u636e\u76f8\u4f3c\u7684\u65b0\u6837\u672c\u3002\u5408\u6210\u548c\u91c7\u6837\u5728\u5a92\u4f53\u5e94\u7528\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\u89c6\u9891\u6e38\u620f\u53ef\u4ee5 \u81ea\u52a8\u751f\u6210 \u5927\u578b\u7269\u4f53\u6216\u98ce\u666f\u7684\u7eb9\u7406\u3002\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u91c7\u6837\u6216\u5408\u6210\u8fc7\u7a0b\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u7684\u8f93\u5165\u751f\u6210\u4e00\u4e9b \u7279\u5b9a\u7c7b\u578b \u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u5728 \u8bed\u97f3\u5408\u6210 \u4e2d\uff0c\u6839\u636e\u4e66\u5199\u7684\u53e5\u5b50\u8f93\u51fa\u53e5\u5b50\u8bed\u97f3\u7684\u97f3\u9891\u6ce2\u5f62\u3002\u8fd9\u662f\u4e00\u7c7b\u7ed3\u6784\u5316\u8f93\u51fa\u4efb\u52a1\uff0c\u4f46\u662f\u591a\u4e86\u6bcf\u4e2a\u8f93\u5165\u5e76\u975e\u53ea\u6709\u4e00\u4e2a\u6b63\u786e\u8f93\u51fa\u7684\u6761\u4ef6\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u8f93\u51fa\u6709\u5f88\u591a\u53d8\u5316\u4f7f\u5f97\u7ed3\u679c\u770b\u4e0a\u53bb\u66f4\u52a0\u81ea\u7136\u548c\u771f\u5b9e\u3002 (9)\u7f3a\u5931\u503c\u586b\u8865\uff1a\u5728\u8fd9\u7c7b\u4efb\u52a1\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5bf9\u65b0\u6837\u672c$\\boldsymbol{x}\\in\\Bbb{R}^n$\u4e2d\u7f3a\u5931\u7684\u67d0\u4e9b\u5143\u7d20$x_i$\u8fdb\u884c\u586b\u8865\u3002 (10)\u53bb\u566a\uff1a\u8fd9\u7c7b\u4efb\u52a1\u91cd\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u8f93\u5165\u662f\uff0c\u5e72\u51c0\u6837\u672c$\\boldsymbol{x}\\in\\Bbb{R}^n$\u7ecf\u8fc7\u672a\u77e5\u635f\u574f\u8fc7\u7a0b\u540e\u5f97\u5230\u7684\u635f\u574f\u6837\u672c$\\tilde{\\boldsymbol{x}}\\in\\Bbb{R}^n$\u3002\u7b97\u6cd5\u6839\u636e\u635f\u574f\u540e\u7684\u6837\u672c$\\tilde{\\boldsymbol{x}}$\u9884\u6d4b\u5e72\u51c0\u7684\u6837\u672c$\\boldsymbol{x}$\uff0c\u6216\u8005\u66f4\u4e00\u822c\u5730\u9884\u6d4b\u6761\u4ef6\u6982\u7387\u5206\u5e03$p(\\boldsymbol{x}|\\tilde{\\boldsymbol{x}})$\u3002 (11)\u5bc6\u5ea6\u4f30\u8ba1\u6216\u6982\u7387\u8d28\u91cf\u51fd\u6570\u4f30\u8ba1\uff1a\u5728\u5bc6\u5ea6\u4f30\u8ba1\u95ee\u9898\u4e2d\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5b66\u4e60\u51fd\u6570$p_{model}:\\Bbb{R}^n\\to\\Bbb{R}$\uff0c\u5176\u4e2d$p_{model}(\\boldsymbol{x})$\u53ef\u4ee5\u89e3\u91ca\u4e3a\u6837\u672c\u91c7\u6837\u7a7a\u95f4\u5730\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff08x\u8fde\u7eed\uff09\u6216\u8005\u6982\u7387\u8d28\u91cf\u51fd\u6570\uff08x\u79bb\u6563\uff09\u3002\u7b97\u6cd5\u9700\u8981\u5b66\u4e60\u89c2\u6d4b\u5230\u7684\u6570\u636e\u7684\u7ed3\u6784\u3002\u7b97\u6cd5\u5fc5\u987b\u77e5\u9053\u4ec0\u4e48\u60c5\u51b5\u4e0b\u6837\u672c\u805a\u96c6\u51fa\u73b0\uff0c\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4e0d\u592a\u53ef\u80fd\u51fa\u73b0\u3002\u4ee5\u4e0a\u63cf\u8ff0\u7684\u5927\u591a\u6570\u4efb\u52a1\u90fd\u9700\u8981\u5b66\u4e60\u7b97\u6cd5\u81f3\u5c11\u80fd\u9690\u5f0f\u5730\u6355\u83b7\u6982\u7387\u5206\u5e03\u7684\u7ed3\u6784\u3002\u5bc6\u5ea6\u4f30\u8ba1\u53ef\u4ee5\u8ba9\u6211\u4eec \u663e\u5f0f\u5730\u6355\u83b7\u8be5\u5206\u5e03 \u3002\u539f\u5219\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8be5\u5206\u5e03\u4e0a\u8ba1\u7b97\u4ee5\u4fbf\u89e3\u51b3\u5176\u4ed6\u4efb\u52a1\u3002\u4f8b\u5982\u53ef\u4ee5\u7528\u8be5\u5206\u5e03\u89e3\u51b3\u7f3a\u5931\u503c\u586b\u8865\u4efb\u52a1\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\u6982\u7387\u5206\u5e03$p(\\boldsymbol{x})$\u662f\u96be\u4ee5\u8ba1\u7b97\u7684\u3002 5.1.2 \u6027\u80fd\u5ea6\u91cf$P$ \u8bc4\u4f30\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u80fd\u529b\u3002 \u5bf9\u4e8e\u5206\u7c7b\u3001\u7f3a\u5931\u8f93\u5165\u5206\u7c7b\u548c\u8f6c\u5f55\u4efb\u52a1\uff0c\u901a\u5e38\u7528\u51c6\u786e\u7387(accuracy)\u6216\u9519\u8bef\u7387(error rate)\u3002\u901a\u5e38\u628a\u9519\u8bef\u7387\u79f0\u4e3a 0-1\u635f\u5931\u7684\u671f\u671b \u3002 \u67d0\u4e9b\u60c5\u51b5\u4e0b\u5f88\u96be\u786e\u5b9a\u5e94\u8be5\u5ea6\u91cf\u4ec0\u4e48\uff0c\u6bd4\u5982\u8f6c\u5f55\u3002\u8fd8\u6709\u4e00\u4e9b\u60c5\u51b5\uff0c\u6211\u4eec\u77e5\u9053\u5e94\u8be5\u5ea6\u91cf\u54ea\u4e9b\u6570\u503c\uff0c\u4f46\u662f\u5ea6\u91cf\u5b83\u4eec\u4e0d\u592a\u73b0\u5b9e\uff0c\u6bd4\u5982\u5bc6\u5ea6\u4f30\u8ba1\u3002 5.1.3 \u7ecf\u9a8c$E$ \u5747\u65b9\u8bef\u5dee(mean squared error)\uff1a MSE_{test}=\\frac{1}{m}\\sum_i({\\hat{\\boldsymbol{y}}}^{(test)}-\\boldsymbol{y}^{(test)}) 5.2 \u5bb9\u91cf\u3001\u8fc7\u62df\u5408\u548c\u6b20\u62df\u5408 \u8bad\u7ec3\u96c6\u4e0a\u7684\u5ea6\u91cf\u8bef\u5dee\u79f0\u4e3a\u8bad\u7ec3\u8bef\u5dee(training error)\u3002\u6d4b\u8bd5\u96c6\u4e0a\u7684\u8bef\u5dee\u53eb\u505a\u6d4b\u8bd5\u8bef\u5dee(test error)\uff0c\u4e5f\u53eb\u6cdb\u5316\u8bef\u5dee(generalization error)\u3002\u6cdb\u5316\u8bef\u5dee\u88ab\u5b9a\u4e49\u4e3a\u65b0\u8f93\u5165\u7684 \u8bef\u5dee\u671f\u671b \u3002 \u8bad\u7ec3\u65f6\uff0c\u6211\u4eec\u804c\u80fd\u89c2\u6d4b\u5230\u8bad\u7ec3\u96c6\uff0c\u4f46\u662f\u6211\u4eec\u8981\u7684\u662f\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u6027\u80fd\u3002\u5982\u679c\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u662f\u4efb\u610f\u6536\u96c6\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u505a\u7684\u5f88\u6709\u9650\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u7684 \u6536\u96c6\u65b9\u5f0f \u6709\u4e9b\u5047\u8bbe\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u591f\u5bf9\u7b97\u6cd5\u505a\u4e9b\u6539\u8fdb\u3002 \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u901a\u8fc7\u6570\u636e\u96c6\u4e0a\u88ab\u79f0\u4e3a\u6570\u636e\u751f\u6210\u8fc7\u7a0b(data generating process)\u7684\u6982\u7387\u5206\u5e03\u751f\u6210\u3002\u901a\u5e38\u6211\u4eec\u4f1a\u505a\u4e00\u7cfb\u5217\u88ab\u7edf\u79f0\u4e3a \u72ec\u7acb\u540c\u5206\u5e03\u5047\u8bbe \u7684\u5047\u8bbe\u3002\u8fd9\u4e2a\u5047\u8bbe\u65f6\u8bf4\u6bcf\u4e2a\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u90fd\u662f\u5f7c\u6b64\u76f8\u4e92\u72ec\u7acb(independent)\u7684\uff0c\u5e76\u4e14\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u662f\u540c\u5206\u5e03\u7684(identically distributed)\uff0c\u91c7\u6837\u81ea\u76f8\u540c\u7684\u5206\u5e03\u3002\u8fd9\u4e2a\u5047\u8bbe\u6211\u4eec\u80fd\u591f\u5728\u5355\u4e2a\u6837\u672c\u7684\u6982\u7387\u5206\u5e03\u63cf\u8ff0\u6570\u636e\u751f\u6210\u8fc7\u7a0b\u3002\u7136\u540e\u76f8\u540c\u7684\u5206\u5e03\u53ef\u4ee5\u7528\u6765\u751f\u6210\u6bcf\u4e00\u4e2a\u6837\u672c\u548c\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u6837\u672c\u3002\u6211\u4eec\u5c06\u8fd9\u4e2a\u5171\u4eab\u7684\u6f5c\u5728\u5206\u5e03\u79f0\u4e3a\u6570\u636e\u751f\u6210\u5206\u5e03(data generating distribution)\uff0c\u8bb0\u4f5c$p_{data}$\u3002\u8fd9\u4e2a\u6982\u7387\u6846\u67b6\u548c\u72ec\u7acb\u540c\u5206\u5e03\u5047\u8bbe\u5141\u8bb8\u6211\u4eec\u4ece\u6570\u5b66\u4e0a\u7814\u7a76\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u51b3\u5b9a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6548\u679c\u662f\u5426\u597d\u7684\u56e0\u7d20\uff1a (1)\u964d\u4f4e\u8bad\u7ec3\u8bef\u5dee (2)\u7f29\u5c0f\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u7684\u5dee\u8ddd\u3002 \u4e0a\u9762\u8fd9\u4e24\u4e2a\u56e0\u7d20\u5bf9\u5e94\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u4e24\u4e2a\u4e3b\u8981\u6311\u6218\uff1a \u6b20\u62df\u5408 (underfitting)\u548c \u8fc7\u62df\u5408 (overfitting)\u3002\u6b20\u62df\u5408\u662f\u6307\u6a21\u578b\u4e0d\u80fd\u5728\u8bad\u7ec3\u96c6\u4e0a\u83b7\u5f97\u8db3\u591f\u4f4e\u7684\u8bef\u5dee\u3002\u800c\u8fc7\u62df\u5408\u662f\u6307\u8bad\u7ec3\u8bef\u5dee\u548c\u6d4b\u8bd5\u8bef\u5dee\u4e4b\u95f4\u7684\u5dee\u8ddd\u592a\u5927\u3002 \u901a\u8fc7\u8c03\u6574\u6a21\u578b\u7684 \u5bb9\u91cf (capacity)\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u6a21\u578b\u662f\u5426\u504f\u5411\u4e8e\u8fc7\u62df\u5408\u6216\u8005\u6b20\u62df\u5408\u3002\u901a\u4fd7\u5730\u8bf4\uff0c\u6a21\u578b\u5730\u5bb9\u91cf\u662f\u6307 \u5176\u62df\u5408\u5404\u79cd\u51fd\u6570\u7684\u80fd\u529b \u3002\u5bb9\u91cf\u4f4e\u7684\u6a21\u578b\u53ef\u80fd\u5f88\u96be\u62df\u5408\u8bad\u7ec3\u96c6\u3002\u5bb9\u91cf\u9ad8\u7684\u6a21\u578b\u53ef\u80fd\u4f1a\u8fc7\u62df\u5408\uff0c\u56e0\u4e3a\u8bb0\u4f4f\u4e86\u4e0d\u9002\u7528\u4e8e\u6d4b\u8bd5\u96c6\u5730\u8bad\u7ec3\u96c6\u6027\u8d28\u3002 \u7528\u4e8e\u63a7\u5236\u8bad\u7ec3\u7b97\u6cd5\u5bb9\u91cf\u7684\u65b9\u6cd5\u662f\u9009\u62e9 \u5047\u8bbe\u7a7a\u95f4 (hypothesis space)\uff0c\u5373\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u9009\u62e9\u4e3a\u89e3\u51b3\u65b9\u6848\u7684\u6570\u636e\u96c6\u3002\u4f8b\u5982\u7ebf\u6027\u56de\u5f52\u51fd\u6570\u5c06\u5173\u4e8e\u5176\u8f93\u5165\u7684\u6240\u6709\u7ebf\u6027\u51fd\u6570\u4f5c\u4e3a\u5047\u8bbe\u7a7a\u95f4\u3002\u5e7f\u4e49\u7ebf\u6027\u56de\u5f52\u7684\u5047\u8bbe\u7a7a\u95f4\u5305\u542b\u591a\u9879\u5f0f\u51fd\u6570\uff0c\u800c\u975e\u4ec5\u6709\u7ebf\u6027\u51fd\u6570\u3002\u8fd9\u6837\u505a\u5c31\u589e\u52a0\u4e86\u6a21\u578b\u7684\u5bb9\u91cf\u3002 \u7b97\u6cd5\u7684\u5bb9\u91cf\u9002\u5408\u4e0e\u4efb\u52a1\u7684\u590d\u6742\u5ea6\u548c\u6240\u63d0\u4f9b\u8bad\u7ec3\u6570\u636e\u7684\u6570\u91cf\u65f6\uff0c\u7b97\u6cd5\u6548\u679c\u901a\u7545\u4f1a\u6700\u4f73\uff0c\u5bb9\u91cf\u4e0d\u8db3\u4e0d\u80fd\u89e3\u51b3\u590d\u6742\u4efb\u52a1\uff0c\u5bb9\u91cf\u9ad8\u53ef\u80fd\u4f1a\u8fc7\u62df\u5408\u3002 \u8fd8\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u6539\u53d8\u6a21\u578b\u7684\u5bb9\u91cf\u3002\u5bb9\u91cf\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u6a21\u578b\u7684\u9009\u62e9\u3002\u6a21\u578b\u89c4\u5b9a\u4e86\u8c03\u6574\u53c2\u6570\u964d\u4f4e\u8bad\u7ec3\u76ee\u6807\u65f6\uff0c\u5b66\u4e60\u7b97\u6cd5\u53ef\u4ee5\u4ece\u54ea\u4e9b\u51fd\u6570\u65cf\u4e2d\u9009\u62e9\u51fd\u6570\u3002\u8fd9\u662f\u6a21\u578b\u7684 \u8868\u793a\u5bb9\u91cf (representational capacity)\u3002\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4ece\u8fd9\u4e9b\u51fd\u6570\u4e2d\u6311\u9009\u51fa\u6700\u4f18\u51fd\u6570\u662f\u975e\u5e38\u56f0\u96be\u7684\u4f18\u5316\u95ee\u9898\u3002\u5b9e\u9645\u4e2d\u4e0d\u4f1a\u771f\u7684\u627e\u5230\u6700\u4f18\u51fd\u6570\uff0c\u800c\u4ec5\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u5927\u5927\u964d\u4f4e\u8bad\u7ec3\u8bef\u5dee\u7684\u51fd\u6570\u3002\u6709\u4e00\u4e9b \u989d\u5916\u7684\u9650\u5236\u56e0\u7d20 \uff0c\u6bd4\u5982\u4f18\u5316\u7b97\u6cd5\u7684\u4e0d\u5b8c\u7f8e\uff0c\u610f\u5473\u7740\u5b66\u4e60\u7b97\u6cd5\u7684 \u6709\u6548\u5bb9\u91cf (effective capacity)\u53ef\u80fd\u5c0f\u4e8e\u6a21\u578b\u65cf\u7684\u8868\u793a\u5bb9\u91cf\u3002 \u63d0\u9ad8\u6a21\u578b\u6cdb\u5316\u80fd\u529b\u7684\u4e00\u4e2a\u7b80\u7ea6\u539f\u5219\uff0c\u662f \u5965\u5361\u59c6\u5243\u5200 (Occam's razor)\uff0c\u8be5\u539f\u5219\u662f\uff0c\u5728\u540c\u6837\u80fd\u591f\u89e3\u91ca\u5df2\u77e5\u89c2\u6d4b\u73b0\u8c61\u7684\u5047\u8bbe\u4e2d\uff0c\u5e94\u8be5\u6311\u9009\"\u6700\u7b80\u5355\"\u7684\u90a3\u4e00\u4e2a\u3002 \u7edf\u8ba1\u5b66\u4e60\u7406\u8bba\u63d0\u4f9b\u4e86\u91cf\u5316\u6a21\u578b\u5bb9\u91cf\u7684\u4e0d\u540c\u65b9\u6cd5\u3002\u6700\u6709\u540d\u7684\u662fVapnik-Chervonenkis\u7ef4\u5ea6(Vapnik-Chervonenkis dimension, VC)\u3002 VC\u7ef4 \u5ea6\u91cf\u4e8c\u5143\u5206\u7c7b\u5668\u7684\u5bb9\u91cf\u3002VC\u7ef4\u5b9a\u4e49\u4e3a\u8be5\u5206\u7c7b\u5668\u80fd\u591f\u5206\u7c7b\u7684\u8bad\u7ec3\u6837\u672c\u7684\u6700\u5927\u6570\u76ee\u3002\u5047\u8bbe\u5b58\u5728$m$\u4e2a\u4e0d\u540c$\\boldsymbol{x}$\u70b9\u7684\u8bad\u7ec3\u96c6\u3002\u5206\u7c7b\u5668\u53ef\u4ee5\u4efb\u610f\u5730\u6807\u8bb0\u8be5$m$\u4e2a\u4e0d\u540c\u7684$\\boldsymbol{x}$\uff0cVC\u7ef4\u88ab\u5b9a\u4e49\u4e3a$m$\u7684\u6700\u5927\u53ef\u80fd\u503c\u3002 \u7edf\u8ba1\u5b66\u7406\u8bba\u4e2d\u6700\u91cd\u8981\u7684\u7ed3\u8bba\u9610\u8ff0\u4e86\u8bad\u7ec3\u8bef\u5dee\u548c\u6cdb\u5316\u8bef\u5dee\u4e4b\u95f4\u7684\u5dee\u5f02\u7684\u4e0a\u754c\u968f\u7740\u6a21\u578b\u5bb9\u91cf\u7684\u589e\u957f\u800c\u589e\u957f\uff0c\u968f\u7740\u8bad\u7ec3\u6837\u672c\u589e\u591a\u800c\u4e0b\u964d\u3002\u8fd9\u4e9b\u8fb9\u754c\u5f88\u5c11\u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u4e00\u90e8\u5206\u539f\u56e0\u662f\u8fb9\u754c\u592a\u677e\uff0c\u53e6\u4e00\u90e8\u5206\u539f\u56e0\u662f \u5f88\u96be\u786e\u5b9a\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u7684\u5bb9\u91cf \u3002\u6709\u6548\u5bb9\u91cf\u53d7\u9650\u4e8e\u4f18\u5316\u7b97\u6cd5\u7684\u80fd\u529b\uff0c\u786e\u5b9a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u5bb9\u91cf\u7279\u522b\u56f0\u96be\u3002\u800c\u4e14\u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u4e00\u822c\u975e\u51f8\u4f18\u5316\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u6709\u5f88\u5c11\u7684\u7406\u8bba\u5206\u6790\u3002 \u7ebf\u6027\u56de\u5f52\u662f\u53c2\u6570\u6a21\u578b\uff0c\u5b66\u4e60\u5230\u7684\u51fd\u6570\u5728\u89c2\u6d4b\u65b0\u6570\u636e\u6b20\uff0c\u53c2\u6570\u662f\u6709\u9650\u4e14\u56fa\u5b9a\u7684\u5411\u91cf\u3002 \u975e\u53c2\u6570\u6a21\u578b (non-parametric)\u6ca1\u6709\u8fd9\u6837\u7684\u9650\u5236\u3002\u6709\u65f6\u975e\u53c2\u6570\u6a21\u578b\u4ec5\u662f\u4e00\u4e9b\u4e0d\u80fd\u5b9e\u9645\u5b9e\u73b0\u7684\u7406\u8bba\u62bd\u8c61(\u6bd4\u5982\u641c\u7d22\u6240\u6709\u53ef\u80fd\u6982\u7387\u5206\u5e03\u7684\u7b97\u6cd5)\uff0c\u7136\u800c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e9b\u4f7f\u7528\u7684\u975e\u53c2\u6570\u6a21\u578b\uff0c\u4f7f\u4ed6\u4eec\u7684\u590d\u6742\u5ea6\u548c\u8bad\u7ec3\u96c6\u5927\u5c0f\u6709\u5173\u3002\u4e00\u4e2a\u793a\u4f8b\u662f\u6700\u8fd1\u90bb\u56de\u5f52(nearest neighbor regression)\u3002 \u7406\u60f3\u6a21\u578b\u5047\u8bbe\u6211\u4eec\u80fd\u591f\u9884\u5148\u77e5\u9053\u751f\u6210\u6570\u636e\u7684\u771f\u5b9e\u6982\u7387\u5206\u5e03\u3002\u7136\u800c\u8fd9\u6837\u7684\u6a21\u578b\u4ecd\u7136\u5728\u5f88\u591a\u95ee\u9898\u4e0a\u53d1\u751f\u9519\u8bef\uff0c\u56e0\u4e3a\u5206\u5e03\u4e2d\u4ecd\u7136\u4f1a\u6709\u4e00\u4e9b\u566a\u58f0\u3002\u4ece\u9884\u5148\u77e5\u9053\u7684\u771f\u5b9e\u5206\u5e03$p(\\boldsymbol{x},y)$\u9884\u6d4b\u800c\u51fa\u73b0\u7684\u8bef\u5dee\u88ab\u79f0\u4e3a \u8d1d\u53f6\u65af\u8bef\u5dee (Bayes error)\u3002 5.2.1 \u6ca1\u6709\u514d\u8d39\u7684\u5348\u9910\u5b9a\u7406 \u5f52\u7eb3\u63a8\u7406\uff0c\u6216\u662f\u4ece\u4e00\u7ec4\u6709\u9650\u7684\u6837\u672c\u4e2d\u63a8\u65ad\u4e00\u822c\u7684\u89c4\u5219\uff0c\u5728\u903b\u8f91\u4e0a\u4e0d\u662f\u5f88\u6709\u6548\u3002\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\uff0c\u673a\u5668\u5b66\u4e60\u4ec5\u901a\u8fc7 \u6982\u7387\u6cd5\u5219 \u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u65e0\u9700\u4f7f\u7528\u7eaf\u903b\u8f91\u63a8\u7406\u6574\u4e2a\u786e\u5b9a\u6027\u6cd5\u5219\u3002\u673a\u5668\u5b66\u4e60\u4fdd\u8bc1\u627e\u5230\u4e00\u4e2a\u5728\u6240\u5173\u6ce8\u7684 \u5927\u591a\u6570 \u6837\u672c\u4e0a \u53ef\u80fd \u6b63\u786e\u7684\u89c4\u5219\u3002\u53ef\u60dc\uff0c \u6ca1\u6709\u514d\u8d39\u5348\u9910\u5b9a\u7406 (no free lunch theorem)\u8868\u660e\uff0c\u5728\u6240\u6709\u53ef\u80fd\u7684\u6570\u636e\u751f\u6210\u5206\u5e03\u4e0a\u5e73\u5747\u4e4b\u540e\uff0c\u6bcf\u4e00\u4e2a\u5206\u7c7b\u7b97\u6cd5\u5728\u672a\u5b9e\u73b0\u89c2\u6d4b\u7684\u70b9\u4e0a\u90fd\u6709\u76f8\u540c\u7684\u9519\u8bef\u7387\u3002\u6362\u8a00\u4e4b\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c \u6ca1\u6709\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u603b\u662f\u6bd4\u5176\u4ed6\u7684\u8981\u597d \u3002\u6211\u4eec\u80fd\u591f\u8bbe\u60f3\u7684\u6700\u5148\u8fdb\u7684\u7b97\u6cd5\u548c\u7b80\u5355\u5730\u5c06\u6240\u6709\u70b9\u5f52\u4e3a\u540c\u4e00\u7c7b\u5730\u7b80\u5355\u7b97\u6cd5\u6709\u7740\u76f8\u540c\u5730\u5e73\u5747\u6027\u80fd(\u5728\u6240\u6709\u53ef\u80fd\u5730\u4efb\u52a1\u4e0a)\u3002 \u673a\u5668\u5b66\u4e60\u7814\u7a76\u5730\u76ee\u6807\u4e0d\u662f\u627e\u4e00\u4e2a\u901a\u7528\u5b66\u4e60\u7b97\u6cd5\u6216\u662f\u7edd\u5bf9\u6700\u597d\u5730\u5b66\u4e60\u7b97\u6cd5\u3002\u53cd\u4e4b\uff0c\u6211\u4eec\u5730\u76ee\u6807\u662f\u7406\u89e3\u4ec0\u4e48\u6837\u5730\u5206\u5e03\u4e0e\u4eba\u5de5\u667a\u80fd\u83b7\u53d6\u7ecf\u9a8c\u5730\"\u771f\u5b9e\u4e16\u754c\"\u76f8\u5173\uff0c\u4ec0\u4e48\u6837\u7684\u5b66\u4e60\u7b97\u6cd5 \u5728\u6211\u4eec\u5173\u6ce8\u7684\u6570\u636e\u751f\u6210\u5206\u5e03\u4e0a\u6548\u679c\u6700\u597d \u3002 5.2.2 \u6b63\u5219\u5316 \u7b97\u6cd5\u7684\u6548\u679c\u4e0d\u4ec5\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d7\u5f71\u54cd\u4e8e \u5047\u8bbe\u7a7a\u95f4\u7684\u51fd\u6570\u6570\u91cf \uff0c\u4e5f\u53d6\u51b3\u4e8e\u8fd9\u4e9b \u51fd\u6570\u7684\u5177\u4f53\u5f62\u5f0f \u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u63a7\u5236\u7b97\u6cd5\u7684\u6027\u80fd\uff0c(1)\u5141\u8bb8\u4f7f\u7528\u7684\u51fd\u6570\u79cd\u7c7b\uff1b(2)\u8fd9\u4e9b\u51fd\u6570\u7684\u6570\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u52a0\u5165 \u6743\u91cd\u8870\u51cf (weight decay)\u6765\u4fee\u6539\u7ebf\u6027\u56de\u5f52\u7684\u8bad\u7ec3\u6807\u51c6\u3002\u5e26\u6743\u91cd\u8870\u51cf\u7684\u7ebf\u6027\u56de\u5f52\u6700\u5c0f\u5316\u8bad\u7ec3\u96c6\u4e0a\u7684 \u5747\u65b9\u8bef\u5dee \u548c \u6b63\u5219\u9879 \u7684\u548c$J(\\boldsymbol{w})$\uff0c\u5176\u504f\u597d\u4e8e\u5e73\u65b9\u8303\u6570$L^2$\u8f83\u5c0f\u7684\u6743\u91cd\u3002\u5177\u4f53\u5982\u4e0b\uff1a J(\\boldsymbol{w})=MSE_{train}+\\lambda\\boldsymbol{w}^T\\boldsymbol{w} \u66f4\u4e00\u822c\u5730\uff0c\u6b63\u5219\u5316\u4e00\u4e2a\u5b66\u4e60\u51fd\u6570$f(\\boldsymbol{x};\\boldsymbol{\\theta})$\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u4ee3\u4ef7\u51fd\u6570\u6dfb\u52a0\u88ab\u79f0\u4e3a\u6b63\u5219\u5316\u9879\u7684\u60e9\u7f5a\u3002 \u8868\u793a\u5bf9\u51fd\u6570\u5730\u504f\u597d\u662f\u6bd4\u589e\u51cf\u5047\u8bbe\u7a7a\u95f4\u7684\u6210\u5458\u51fd\u6570\u66f4\u4e00\u822c\u7684\u63a7\u5236\u6a21\u578b\u5bb9\u91cf\u7684\u65b9\u6cd5\u3002\u6709\u5f88\u591a\u5176\u4ed6\u65b9\u6cd5\u9690\u5f0f\u6216\u663e\u5f0f\u5730\u8868\u8fbe\u5bf9\u4e0d\u540c\u89e3\u5730\u504f\u597d\u3002\u8fd9\u4e9b\u90fd\u662f \u6b63\u5219\u5316 (regularization)\u3002\u6b63\u5219\u5316\u662f\u6307\u6211\u4eec\u4fee\u6539\u5b66\u4e60\u7b97\u6cd5\uff0c\u4f7f\u5176\u964d\u4f4e\u6cdb\u5316\u8bef\u5dee\u800c\u975e\u8bad\u7ec3\u8bef\u5dee\u3002\u6b63\u5219\u5316\u662f\u673a\u5668\u5b66\u4e60\u9886\u57df\u5730\u4e2d\u5fc3\u95ee\u9898\u4e4b\u4e00\uff0c\u53ea\u6709\u4f18\u5316\u80fd\u591f\u4e0e\u5176\u91cd\u8981\u6027\u76f8\u5ab2\u3002\u6df1\u5ea6\u5b66\u4e60\u4e2d\u666e\u904d\u7684(\u7279\u522b\u662f\u672c\u4e66)\u7684\u7406\u5ff5\u662f\u5927\u91cf\u4efb\u52a1(\u4f8b\u5982\u4eba\u7c7b\u80fd\u505a\u7684\u667a\u80fd\u4efb\u52a1)\u4e5f\u8bb8\u90fd\u80fd\u4f7f\u7528\u975e\u5e38\u901a\u7528\u7684\u6b63\u5219\u5316\u5f62\u5f0f\u6765\u6709\u6548\u89e3\u51b3\u3002 5.3 \u8d85\u53c2\u6570\u548c\u9a8c\u8bc1\u96c6 \u5927\u591a\u6570\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u90fd\u6709 \u8d85\u53c2\u6570 \uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6765\u63a7\u5236\u7b97\u6cd5\u884c\u4e3a\u3002\u8d85\u53c2\u6570\u7684\u503c\u4e0d\u662f\u901a\u8fc7\u5b66\u4e60\u7b97\u6cd5\u672c\u8eab\u5b66\u4e60\u51fa\u6765\u7684\u3002\u6709\u65f6\u5019\u4e00\u4e2a\u9009\u9879\u88ab\u8bbe\u4e3a\u8d85\u53c2\u6570\uff0c\u662f\u56e0\u4e3a\u5b83\u592a\u96be\u4f18\u5316\u4e86\u3002\u66f4\u591a\u7684\u60c5\u51b5\u662f\uff0c\u8be5\u9009\u9879\u5fc5\u987b\u662f\u8d85\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9002\u5408\u5728\u8bad\u7ec3\u96c6\u4e0a\u5b66\u4e60\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u8bad\u7ec3\u7b97\u6cd5\u89c2\u6d4b\u4e0d\u5230\u7684\u9a8c\u8bc1\u96c6(validtaion set)\u6837\u672c\u3002 \u9a8c\u8bc1\u96c6\u662f\u7528\u6765\"\u8bad\u7ec3\"\u8d85\u53c2\u6570\u7684 \u3002\u5c3d\u7ba1\u9a8c\u8bc1\u96c6\u7684\u8bef\u5dee\u901a\u5e38\u4f1a\u6bd4\u8bad\u7ec3\u96c6\u8bef\u5dee\u5c0f\uff0c\u9a8c\u8bc1\u96c6\u4f1a\u4f4e\u4f30\u6cdb\u5316\u8bef\u5dee\u3002 5.3.1 \u4ea4\u53c9\u9a8c\u8bc1 \u5c0f\u89c4\u6a21\u6d4b\u8bd5\u96c6\u610f\u5473\u7740\u5e73\u5747\u6d4b\u8bd5\u8bef\u5dee\u4f30\u8ba1\u7684\u7edf\u8ba1\u4e0d\u786e\u5b9a\u6027\uff0c\u8fd9\u4f7f\u5f97\u5f88\u96be\u554a\u5224\u65ad\u7b97\u6cd5A\u662f\u5426\u6bd4\u7b97\u6cd5B\u5728\u7ed9\u5b9a\u7684\u4efb\u52a1\u4e0a\u505a\u5f97\u66f4\u597d\u3002\u6240\u4ee5\u6211\u4eec\u7528k\u6298\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u4ee3\u4ef7\u662f\u589e\u52a0\u4e86\u8ba1\u7b97\u91cf\u3002 5.4 \u4f30\u8ba1\u3001\u504f\u5dee\u548c\u65b9\u5dee 5.4.1 \u70b9\u4f30\u8ba1 \u70b9\u4f30\u8ba1 (point estimator)\u8bd5\u56fe\u4e3a\u4e00\u4e9b\u611f\u5174\u8da3\u7684\u91cf\u63d0\u4f9b\u5355\u4e2a\"\u6700\u4f18\"\u9884\u6d4b\u3002\u4e00\u822c\u5730\uff0c\u611f\u5174\u8da3\u5730\u91cf\u53ef\u4ee5\u662f \u5355\u4e2a\u53c2\u6570 \uff0c\u6216\u662f\u67d0\u4e9b\u53c2\u6570\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a \u5411\u91cf\u53c2\u6570 \u3002\u4e3a\u4e86\u533a\u5206\u53c2\u6570\u4f30\u8ba1\u548c\u771f\u5b9e\u503c\uff0c\u6211\u4eec\u4e60\u60ef\u5c06\u53c2\u6570$\\theta$\u7684\u70b9\u4f30\u8ba1\u8868\u793a\u4e3a$\\hat{\\theta}$\u3002 \u4ee4$\\{\\boldsymbol{x}^{(1)},...,\\boldsymbol{x}^{(m)}\\}$\u662f$m$\u4e2a\u72ec\u7acb\u540c\u5206\u5e03\u7684\u6570\u636e\u70b9\u3002\u70b9\u4f30\u8ba1\u6216\u7edf\u8ba1\u91cf(statistics)\u662f\u8fd9\u4e9b\u6570\u636e\u7684\u4efb\u610f\u51fd\u6570\uff1a \\hat{\\boldsymbol{\\theta}}_m=g(\\boldsymbol{x}^{(1)},...,\\boldsymbol{x}^{(m)}) \u8fd9\u4e2a\u5b9a\u4e49\u4e0d\u8981\u6c42$g$\u8fd4\u56de\u4e00\u4e2a\u63a5\u8fd1\u771f\u5b9e$\\boldsymbol{\\Theta}$\u7684\u503c\uff0c\u6d3b\u7740$g$\u7684\u503c\u57df\u6070\u597d\u662f$\\boldsymbol{\\theta}$\u7684\u5141\u8bb8\u53d6\u503c\u8303\u56f4\u3002\u70b9\u4f30\u8ba1\u7684\u5b9a\u4e49\u975e\u5e38\u5bbd\u6cdb\u3002 \u6211\u4eec\u91c7\u53d6\u9891\u7387\u6d3e\u5728\u7edf\u8ba1\u4e0a\u7684\u89c2\u70b9\uff0c\u5047\u8bbe\u771f\u5b9e\u53c2\u6570$\\boldsymbol{\\theta}$\u662f \u56fa\u5b9a\u4f46\u672a\u77e5\u7684 \u3002 \u70b9\u4f30\u8ba1\u4e5f\u53ef\u4ee5\u6307\u8f93\u5165\u548c\u76ee\u6807\u53d8\u91cf\u4e4b\u95f4\u5173\u7cfb\u7684\u4f30\u8ba1\u3002\u6211\u4eec\u5c06\u8fd9\u79cd\u7c7b\u578b\u7684\u70b9\u4f30\u8ba1\u79f0\u4e3a \u51fd\u6570\u4f30\u8ba1 \u3002 \u6709\u65f6\u5019\u6211\u4eec\u4f1a\u5173\u6ce8\u51fd\u6570\u4f30\u8ba1(\u6216\u51fd\u6570\u8fd1\u4f3c)\u3002\u8fd9\u65f6\u6211\u4eec\u8bd5\u56fe\u4ece\u8f93\u5165\u5411\u91cf$\\boldsymbol{x}$\u9884\u6d4b\u53d8\u91cf$\\boldsymbol{y}$\u3002\u6211\u4eec\u5047\u8bbe\u6709\u4e00\u4e2a\u51fd\u6570$f(\\boldsymbol{x})$\u8868\u793a$\\boldsymbol{y}$\u548c$\\boldsymbol{x}$\u4e4b\u95f4\u7684\u8fd1\u4f3c\u5173\u7cfb\u3002\u5728\u51fd\u6570\u4f30\u8ba1\u4e2d\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u7528\u6a21\u578b\u4f30\u8ba1\u533a\u8fd1\u4f3c$f$\uff0c\u6216\u8005\u4f30\u8ba1$\\hat{f}$\u3002\u51fd\u6570\u4f30\u8ba1\u548c\u53c2\u6570\u4f30\u8ba1$\\boldsymbol{\\theta}$\u662f\u4e00\u6837\u7684\uff0c \u51fd\u6570\u4f30\u8ba1 $\\hat{f}$ \u662f\u51fd\u6570\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u70b9\u4f30\u8ba1 \u3002 5.4.2 \u504f\u5dee \u4f30\u8ba1\u7684 \u504f\u5dee \u88ab\u5b9a\u4e49\u4e3a\uff1a bias(\\boldsymbol{\\hat{\\theta}}_m)=\\Bbb{E}(\\boldsymbol{\\hat{\\theta}}_m)-\\boldsymbol{\\theta} \u5176\u4e2d\u671f\u671b\u4f5c\u7528\u5728\u6240\u6709\u6570\u636e(\u770b\u4f5c\u662f\u4ece\u968f\u673a\u53d8\u91cf\u91c7\u6837\u5f97\u5230\u7684)\u4e0a\uff0c$\\theta$\u662f\u7528\u4e8e\u5b9a\u4e49\u6570\u636e\u751f\u6210\u5206\u5e03\u7684$\\theta$\u7684\u771f\u5b9e\u503c\u3002\u5982\u679c$bias(\\boldsymbol{\\hat{\\theta}}_m)=0$\uff0c\u5219\u4f30\u8ba1\u91cf$(\\boldsymbol{\\hat{\\theta}}_m)$\u88ab\u79f0\u4e3a\u662f \u65e0\u504f (unbiased)\u3002\u5982\u679c$\\lim_{m\\to\\infty}bias(\\boldsymbol{\\hat{\\theta}}_m)=0$\uff0c\u90a3\u4e48\u4f30\u8ba1\u91cf$(\\boldsymbol{\\hat{\\theta}}_m)$\u88ab\u79f0\u4e3a\u662f \u6e10\u8fdb\u65e0\u504f (asymptotically unbiased)\u3002 \u793a\u4f8b\uff1a\u4f2f\u52aa\u5229\u5206\u5e03 \u8003\u8651\u4e00\u7ec4\u670d\u4ece\u5747\u503c\u4e3a$\\theta$\u7684\u4f2f\u52aa\u5229\u5206\u5e03\u7684\u72ec\u7acb\u540c\u5206\u5e03\u7684\u6837\u672c$\\{\\boldsymbol{x}^{(1)},...,\\boldsymbol{x}^{(m)}\\}$\uff1a P(x^{(i)});\\theta=\\theta^{x^{(i)}}(1-\\theta)^{1-x^{(i)}} \u8fd9\u4e2a\u5206\u5e03\u4e2d\u53c2\u6570$\\theta$\u7684\u5e38\u7528\u4f30\u8ba1\u91cf\u662f\u8bad\u7ec3\u6837\u672c\u7684\u5747\u503c\uff1a \\hat{\\theta}_{m}=\\frac{1}{m}\\sum_{i=1}^{m}x^{(i)}","title":"\u7b2c\u4e94\u7ae0 \u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"DeepLearning/section_2/","text":"","title":"Section 2"},{"location":"NLP/Introduction/","text":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6982\u8ff0 \u81ea\u7136\u8bed\u8a00\u5904\u7406(\bNatural Language Processing, NLP)\u5b9a\u4e49\uff1a\u5c06\u4eba\u7684\u8bed\u8a00\u5f62\u5f0f\u8f6c\u5316\u4e3a\u673a\u5668\u53ef\u7406\u89e3\u7684\u3001\u7ed3\u6784\u5316\u7684\u3001\u5b8c\u6574\u7684\u8bed\u4e49\u8868\u793a\u3002 \bNLP\u7684\u57fa\u7840\u662f\u5927\u6570\u636e\u3001\u673a\u5668\u5b66\u4e60\u548c\u8bed\u8a00\u5b66\u3002 \u4e3b\u8981\u7814\u7a76\u95ee\u9898\u6709\uff1a - \u7cfb\u7edf\u5c42\u9762\uff1a \u95ee\u7b54\u7cfb\u7edf (Question Answering)\u3001 \u673a\u5668\u7ffb\u8bd1 (Machine Translation)\u3001 \u5bf9\u8bdd\u7cfb\u7edf (Dialogue)\u3002 - \u8bed\u8a00\u7406\u89e3\uff1a \b\b\u8be2\u95ee\u7406\u89e3 \uff08Querying understanding\uff09\u3001 \u6587\u672c\u7406\u89e3 (Document understanding)\u3001 \u60c5\u611f\u5206\u6790 (Sentiment Analysis)\u3002\u57fa\u7840\u662f \u8bcd\u6cd5 (Lexical)\u3001 \u53e5\u6cd5 (Syntax)\u3001 \u8bed\u4e49 (Semantic)\u7b49\u4e0d\u540c\u5c42\u6b21\u7684\u5206\u6790\u3002 - \u8bed\u8a00\u751f\u6210\uff1a \u5199\u4f5c (Writing)\u3001 \u6458\u8981 (Summarization)\u3002 - \u77e5\u8bc6\u56fe\u8c31\uff1a \u5b9e\u4f53\u56fe\u8c31 (Entity Graph)\u3001 \u6ce8\u610f\u529b\u56fe\u8c31 (Attention Graph)\u3001 \u610f\u56fe\u56fe\u8c31 (Intent Graph)\u3002 - \u5e94\u7528\u5c42\u9762\uff1a \u68c0\u7d22 \u3001 O2O \u3001 \u5e7f\u544a \u3002 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u56f0\u96be\uff1a - \u8bed\u8a00\u6b67\u4e49\u6027 - \u8bed\u8a00\u9c81\u68d2\u6027\uff1a\u9519\u5b57\u3001\u5c11\u5b57\u591a\u5b57\u3001\u522b\u79f0\u3001\u4e0d\u8fde\u8d2f\u3001\u566a\u97f3 - \u77e5\u8bc6\u4f9d\u8d56\uff1a\u5982\u4e03\u5929\u53ef\u80fd\u662f\u9152\u5e97\u53ef\u80fd\u662f\u65f6\u95f4 - \u8bed\u5883\u4f9d\u8d56\uff1a\u4e0a\u4e0b\u6587\u7406\u89e3\uff0c\u7528\u6237\u753b\u50cf\u3002 \b \u53e5\u6cd5\u8bed\u4e49\u5206\u6790 \uff1a\u5bf9\u7ed9\u5b9a\u7684\u53e5\u5b50\uff0c\u8fdb\u884c\u5206\u8bcd\u3001\b\u8bcd\u6027\u6807\u6ce8\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u548c\u94fe\u63a5\u3001\u53e5\u6cd5\u5206\u6790\u3001\b\u8bed\u4e49\u89d2\u8272\u8bc6\u522b\u548c\u591a\u4e49\u8bcd\u6d88\u6b67\u3002 \u4fe1\u606f\u62bd\u53d6 \uff1a\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u62bd\u53d6\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\uff0c\u65f6\u95f4\u3001\u5730\u70b9\u3001\u4eba\u7269\u3001\u65f6\u95f4\u3001\u539f\u56e0\u3001\u7ed3\u679c\u3001\u6570\u5b57\u3001\u65e5\u671f\u3001\u8d27\u5e01\u3001\u4e13\u6709\u540d\u8bcd\u7b49\u7b49\u3002\u901a\u4fd7\u5730\u8bf4\uff0c\u5c31\u662f\u4e86\u89e3\u8c01\u3001\u5728\u4ec0\u4e48\u65f6\u5019\u3001\u4ec0\u4e48\u539f\u56e0\u3001\u5bf9\u8c01\u3001\u505a\u4e86\u4ec0\u4e48\u4e8b\u3001\u6709\u4ec0\u4e48\u7ed3\u679c\u3002\u6d89\u53ca\u5230\u5b9e\u4f53\u8bc6\u522b\u3001\u65f6\u95f4\u62bd\u53d6\u3001\u56e0\u679c\u5173\u7cfb\u62bd\u53d6\u7b49\u5173\u952e\u6280\u672f\u3002 \u6587\u672c\u6316\u6398 \uff1a\u5305\u62ec\u6587\u672c\u805a\u7c7b\u3001\u5206\u7c7b\u3001\u4fe1\u606f\u62bd\u53d6\u3001\u6458\u8981\u3001\u60c5\u611f\u5206\u6790\u9057\u8ff9\u5bf9\u6316\u6398\u7684\u4fe1\u606f\u548c\u77e5\u8bc6\u7684\u53ef\u89c6\u5316\u3001\u4ea4\u4e92\u5f0f\u7684\u8868\u8fbe\u754c\u9762\u3002\u76ee\u524d\u4e3b\u6d41\u7684\u6280\u672f\u90fd\u662f\b\u57fa\u4e8e\u7edf\u8ba1\u673a\u5668\u5b66\u4e60\u7684\u3002 \u673a\u5668\u7ffb\u8bd1 \uff1a\u628a\u8f93\u5165\u7684\u6e90\u8bed\u8a00\u6587\u672c\u901a\u8fc7\u81ea\u52a8\u7ffb\u8bd1\u83b7\u5f97\u53e6\u5916\u4e00\u79cd\u8bed\u8a00\u7684\u6587\u672c\u3002\u6839\u636e\u8f93\u5165\u5a92\u4ecb\u4e0d\u540c\uff0c\u53ef\u4ee5\u7ec6\u5206\u4e3a\u6587\u672c\u7ffb\u8bd1\u3001\u8bed\u97f3\u7ffb\u8bd1\u3001\u624b\u8bed\u7ffb\u8bd1\u3001\u56fe\u5f62\u7ffb\u8bd1\u7b49\u7b49\u3002\u673a\u5668\u7ffb\u8bd1\u4ece\u6700\u65e9\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5\u5230\u4e8c\u5341\u5e74\u524d\u7684\u57fa\u4e8e\u7edf\u8ba1\u7684\u65b9\u6cd5\uff0c\u518d\u5230\u4eca\u5929\u7684\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc(\u7f16\u7801\uff0d\u89e3\u7801)\u7684\u65b9\u6cd5\uff0c\u9010\u6e10\u5f62\u6210\u4e86\u4e00\u5957\u6bd4\u8f83\u4e25\u8c28\u7684\u65b9\u6cd5\u4f53\u7cfb\u3002 \u4fe1\u606f\u68c0\u7d22 \uff1a\u5bf9\u5927\u89c4\u6a21\u7684\u6587\u6863\u8fdb\u884c\u68c0\u7d22\u3002\u53ef\u7b80\u5355\u5bf9\u6587\u6863\u4e2d\u7684\u8bcd\u6c47\u3001\u8d4b\u4e88\u4e0d\u540c\u7684\u6743\u91cd\u6765\u5efa\u7acb\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u53e5\u6cd5\u8bed\u4e49\u5206\u6790\u3001\u4fe1\u606f\u62bd\u53d6\u3001\u6587\u672c\u6316\u6398\u7684\u65b9\u6cd5\u6765\u5efa\u7acb\u66f4\u6df1\u5c42\u7684\u7d22\u5f15\u3002\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5bf9\u8f93\u5165\u7684\u8868\u8fbe\u5f0f\u6bd4\u5982\u4e00\u4e2a\u68c0\u7d22\u8bcd\u6216\u8005\u4e00\u4e2a\u53e5\u5b50\u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u5728\u7d22\u5f15\u91cc\u9762\u67e5\u627e\u5339\u914d\u7684\u5019\u9009\u6587\u6863\uff0c\u518d\u6839\u636e\u4e00\u4e2a\u6392\u5e8f\u673a\u5236\u628a\u5019\u9009\u6587\u6863\u6392\u5e8f\uff0c\u7136\u540e\u8f93\u51fa\u6392\u5e8f\u5f97\u5206\u6700\u9ad8\u7684\u6587\u6863\u3002 \u95ee\u7b54\u7cfb\u7edf \uff1a\u5bf9\u4e00\u4e2a\u81ea\u7136\u8bed\u8a00\u8868\u8fbe\u7684\u95ee\u9898\uff0c\u7531\u95ee\u7b54\u7cfb\u7edf\u7ed9\u51fa\u4e00\u4e2a\u7cbe\u51c6\u7684\u7b54\u6848\u3002\u9700\u8981\u5bf9\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u8bed\u53e5\u8fdb\u884c\u67d0\u79cd\u7a0b\u5ea6\u7684\u8bed\u4e49\u5206\u6790\uff0c\u5305\u62ec\u5b9e\u4f53\u94fe\u63a5\u3001\u5173\u7cfb\u8bc6\u522b\uff0c\u5f62\u6210\u903b\u8f91\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u5230\u77e5\u8bc6\u5e93\u4e2d\u67e5\u627e\u53ef\u80fd\u7684\u5019\u9009\u7b54\u6848\u5e76\u901a\u8fc7\u4e00\u4e2a\u6392\u5e8f\u673a\u5236\u627e\u51fa\u6700\u4f73\u7684\u7b54\u6848\u3002 \u5bf9\u8bdd\u7cfb\u7edf \uff1a\u7cfb\u7edf\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u5bf9\u8bdd\uff0c\u8ddf\u7528\u6237\u8fdb\u884c\u804a\u5929\u3001\u56de\u7b54\u3001\u5b8c\u6210\u67d0\u4e00\u9879\u4efb\u52a1\u3002\u6d89\u53ca\u5230\u7528\u6237\u610f\u56fe\u7406\u89e3\u3001\u901a\u7528\u804a\u5929\u5f15\u64ce\u3001\u95ee\u7b54\u5f15\u64ce\u3001\u5bf9\u8bdd\u7ba1\u7406\u7b49\u6280\u672f\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u4f53\u73b0\u4e0a\u4e0b\u6587\u76f8\u5173\uff0c\u8981\u5177\u5907\u591a\u8f6e\u5bf9\u8bdd\u80fd\u529b\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4f53\u73b0\u4e2a\u6027\u5316\uff0c\u8981\u5f00\u53d1\u7528\u6237\u753b\u50cf\u4ee5\u53ca\u57fa\u4e8e\u7528\u6237\u753b\u50cf\u7684\u4e2a\u6027\u5316\u56de\u590d\u3002","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6982\u8ff0"},{"location":"NLP/Introduction/#_1","text":"\u81ea\u7136\u8bed\u8a00\u5904\u7406(\bNatural Language Processing, NLP)\u5b9a\u4e49\uff1a\u5c06\u4eba\u7684\u8bed\u8a00\u5f62\u5f0f\u8f6c\u5316\u4e3a\u673a\u5668\u53ef\u7406\u89e3\u7684\u3001\u7ed3\u6784\u5316\u7684\u3001\u5b8c\u6574\u7684\u8bed\u4e49\u8868\u793a\u3002 \bNLP\u7684\u57fa\u7840\u662f\u5927\u6570\u636e\u3001\u673a\u5668\u5b66\u4e60\u548c\u8bed\u8a00\u5b66\u3002 \u4e3b\u8981\u7814\u7a76\u95ee\u9898\u6709\uff1a - \u7cfb\u7edf\u5c42\u9762\uff1a \u95ee\u7b54\u7cfb\u7edf (Question Answering)\u3001 \u673a\u5668\u7ffb\u8bd1 (Machine Translation)\u3001 \u5bf9\u8bdd\u7cfb\u7edf (Dialogue)\u3002 - \u8bed\u8a00\u7406\u89e3\uff1a \b\b\u8be2\u95ee\u7406\u89e3 \uff08Querying understanding\uff09\u3001 \u6587\u672c\u7406\u89e3 (Document understanding)\u3001 \u60c5\u611f\u5206\u6790 (Sentiment Analysis)\u3002\u57fa\u7840\u662f \u8bcd\u6cd5 (Lexical)\u3001 \u53e5\u6cd5 (Syntax)\u3001 \u8bed\u4e49 (Semantic)\u7b49\u4e0d\u540c\u5c42\u6b21\u7684\u5206\u6790\u3002 - \u8bed\u8a00\u751f\u6210\uff1a \u5199\u4f5c (Writing)\u3001 \u6458\u8981 (Summarization)\u3002 - \u77e5\u8bc6\u56fe\u8c31\uff1a \u5b9e\u4f53\u56fe\u8c31 (Entity Graph)\u3001 \u6ce8\u610f\u529b\u56fe\u8c31 (Attention Graph)\u3001 \u610f\u56fe\u56fe\u8c31 (Intent Graph)\u3002 - \u5e94\u7528\u5c42\u9762\uff1a \u68c0\u7d22 \u3001 O2O \u3001 \u5e7f\u544a \u3002 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u56f0\u96be\uff1a - \u8bed\u8a00\u6b67\u4e49\u6027 - \u8bed\u8a00\u9c81\u68d2\u6027\uff1a\u9519\u5b57\u3001\u5c11\u5b57\u591a\u5b57\u3001\u522b\u79f0\u3001\u4e0d\u8fde\u8d2f\u3001\u566a\u97f3 - \u77e5\u8bc6\u4f9d\u8d56\uff1a\u5982\u4e03\u5929\u53ef\u80fd\u662f\u9152\u5e97\u53ef\u80fd\u662f\u65f6\u95f4 - \u8bed\u5883\u4f9d\u8d56\uff1a\u4e0a\u4e0b\u6587\u7406\u89e3\uff0c\u7528\u6237\u753b\u50cf\u3002 \b \u53e5\u6cd5\u8bed\u4e49\u5206\u6790 \uff1a\u5bf9\u7ed9\u5b9a\u7684\u53e5\u5b50\uff0c\u8fdb\u884c\u5206\u8bcd\u3001\b\u8bcd\u6027\u6807\u6ce8\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u548c\u94fe\u63a5\u3001\u53e5\u6cd5\u5206\u6790\u3001\b\u8bed\u4e49\u89d2\u8272\u8bc6\u522b\u548c\u591a\u4e49\u8bcd\u6d88\u6b67\u3002 \u4fe1\u606f\u62bd\u53d6 \uff1a\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u62bd\u53d6\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\uff0c\u65f6\u95f4\u3001\u5730\u70b9\u3001\u4eba\u7269\u3001\u65f6\u95f4\u3001\u539f\u56e0\u3001\u7ed3\u679c\u3001\u6570\u5b57\u3001\u65e5\u671f\u3001\u8d27\u5e01\u3001\u4e13\u6709\u540d\u8bcd\u7b49\u7b49\u3002\u901a\u4fd7\u5730\u8bf4\uff0c\u5c31\u662f\u4e86\u89e3\u8c01\u3001\u5728\u4ec0\u4e48\u65f6\u5019\u3001\u4ec0\u4e48\u539f\u56e0\u3001\u5bf9\u8c01\u3001\u505a\u4e86\u4ec0\u4e48\u4e8b\u3001\u6709\u4ec0\u4e48\u7ed3\u679c\u3002\u6d89\u53ca\u5230\u5b9e\u4f53\u8bc6\u522b\u3001\u65f6\u95f4\u62bd\u53d6\u3001\u56e0\u679c\u5173\u7cfb\u62bd\u53d6\u7b49\u5173\u952e\u6280\u672f\u3002 \u6587\u672c\u6316\u6398 \uff1a\u5305\u62ec\u6587\u672c\u805a\u7c7b\u3001\u5206\u7c7b\u3001\u4fe1\u606f\u62bd\u53d6\u3001\u6458\u8981\u3001\u60c5\u611f\u5206\u6790\u9057\u8ff9\u5bf9\u6316\u6398\u7684\u4fe1\u606f\u548c\u77e5\u8bc6\u7684\u53ef\u89c6\u5316\u3001\u4ea4\u4e92\u5f0f\u7684\u8868\u8fbe\u754c\u9762\u3002\u76ee\u524d\u4e3b\u6d41\u7684\u6280\u672f\u90fd\u662f\b\u57fa\u4e8e\u7edf\u8ba1\u673a\u5668\u5b66\u4e60\u7684\u3002 \u673a\u5668\u7ffb\u8bd1 \uff1a\u628a\u8f93\u5165\u7684\u6e90\u8bed\u8a00\u6587\u672c\u901a\u8fc7\u81ea\u52a8\u7ffb\u8bd1\u83b7\u5f97\u53e6\u5916\u4e00\u79cd\u8bed\u8a00\u7684\u6587\u672c\u3002\u6839\u636e\u8f93\u5165\u5a92\u4ecb\u4e0d\u540c\uff0c\u53ef\u4ee5\u7ec6\u5206\u4e3a\u6587\u672c\u7ffb\u8bd1\u3001\u8bed\u97f3\u7ffb\u8bd1\u3001\u624b\u8bed\u7ffb\u8bd1\u3001\u56fe\u5f62\u7ffb\u8bd1\u7b49\u7b49\u3002\u673a\u5668\u7ffb\u8bd1\u4ece\u6700\u65e9\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5\u5230\u4e8c\u5341\u5e74\u524d\u7684\u57fa\u4e8e\u7edf\u8ba1\u7684\u65b9\u6cd5\uff0c\u518d\u5230\u4eca\u5929\u7684\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc(\u7f16\u7801\uff0d\u89e3\u7801)\u7684\u65b9\u6cd5\uff0c\u9010\u6e10\u5f62\u6210\u4e86\u4e00\u5957\u6bd4\u8f83\u4e25\u8c28\u7684\u65b9\u6cd5\u4f53\u7cfb\u3002 \u4fe1\u606f\u68c0\u7d22 \uff1a\u5bf9\u5927\u89c4\u6a21\u7684\u6587\u6863\u8fdb\u884c\u68c0\u7d22\u3002\u53ef\u7b80\u5355\u5bf9\u6587\u6863\u4e2d\u7684\u8bcd\u6c47\u3001\u8d4b\u4e88\u4e0d\u540c\u7684\u6743\u91cd\u6765\u5efa\u7acb\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528\u53e5\u6cd5\u8bed\u4e49\u5206\u6790\u3001\u4fe1\u606f\u62bd\u53d6\u3001\u6587\u672c\u6316\u6398\u7684\u65b9\u6cd5\u6765\u5efa\u7acb\u66f4\u6df1\u5c42\u7684\u7d22\u5f15\u3002\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u5bf9\u8f93\u5165\u7684\u8868\u8fbe\u5f0f\u6bd4\u5982\u4e00\u4e2a\u68c0\u7d22\u8bcd\u6216\u8005\u4e00\u4e2a\u53e5\u5b50\u8fdb\u884c\u5206\u6790\uff0c\u7136\u540e\u5728\u7d22\u5f15\u91cc\u9762\u67e5\u627e\u5339\u914d\u7684\u5019\u9009\u6587\u6863\uff0c\u518d\u6839\u636e\u4e00\u4e2a\u6392\u5e8f\u673a\u5236\u628a\u5019\u9009\u6587\u6863\u6392\u5e8f\uff0c\u7136\u540e\u8f93\u51fa\u6392\u5e8f\u5f97\u5206\u6700\u9ad8\u7684\u6587\u6863\u3002 \u95ee\u7b54\u7cfb\u7edf \uff1a\u5bf9\u4e00\u4e2a\u81ea\u7136\u8bed\u8a00\u8868\u8fbe\u7684\u95ee\u9898\uff0c\u7531\u95ee\u7b54\u7cfb\u7edf\u7ed9\u51fa\u4e00\u4e2a\u7cbe\u51c6\u7684\u7b54\u6848\u3002\u9700\u8981\u5bf9\u81ea\u7136\u8bed\u8a00\u67e5\u8be2\u8bed\u53e5\u8fdb\u884c\u67d0\u79cd\u7a0b\u5ea6\u7684\u8bed\u4e49\u5206\u6790\uff0c\u5305\u62ec\u5b9e\u4f53\u94fe\u63a5\u3001\u5173\u7cfb\u8bc6\u522b\uff0c\u5f62\u6210\u903b\u8f91\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u5230\u77e5\u8bc6\u5e93\u4e2d\u67e5\u627e\u53ef\u80fd\u7684\u5019\u9009\u7b54\u6848\u5e76\u901a\u8fc7\u4e00\u4e2a\u6392\u5e8f\u673a\u5236\u627e\u51fa\u6700\u4f73\u7684\u7b54\u6848\u3002 \u5bf9\u8bdd\u7cfb\u7edf \uff1a\u7cfb\u7edf\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u5bf9\u8bdd\uff0c\u8ddf\u7528\u6237\u8fdb\u884c\u804a\u5929\u3001\u56de\u7b54\u3001\u5b8c\u6210\u67d0\u4e00\u9879\u4efb\u52a1\u3002\u6d89\u53ca\u5230\u7528\u6237\u610f\u56fe\u7406\u89e3\u3001\u901a\u7528\u804a\u5929\u5f15\u64ce\u3001\u95ee\u7b54\u5f15\u64ce\u3001\u5bf9\u8bdd\u7ba1\u7406\u7b49\u6280\u672f\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u4f53\u73b0\u4e0a\u4e0b\u6587\u76f8\u5173\uff0c\u8981\u5177\u5907\u591a\u8f6e\u5bf9\u8bdd\u80fd\u529b\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4f53\u73b0\u4e2a\u6027\u5316\uff0c\u8981\u5f00\u53d1\u7528\u6237\u753b\u50cf\u4ee5\u53ca\u57fa\u4e8e\u7528\u6237\u753b\u50cf\u7684\u4e2a\u6027\u5316\u56de\u590d\u3002","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6982\u8ff0"},{"location":"UserProfile/Introduction/","text":"\u7528\u6237\u753b\u50cf\u7684\u5b9a\u4e49 \u53c2\u8003\u8d44\u6599\u6765\u6e90\u4e8e \u4ec0\u4e48\u662f\u7528\u6237\u753b\u50cf\u5462\uff1f\u4e00\u822c\u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f-\u77e5\u4e4e \u7528\u6237\u753b\u50cf\u662f\u6839\u636e\u7528\u6237\u793e\u4f1a\u5c5e\u6027\u3001\u751f\u6d3b\u4e60\u60ef\u548c\u6d88\u8d39\u884c\u4e3a\u7b49\u4fe1\u606f\u800c\u62bd\u8c61\u51fa\u7684\u4e00\u4e2a\u6807\u7b7e\u5316\u7684\u7528\u6237\u6a21\u578b\u3002\u6784\u5efa\u7528\u6237\u753b\u50cf\u7684\u6838\u5fc3\u5de5\u4f5c\u662f\u7ed9\u7528\u6237\u8d34\u201c\u6807\u7b7e\u201d\uff0c\u800c\u6807\u7b7e\u662f\u901a\u8fc7\u5bf9\u7528\u6237\u4fe1\u606f\u5206\u6790\u800c\u6765\u7684\u9ad8\u5ea6\u7cbe\u70bc\u7684\u7279\u5f81\u6807\u8bc6\u3002 \u4f8b\u5982\u67d0\u4f4d\u7528\u6237\uff1a \u59d3\u540d \uff1a\u5c0f\u660e\uff0c \u6027\u522b \uff1a\u7537\uff0c \u5730\u533a \uff1a\u6b66\u6c49\uff0c \u5174\u8da3 \uff1a\u7bee\u7403\uff0c \u5b66\u5386 \uff1a\u7855\u58eb\u3002\u7b80\u5355\u6765\u8bb2\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u6807\u7b7e\u5316\u3002 \u7528\u6237\u753b\u50cf vs. \u7528\u6237\u89d2\u8272 - \u5b9a\u4e49\u7684\u4e0d\u540c \u8fd9\u91cc\u6240\u8bf4\u7684\u7528\u6237\u753b\u50cf\u6307\u7684\u662fUser profile\u3002\u4e0eUser profile\u76f8\u5173\u8054\u7684\u4e00\u4e2a\u6982\u5ff5\u662fUser persona\uff0c\u5b83\u8bd1\u505a\u7528\u6237\u89d2\u8272\uff0c\u4f46\u662f\u5728\u5f88\u591a\u5730\u65b9\u4e5f\u88ab\u8bd1\u4f5c\u4e86\u7528\u6237\u753b\u50cf\u3002\u8fd9\u91cc\u6211\u4eec\u5c06User profile\u8bd1\u4f5c\u7528\u6237\u753b\u50cf\uff0cUser persona\u8bd1\u4f5c\u7528\u6237\u89d2\u8272\u3002 \u7528\u6237\u89d2\u8272\u591a\u7528\u4e8e\u4ea7\u54c1\u548c\u7528\u7814\u3002\u662f\u63cf\u7ed8\u62bd\u8c61\u4e00\u4e2a\u81ea\u7136\u4eba\u7684\u5c5e\u6027\uff0c\u901a\u8fc7\u8c03\u7814\u95ee\u5377\u3001\u7535\u8bdd\u8bbf\u8c08\u7b49\u624b\u6bb5\u83b7\u5f97\u7528\u6237\u7684\u5b9a\u6027\u7279\u5f81\uff0c\u662f\u4e00\u79cd\u7cbe\u70bc\u548c\u6982\u62ec\u3002 \u7528\u6237\u753b\u50cf\u7528\u6237\u753b\u50cf\u591a\u7528\u4e8e\u6570\u636e\u548c\u7814\u53d1\u3002\u662f\u901a\u8fc7\u6570\u636e\u5efa\u7acb\u63cf\u7ed8\u7528\u6237\u7684\u6807\u7b7e\uff0c\u662f\u4e0e\u6570\u636e\u6316\u6398\u548c\u5927\u6570\u636e\u606f\u606f\u76f8\u5173\u7684\u5e94\u7528\u3002\u5b83\u66f4\u591a\u88ab\u8fd0\u8425\u548c\u6570\u636e\u5206\u6790\u5e08\u4f7f\u7528\uff0c\u662f\u5404\u7c7b\u63cf\u8ff0\u7528\u6237\u6570\u636e\u7684\u53d8\u91cf\u96c6\u5408\u3002(\u4f5c\u8005\u4e3b\u8981\u5173\u6ce8\u6570\u636e\u6316\u6398\u65b9\u9762\uff0c\u6240\u4ee5\u66f4\u591a\u5173\u6ce8\u7684\u662f\u7528\u6237\u753b\u50cfUser profile.) - \u4ea7\u751f\u573a\u666f\u7684\u4e0d\u540c \u5b9a\u4e49\u5f88\u96be\u61c2\uff0c\u4f46\u662f\u770b\u4ea7\u751f\u5b83\u4eec\u4ea7\u751f\u7684\u573a\u666f\u5c31\u6bd4\u8f83\u5bb9\u6613\u4e86\u3002 \u5728\u4ea7\u54c1\u8bbe\u8ba1\u3001\u7528\u6237\u4f53\u9a8c\u8bbe\u8ba1\u7684\u5de5\u4f5c\u4e2d\uff0c\u8981\u8bbe\u8ba1\u4e00\u4e2a\u4ea7\u54c1\uff0c\u6211\u4eec\u8981\u4ece\u5b8f\u89c2\u7684\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u53bb\u5206\u6790\u6211\u4eec\u8981\u5207\u5165\u7684\u5e02\u573a\u662f\u4ec0\u4e48\uff0c\u53d7\u4f17\u662f\u54ea\u4e9b\u4eba\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u62bd\u8c61\u51fa\u4e00\u4e2a\u53ef\u80fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u4ea7\u54c1\u7684\u4eba\u7fa4\uff0c\u660e\u786e\u5b9a\u4f4d\u7528\u6237\u3002 \u62ff\u77e5\u4e4e\u4e2d\u8bb2\u7684\u4e00\u4e2a\u65b0\u6d6a\u5fae\u535a\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u6700\u5f00\u59cb\uff0c\u5fae\u535a\u4e3b\u8981\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u4e00\u4e8c\u7ebf\u57ce\u5e02\u7684\u767d\u9886\u7684\u4f7f\u7528\u3002\u6b64\u65f6\u7684\u7528\u6237\u753b\u50cf\u53ef\u80fd\u662f\uff1a\u4e00\u4e8c\u7ebf\u57ce\u5e02\u3001\u4e8c\u5341\u5230\u4e09\u5341\u5c81\u3001\u8f83\u9ad8\u6559\u80b2\u7a0b\u5ea6\u3001\u767d\u9886\u3001\u6536\u5165\u57286k\u4ee5\u4e0a\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u6240\u6709\u7684\u4ea7\u54c1\u4ea4\u4e92\u548c\u6d41\u7a0b\u8bbe\u8ba1\u90fd\u662f\u4f9d\u636e\u8fd9\u6837\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u865a\u62df\u4eba\u7fa4\u7684\u9700\u6c42\u7b49\u6765\u8bbe\u8ba1\u7684\u3002\u8fd9\u91cc\u7684\u4eba\u7fa4\u6ca1\u6709\u7279\u6307\u67d0\u4e2a\u7528\u6237\u3002 \u4ea7\u54c1\u7ecf\u8fc7\u79ef\u7d2f\u4e86\u4e00\u5b9a\u91cf\u7684\u7528\u6237\u884c\u4e3a\u7b49\u7b49\u7684\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u7cbe\u7ec6\u5730\u4e86\u89e3\u7528\u6237\u3002\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u6765\u4e3a\u4ea7\u54c1\u63d0\u4f9b\u66f4\u597d\u5730\u652f\u6491\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u4f1a\u8bde\u751f\u4e00\u4e9b\u65b0\u7684\u529f\u80fd\u6765\u4e3a\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002\u6839\u636e\u7528\u6237\u5728\u4ea7\u54c1\u4e2d\u7684\u884c\u4e3a\u6570\u636e\uff0c\u4ea7\u51fa\u63cf\u8ff0\u8be5\u7528\u6237\u7684\u6807\u7b7e\u96c6\u5408\u3002\u8fd9\u4e2a\u65f6\u5019\u7684\u7528\u6237\u662f\u7279\u5b9a\u7684\u3002 \u6bd4\u5982\u6211\u4eec\u9700\u8981\u63a8\u6d4b\u7528\u6237\u7684\u6027\u522b\u3001\u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5\u3001\u751f\u6d3b\u5de5\u4f5c\u6240\u5728\u5730\u3001\u5174\u8da3\u7231\u597d\u3001\u662f\u5426\u8ffd\u661f\u3001\u559c\u6b22\u4e70\u4ec0\u4e48\u4e1c\u897f\u7b49\u7b49\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u7528\u6237\u6570\u636e\u5316\uff0c\u7528\u4e8e\u7cbe\u51c6\u8425\u9500\u7b49\u3002(\u867d\u7136\u5f88\u591a\u5730\u65b9\u6211\u4eec\u90fd\u9700\u8981\u586b\u5199\u8d44\u6599\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u586b\u5199\u7684\u8d44\u6599\u662f\u7f3a\u5931\u7684\u6216\u4e0d\u771f\u5b9e\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8fd0\u7528\u6570\u636e\u6316\u6398\u7684\u65b9\u6cd5\u6765\u63a8\u6d4b\u3002) \u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528 \u7cbe\u51c6\u8425\u9500\uff1a\u5206\u6790\u4ea7\u54c1\u6f5c\u5728\u7528\u6237\uff0c\u9488\u5bf9\u7279\u5b9a\u7fa4\u4f53\u5229\u7528\u77ed\u4fe1\u3001\u90ae\u4ef6\u7b49\u65b9\u5f0f\u8fdb\u884c\u8425\u9500\u3002\u4f8b\u5982\u63a8\u9500\u6bcd\u5a74\u4ea7\u54c1\uff0c\u5c31\u5411\u6211\u4eec\u63a8\u6d4b\u51fa\u7684\u6709\u5c0f\u5b69\u7684\u6bcd\u4eb2\u6216\u7531\u8d2d\u4e70\u6570\u636e\u8868\u73b0\u51fa\u6765\u7684\u7ecf\u5e38\u8d2d\u4e70\u6bcd\u5a74\u4ea7\u54c1\u7684\u7528\u6237\u5b9a\u5411\u63a8\u8350\u3002 \u7528\u6237\u7edf\u8ba1\uff1a\u6bd4\u5982\u4e9a\u9a6c\u900a\u53ef\u4ee5\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u5b66\u79d1\u6216\u67d0\u4e2a\u66f4\u7ec6\u5206\u7684\u5b66\u79d1\u7ecf\u5e38\u8d2d\u4e70\u7684\u4e66\u7c4d\u3002 \u6570\u636e\u6316\u6398\uff1a\u6700\u5178\u578b\u7684\u4f8b\u5b50\u662f\u5564\u9152\u548c\u5c3f\u5e03\u3002\u53ef\u4ee5\u901a\u8fc7\u5173\u8054\u89c4\u5219\u5206\u6790\u51fa\u7ecf\u5e38\u5728\u4e00\u8d77\u8d2d\u4e70\u7684\u7269\u54c1\u7b49\u7b49\u3002 \u5b9a\u4f4d\u670d\u52a1\u7fa4\u4f53\uff1a\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002 \u51b3\u7b56\u652f\u6301\uff1a\u901a\u8fc7\u67d0\u7c7b\u53d7\u4f17\u7684\u559c\u597d\u6765\u5bf9\u4ea7\u54c1\u8fdb\u884c\u5b9a\u4ef7\uff0c\u5236\u5b9a\u8425\u9500\u7b56\u7565\u7b49\u3002 \u4e1a\u52a1\u7ecf\u8425\u5206\u6790\u4ee5\u53ca\u7ade\u4e89\u5206\u6790\uff1a\u4e3a\u4f01\u4e1a\u53d1\u5c55\u63d0\u4f9b\u6570\u636e\u5206\u6790\u7684\u652f\u6301\u3002 tricks:\u77e5\u4e4e\u4e0a\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u7f57\u632f\u5b87\u5728\u300a\u65f6\u95f4\u7684\u670b\u53cb\u300b\u8de8\u5e74\u6f14\u8bb2\u4e0a\u4e3e\u4f8b\uff1a\u5f53\u4e00\u4e2a\u574f\u5546\u5bb6\u638c\u63e1\u4e86\u4f60\u7684\u8d2d\u4e70\u6570\u636e\uff0c\u4ed6\u5c31\u53ef\u4ee5\u6839\u636e\u4f60\u5e73\u5e38\u8d2d\u4e70\u5546\u54c1\u7684\u504f\u597d\u6765\u51b3\u5b9a\u7ed9\u4f60\u53d1\u6b63\u54c1\u8fd8\u662f\u5047\u8d27\u6765\u63d0\u9ad8\u5229\u6da6\u3002\u8fd9\u8bf4\u660e\u4e86\u7528\u6237\u753b\u50cf\u786e\u5b9e\u53ef\u4ee5\u505a\u5230\"\u7cbe\u51c6\u8425\u9500\"\uff0c\u5f53\u7136\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u9519\u8bef\u7684\u505a\u6cd5\u3002 \u6211\u8fd8\u60f3\u5230\u4e86\u9a6c\u4e91\u5728\u67d0\u6b21\u6f14\u8bb2\u4e2d\u8bf4\u5927\u6570\u636e\u7684\u4f5c\u7528\uff0c\u95ee\u5927\u5bb6\u5168\u56fd\u80f8\u6700\u5c0f\u7684\u7701\u4efd\u662f\u54ea\u91cc\u3002\u6211\u731c\u6d4b\u662f\u6839\u636e\u5404\u7701\u4efd\u7684\u7528\u6237\u6240\u8d2d\u4e70\u7684\u67d0\u6837\u4e1c\u897f\u7684\u5927\u5c0f\u6765\u8fdb\u884c\u7edf\u8ba1\u7684\uff0c\u5f53\u7136\u4e5f\u6709\u5f88\u591a\u5176\u4ed6\u8f85\u52a9\u624b\u6bb5\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u80fd\u8bf4\u660e\u7528\u6237\u753b\u50cf\u5728\u7528\u6237\u7edf\u8ba1\u65b9\u9762\u7684\u4f5c\u7528\u3002 \u7528\u6237\u753b\u50cf\u6807\u7b7e\u7cfb\u7edf \u6211\u4eec\u8981\u5efa\u7acb\u7528\u6237\u753b\u50cf\uff0c\u9700\u8981\u6536\u96c6\u6570\u636e\uff0c\u53ef\u662f\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5462\uff1f\u8fd9\u4e9b\u9700\u8981\u6839\u636e\u8981\u5efa\u7acb\u7684\u6807\u7b7e\u7cfb\u7edf\u6765\u8bf4\u3002\u5373\u6211\u4eec\u8981\u4e86\u89e3\u7528\u6237\u7684\u54ea\u4e9b\u5c5e\u6027\u3002\u7528\u6237\u7684\u6807\u7b7e\u7cfb\u7edf\u5c31\u50cf\u5bf9\u5546\u54c1\u5206\u7c7b\uff0c\u6bd4\u5982\u5bf9\u4e66\u8fdb\u884c\u5206\u7c7b\uff0c\u4e2d\u6587\u8fd8\u662f\u5916\u6587\uff1f\u662f\u6587\u5b66\u7c7b\u7ecf\u7ba1\u7c7b\u793e\u79d1\u7c7b\u8fd8\u662f\u79d1\u6280\u7c7b\uff1f\u5728\u8fd9\u4e9b\u7c7b\u522b\u4e0b\u8fd8\u6709\u66f4\u7ec6\u5206\u7684\u7c7b\u522b\u3002 \u7528\u6237\u7684\u5206\u7c7b\u8ddf\u4e66\u7684\u5206\u7c7b\u7c7b\u4f3c\uff0c\u4f46\u662f\u7528\u6237\u7684\u5206\u7c7b\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u4eba\u7684\u5174\u8da3\u5206\u7c7b\uff0c\u662f\u6709\u65f6\u6548\u6027\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u8de8\u8d8a\u5f88\u591a\u4e0d\u540c\u7684\u5174\u8da3\u5206\u7c7b\u7b49\u7b49\u3002 \u9605\u8bfb\u8d44\u6599\u540e\uff0c\u6211\u5f52\u7eb3\u7684\u7528\u6237\u753b\u50cf\u4e3b\u8981\u6709\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u7684\u6807\u7b7e\uff1a \u57fa\u672c\u5c5e\u6027\uff1a\u4e3b\u8981\u662f\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\uff1a \u6027\u522b \u3001 \u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5 \u3001 \u751f\u6d3b\u5de5\u4f5c\u5b66\u4e60\u7684\u5730\u533a \u3002\u8fd8\u6709\u4e00\u4e9b \u624b\u673a\u53f7\u7801 \u3001 \u90ae\u7bb1 \u7b49\u5c5e\u6027\u3002 \u793e\u4f1a\u5c5e\u6027\uff1a \u5b66\u5386 \u3001 \u804c\u4e1a \u3001 \u6536\u5165 \u3001 \u5a5a\u59fb\u72b6\u51b5 \u3001 \u5bb6\u5ead\u6210\u5458 (\u53ef\u80fd\u4e5f\u4f1a\u5305\u542b\u5bb6\u5ead\u6210\u5458\u7684\u5c5e\u6027\uff0c\u5982 \u6709\u591a\u5927\u7684\u5b69\u5b50 \u7b49)\u7b49(\u8fd9\u4e9b\u5c5e\u6027\u53ef\u80fd\u4f1a\u7a0d\u5fae\u53d8\u5316)\u3002\u4e0d\u540c\u4ea7\u54c1\u4f1a\u5bf9\u4e0d\u540c\u7684\u5c5e\u6027\u611f\u5174\u8da3\uff0c\u5982\u6559\u80b2\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5b66\u5386\u66f4\u611f\u5174\u8da3\uff0c\u6bcd\u5a74\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5bb6\u5ead\u6210\u5458\u611f\u5174\u8da3\u3002 \u4e2a\u6027\u5c5e\u6027\uff1a\u4e3b\u8981\u6307\u7531\u7528\u6237\u5728\u4e92\u8054\u7f51\u73af\u5883\u4e0b\u4ea7\u751f\u7684\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u5982\u5728\u7535\u5546\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u505c\u7559\u65f6\u957f\u3001\u8d2d\u4e70\u7b49\u884c\u4e3a\uff0c\u8d2d\u4e70\u7684\u5546\u54c1\u7684\u5c5e\u6027\uff0c\u5bf9\u5546\u54c1\u7684\u8bc4\u4ef7\u7b49\u7b49\u5f52\u7eb3\u51fa\u6765\u7684\u7528\u6237\u8d2d\u4e70\u7684 \u7c7b\u76ee\u504f\u597d (\u559c\u6b22\u6536\u7eb3\u6216\u559c\u6b22\u65e5\u7cfb\u7b49)\u3001 \u54c1\u724c\u504f\u597d \u3001 \u5546\u54c1\u5c5e\u6027\u504f\u597d (\u9ad8\u6027\u4ef7\u6bd4\u6216\u5962\u4f88\u54c1\u7b49)\u7b49\u7b49\u3002\u5728\u793e\u4ea4\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u641c\u7d22\u3001\u827e\u7279\u670b\u53cb\uff0c\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\uff0c\u53d1\u5e03\u5185\u5bb9\uff0c\u5f15\u7528\u8bdd\u9898\u7b49\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684 \u7528\u6237\u5174\u8da3\u504f\u597d \uff0c \u793e\u4ea4\u5c5e\u6027 \u7b49\u7b49\u3002 \u4ef7\u503c\u5c5e\u6027\uff1a\u8fd9\u4e2a\u4e3b\u8981\u662f\u8be5\u7528\u6237\u5bf9\u4ea7\u54c1\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u8be5\u7528\u6237\u672c\u8eab\u7684\u4ef7\u503c\u3002\u5bf9\u4e8e\u7535\u5546\u7f51\u7ad9\u6765\u8bf4\u7528\u6237\u7684 \u6d88\u8d39\u6863\u6b21 \uff0c \u7528\u6237\u79ef\u5206\u7b49\u7ea7 \uff0c\u8d2d\u4e70\u9891\u6b21\u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u793e\u4ea4\u7f51\u7ad9\u6765\u8bf4\uff0c\u7528\u6237\u7684 \u6d3b\u8dc3\u5ea6 \u3001 \u5f71\u54cd\u529b \u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u94f6\u884c\u6765\u8bf4\uff0c\u7528\u6237\u7684\u501f\u8d37\u4fe1\u606f\u7b49\u51b3\u5b9a\u7528\u6237 \u8bda\u4fe1\u5ea6 \u4ef7\u503c\u3002 \u77e5\u4e4e\u4e0a\u6709\u4eba\u8bf4\u53ef\u4ee5\u4ece\u4eba\u7684\u5fc3\u7406\u3001\u4eba\u683c\u5c42\u9762\u5bf9 \u4ef7\u503c\u89c2 \u3001 \u4eba\u683c \u8fdb\u884c\u5efa\u6a21\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u6709\u4e9b\u7ec6\u601d\u6050\u6781\uff0c\u4f46\u662f\u5e94\u8be5\u4e5f\u662f\u4e00\u4e2a\u53d1\u5c55\u65b9\u5411\u3002 \u6211\u4eec\u73b0\u5728\u6240\u505a\u7684\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u53ea\u662f\u6bcf\u4e2a\u4eba\u6240\u5305\u542b\u7684\u6807\u7b7e\u8fd8\u4e0d\u591f\u591a\uff0c\u6240\u638c\u63e1\u7684\u4fe1\u606f\u4e0d\u591f\u591a\uff0c\u8fd8\u6ca1\u6709\u5230\u8fbe\u80fd\u591f\u8fd8\u539f\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u4eba\u7684\u5730\u6b65\u3002 \u8bf4\u8fd9\u4e2a\u53ea\u662f\u5e2e\u52a9\u7406\u89e3\u7528\u6237\u753b\u50cf\u662f\u4ec0\u4e48\u3002 \u7528\u6237\u753b\u50cf\u9700\u8981\u6536\u96c6\u54ea\u4e9b\u6570\u636e \u4e0d\u540c\u516c\u53f8\u7684\u4e1a\u52a1\u5bfc\u81f4\u4e86\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u4f1a\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u4f8b\u5982\u5bf9\u57fa\u672c\u5c5e\u6027\uff0c\u963f\u91cc\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u662f\u975e\u5e38\u7cbe\u786e\u7684\uff0c\u4e0d\u5149\u662f\u4ece\u7528\u6237\u586b\u5199\u7684\u8d44\u6599\u65b9\u9762\uff0c\u4ece\u963f\u91cc\u7684\u5927\u91cf\u7535\u5546\u6570\u636e\u4e2d\u53ef\u4ee5\u975e\u5e38\u7cbe\u51c6\u5730\u63a8\u6d4b\u8be5\u7528\u6237\u7684\u57fa\u672c\u5c5e\u6027\u3002\u800c\u767e\u5ea6\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u6bd4\u8f83\u4e0d\u7cbe\u786e\uff0c\u4f46\u662f\u767e\u5ea6\u7684\u641c\u7d22\u6570\u636e\u5728\u5b8f\u89c2\u5c42\u9762\u6709\u975e\u5e38\u591a\u7684\u5e94\u7528\u3002\u4f8b\u5982\u963f\u91cc\u7684\u793e\u4ea4\u6570\u636e\u5c31\u4e0d\u5982\u817e\u8baf\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e0d\u540c\u516c\u53f8\uff0c\u6536\u96c6\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u7684\u80fd\u529b\u662f\u6709\u4e00\u5b9a\u9650\u5236\u7684\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff1a\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5176\u5b9e\u662f\u7279\u5f81\u5de5\u7a0b\u7684\u4e00\u90e8\u5206\u3002 \u6765\u81ea\u7f51\u7edc\u7684\u603b\u7ed3\u548c\u4e2a\u4eba\u601d\u8003(\u6839\u636e\u4f5c\u8005\u7684\u5b9e\u9645\u7ecf\u5386\u53ef\u80fd\u4f1a\u6709\u4e9b\u4fee\u6b63\u548c\u66f4\u65b0)\uff1a \u5bf9\u4e8e\u50cf\u963f\u91cc\u8fd9\u6837\u7684\u7535\u5546\u5927\u6237\uff1a \u7f51\u7edc\u884c\u4e3a\u6570\u636e\uff1a\u6d3b\u8dc3\u5929\u6570\u3001\u9875\u9762\u6d4f\u89c8\u91cf\u3001\u8bbf\u95ee\u65f6\u957f\u3001\u6fc0\u6d3b\u7387(\u5927\u6982\u662f\u6d4f\u89c8\u8f6c\u5316\u4e3a\u70b9\u51fb\u7684\u6bd4\u7387\uff1f)\u3001\u5916\u90e8\u89e6\u70b9(\uff1f)\u3001\u793e\u4ea4\u6570\u636e\u7b49\u3002 \u670d\u52a1\u5185\u884c\u4e3a\u6570\u636e\uff1a\u6d4f\u89c8\u8def\u5f84\u3001\u9875\u9762\u505c\u7559\u65f6\u957f\u3001\u8bbf\u95ee\u6df1\u5ea6\u3001\u552f\u4e00\u9875\u9762\u6d4f\u89c8\u6b21\u6570(\uff1f)\u7b49\u3002 \u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8/\u6536\u85cf\u5185\u5bb9\u3001\u8d2d\u7269\u8f66\u5185\u5bb9\u3001\u8bc4\u8bba\u5185\u5bb9\u3001\u4e92\u52a8\u5185\u5bb9\u3001\u751f\u6d3b\u5f62\u6001\u504f\u597d\u3001\u54c1\u724c\u504f\u597d\u7b49\u3002 \u4ea4\u6613\u6570\u636e\uff1a\u8d21\u732e\u7387\u3001\u5ba2\u5355\u4ef7(\uff1f)\u3001\u8fde\u5e26\u7387\u3001\u56de\u5934\u7387\u3001\u6d41\u5931\u7387\u7b49\u3002 \u5bf9\u4e8e\u50cf\u65b0\u6d6a\u5fae\u535a\u8fd9\u6837\u7684\u793e\u4f1a\u5a92\u4f53\u5927\u6237\uff1a \u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u8f6c\u53d1\u3001\u641c\u7d22\u3001\u5206\u7ec4\u7b49 \u793e\u4ea4\u6570\u636e\uff1a\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\u3001\u53cc\u5411\u5173\u6ce8\u3001\u53d1\u5e03\u7684\u5185\u5bb9\u827e\u7279\u7684\u670b\u53cb\u7b49 \u5185\u5bb9\u4ea7\u51fa\u6570\u636e\uff1a\u53d1\u5e03\u7684\u5fae\u535a\u6587\u672c\u3001\u56fe\u7247\u3001\u89c6\u9891\u3001\u53c2\u4e0e\u7684\u8bdd\u9898\u7b49 \u672a\u6765\u5f85\u5206\u6790(\u4e5f\u6709\u53ef\u80fd\u4e0d\u5206\u6790\u4e86)\uff1a\u817e\u8baf\u793e\u4ea4\u5927\u6237\u3001b\u7ad9\u89c6\u9891\u5927\u6237\u3001\u7f51\u6613\u4e91\u97f3\u4e50\u7b49\u7b49\u3002","title":"Introduction"},{"location":"UserProfile/Introduction/#_1","text":"\u53c2\u8003\u8d44\u6599\u6765\u6e90\u4e8e \u4ec0\u4e48\u662f\u7528\u6237\u753b\u50cf\u5462\uff1f\u4e00\u822c\u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f-\u77e5\u4e4e \u7528\u6237\u753b\u50cf\u662f\u6839\u636e\u7528\u6237\u793e\u4f1a\u5c5e\u6027\u3001\u751f\u6d3b\u4e60\u60ef\u548c\u6d88\u8d39\u884c\u4e3a\u7b49\u4fe1\u606f\u800c\u62bd\u8c61\u51fa\u7684\u4e00\u4e2a\u6807\u7b7e\u5316\u7684\u7528\u6237\u6a21\u578b\u3002\u6784\u5efa\u7528\u6237\u753b\u50cf\u7684\u6838\u5fc3\u5de5\u4f5c\u662f\u7ed9\u7528\u6237\u8d34\u201c\u6807\u7b7e\u201d\uff0c\u800c\u6807\u7b7e\u662f\u901a\u8fc7\u5bf9\u7528\u6237\u4fe1\u606f\u5206\u6790\u800c\u6765\u7684\u9ad8\u5ea6\u7cbe\u70bc\u7684\u7279\u5f81\u6807\u8bc6\u3002 \u4f8b\u5982\u67d0\u4f4d\u7528\u6237\uff1a \u59d3\u540d \uff1a\u5c0f\u660e\uff0c \u6027\u522b \uff1a\u7537\uff0c \u5730\u533a \uff1a\u6b66\u6c49\uff0c \u5174\u8da3 \uff1a\u7bee\u7403\uff0c \u5b66\u5386 \uff1a\u7855\u58eb\u3002\u7b80\u5355\u6765\u8bb2\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u6807\u7b7e\u5316\u3002","title":"\u7528\u6237\u753b\u50cf\u7684\u5b9a\u4e49"},{"location":"UserProfile/Introduction/#vs","text":"","title":"\u7528\u6237\u753b\u50cf vs. \u7528\u6237\u89d2\u8272"},{"location":"UserProfile/Introduction/#-","text":"\u8fd9\u91cc\u6240\u8bf4\u7684\u7528\u6237\u753b\u50cf\u6307\u7684\u662fUser profile\u3002\u4e0eUser profile\u76f8\u5173\u8054\u7684\u4e00\u4e2a\u6982\u5ff5\u662fUser persona\uff0c\u5b83\u8bd1\u505a\u7528\u6237\u89d2\u8272\uff0c\u4f46\u662f\u5728\u5f88\u591a\u5730\u65b9\u4e5f\u88ab\u8bd1\u4f5c\u4e86\u7528\u6237\u753b\u50cf\u3002\u8fd9\u91cc\u6211\u4eec\u5c06User profile\u8bd1\u4f5c\u7528\u6237\u753b\u50cf\uff0cUser persona\u8bd1\u4f5c\u7528\u6237\u89d2\u8272\u3002 \u7528\u6237\u89d2\u8272\u591a\u7528\u4e8e\u4ea7\u54c1\u548c\u7528\u7814\u3002\u662f\u63cf\u7ed8\u62bd\u8c61\u4e00\u4e2a\u81ea\u7136\u4eba\u7684\u5c5e\u6027\uff0c\u901a\u8fc7\u8c03\u7814\u95ee\u5377\u3001\u7535\u8bdd\u8bbf\u8c08\u7b49\u624b\u6bb5\u83b7\u5f97\u7528\u6237\u7684\u5b9a\u6027\u7279\u5f81\uff0c\u662f\u4e00\u79cd\u7cbe\u70bc\u548c\u6982\u62ec\u3002 \u7528\u6237\u753b\u50cf\u7528\u6237\u753b\u50cf\u591a\u7528\u4e8e\u6570\u636e\u548c\u7814\u53d1\u3002\u662f\u901a\u8fc7\u6570\u636e\u5efa\u7acb\u63cf\u7ed8\u7528\u6237\u7684\u6807\u7b7e\uff0c\u662f\u4e0e\u6570\u636e\u6316\u6398\u548c\u5927\u6570\u636e\u606f\u606f\u76f8\u5173\u7684\u5e94\u7528\u3002\u5b83\u66f4\u591a\u88ab\u8fd0\u8425\u548c\u6570\u636e\u5206\u6790\u5e08\u4f7f\u7528\uff0c\u662f\u5404\u7c7b\u63cf\u8ff0\u7528\u6237\u6570\u636e\u7684\u53d8\u91cf\u96c6\u5408\u3002(\u4f5c\u8005\u4e3b\u8981\u5173\u6ce8\u6570\u636e\u6316\u6398\u65b9\u9762\uff0c\u6240\u4ee5\u66f4\u591a\u5173\u6ce8\u7684\u662f\u7528\u6237\u753b\u50cfUser profile.)","title":"- \u5b9a\u4e49\u7684\u4e0d\u540c"},{"location":"UserProfile/Introduction/#-_1","text":"\u5b9a\u4e49\u5f88\u96be\u61c2\uff0c\u4f46\u662f\u770b\u4ea7\u751f\u5b83\u4eec\u4ea7\u751f\u7684\u573a\u666f\u5c31\u6bd4\u8f83\u5bb9\u6613\u4e86\u3002 \u5728\u4ea7\u54c1\u8bbe\u8ba1\u3001\u7528\u6237\u4f53\u9a8c\u8bbe\u8ba1\u7684\u5de5\u4f5c\u4e2d\uff0c\u8981\u8bbe\u8ba1\u4e00\u4e2a\u4ea7\u54c1\uff0c\u6211\u4eec\u8981\u4ece\u5b8f\u89c2\u7684\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u53bb\u5206\u6790\u6211\u4eec\u8981\u5207\u5165\u7684\u5e02\u573a\u662f\u4ec0\u4e48\uff0c\u53d7\u4f17\u662f\u54ea\u4e9b\u4eba\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u62bd\u8c61\u51fa\u4e00\u4e2a\u53ef\u80fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u4ea7\u54c1\u7684\u4eba\u7fa4\uff0c\u660e\u786e\u5b9a\u4f4d\u7528\u6237\u3002 \u62ff\u77e5\u4e4e\u4e2d\u8bb2\u7684\u4e00\u4e2a\u65b0\u6d6a\u5fae\u535a\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u6700\u5f00\u59cb\uff0c\u5fae\u535a\u4e3b\u8981\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u4e00\u4e8c\u7ebf\u57ce\u5e02\u7684\u767d\u9886\u7684\u4f7f\u7528\u3002\u6b64\u65f6\u7684\u7528\u6237\u753b\u50cf\u53ef\u80fd\u662f\uff1a\u4e00\u4e8c\u7ebf\u57ce\u5e02\u3001\u4e8c\u5341\u5230\u4e09\u5341\u5c81\u3001\u8f83\u9ad8\u6559\u80b2\u7a0b\u5ea6\u3001\u767d\u9886\u3001\u6536\u5165\u57286k\u4ee5\u4e0a\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c\u6240\u6709\u7684\u4ea7\u54c1\u4ea4\u4e92\u548c\u6d41\u7a0b\u8bbe\u8ba1\u90fd\u662f\u4f9d\u636e\u8fd9\u6837\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u865a\u62df\u4eba\u7fa4\u7684\u9700\u6c42\u7b49\u6765\u8bbe\u8ba1\u7684\u3002\u8fd9\u91cc\u7684\u4eba\u7fa4\u6ca1\u6709\u7279\u6307\u67d0\u4e2a\u7528\u6237\u3002 \u4ea7\u54c1\u7ecf\u8fc7\u79ef\u7d2f\u4e86\u4e00\u5b9a\u91cf\u7684\u7528\u6237\u884c\u4e3a\u7b49\u7b49\u7684\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u7cbe\u7ec6\u5730\u4e86\u89e3\u7528\u6237\u3002\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u6765\u4e3a\u4ea7\u54c1\u63d0\u4f9b\u66f4\u597d\u5730\u652f\u6491\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u4f1a\u8bde\u751f\u4e00\u4e9b\u65b0\u7684\u529f\u80fd\u6765\u4e3a\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002\u6839\u636e\u7528\u6237\u5728\u4ea7\u54c1\u4e2d\u7684\u884c\u4e3a\u6570\u636e\uff0c\u4ea7\u51fa\u63cf\u8ff0\u8be5\u7528\u6237\u7684\u6807\u7b7e\u96c6\u5408\u3002\u8fd9\u4e2a\u65f6\u5019\u7684\u7528\u6237\u662f\u7279\u5b9a\u7684\u3002 \u6bd4\u5982\u6211\u4eec\u9700\u8981\u63a8\u6d4b\u7528\u6237\u7684\u6027\u522b\u3001\u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5\u3001\u751f\u6d3b\u5de5\u4f5c\u6240\u5728\u5730\u3001\u5174\u8da3\u7231\u597d\u3001\u662f\u5426\u8ffd\u661f\u3001\u559c\u6b22\u4e70\u4ec0\u4e48\u4e1c\u897f\u7b49\u7b49\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u7528\u6237\u6570\u636e\u5316\uff0c\u7528\u4e8e\u7cbe\u51c6\u8425\u9500\u7b49\u3002(\u867d\u7136\u5f88\u591a\u5730\u65b9\u6211\u4eec\u90fd\u9700\u8981\u586b\u5199\u8d44\u6599\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u586b\u5199\u7684\u8d44\u6599\u662f\u7f3a\u5931\u7684\u6216\u4e0d\u771f\u5b9e\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8fd0\u7528\u6570\u636e\u6316\u6398\u7684\u65b9\u6cd5\u6765\u63a8\u6d4b\u3002)","title":"- \u4ea7\u751f\u573a\u666f\u7684\u4e0d\u540c"},{"location":"UserProfile/Introduction/#_2","text":"\u7cbe\u51c6\u8425\u9500\uff1a\u5206\u6790\u4ea7\u54c1\u6f5c\u5728\u7528\u6237\uff0c\u9488\u5bf9\u7279\u5b9a\u7fa4\u4f53\u5229\u7528\u77ed\u4fe1\u3001\u90ae\u4ef6\u7b49\u65b9\u5f0f\u8fdb\u884c\u8425\u9500\u3002\u4f8b\u5982\u63a8\u9500\u6bcd\u5a74\u4ea7\u54c1\uff0c\u5c31\u5411\u6211\u4eec\u63a8\u6d4b\u51fa\u7684\u6709\u5c0f\u5b69\u7684\u6bcd\u4eb2\u6216\u7531\u8d2d\u4e70\u6570\u636e\u8868\u73b0\u51fa\u6765\u7684\u7ecf\u5e38\u8d2d\u4e70\u6bcd\u5a74\u4ea7\u54c1\u7684\u7528\u6237\u5b9a\u5411\u63a8\u8350\u3002 \u7528\u6237\u7edf\u8ba1\uff1a\u6bd4\u5982\u4e9a\u9a6c\u900a\u53ef\u4ee5\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u5b66\u79d1\u6216\u67d0\u4e2a\u66f4\u7ec6\u5206\u7684\u5b66\u79d1\u7ecf\u5e38\u8d2d\u4e70\u7684\u4e66\u7c4d\u3002 \u6570\u636e\u6316\u6398\uff1a\u6700\u5178\u578b\u7684\u4f8b\u5b50\u662f\u5564\u9152\u548c\u5c3f\u5e03\u3002\u53ef\u4ee5\u901a\u8fc7\u5173\u8054\u89c4\u5219\u5206\u6790\u51fa\u7ecf\u5e38\u5728\u4e00\u8d77\u8d2d\u4e70\u7684\u7269\u54c1\u7b49\u7b49\u3002 \u5b9a\u4f4d\u670d\u52a1\u7fa4\u4f53\uff1a\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002 \u51b3\u7b56\u652f\u6301\uff1a\u901a\u8fc7\u67d0\u7c7b\u53d7\u4f17\u7684\u559c\u597d\u6765\u5bf9\u4ea7\u54c1\u8fdb\u884c\u5b9a\u4ef7\uff0c\u5236\u5b9a\u8425\u9500\u7b56\u7565\u7b49\u3002 \u4e1a\u52a1\u7ecf\u8425\u5206\u6790\u4ee5\u53ca\u7ade\u4e89\u5206\u6790\uff1a\u4e3a\u4f01\u4e1a\u53d1\u5c55\u63d0\u4f9b\u6570\u636e\u5206\u6790\u7684\u652f\u6301\u3002 tricks:\u77e5\u4e4e\u4e0a\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u7f57\u632f\u5b87\u5728\u300a\u65f6\u95f4\u7684\u670b\u53cb\u300b\u8de8\u5e74\u6f14\u8bb2\u4e0a\u4e3e\u4f8b\uff1a\u5f53\u4e00\u4e2a\u574f\u5546\u5bb6\u638c\u63e1\u4e86\u4f60\u7684\u8d2d\u4e70\u6570\u636e\uff0c\u4ed6\u5c31\u53ef\u4ee5\u6839\u636e\u4f60\u5e73\u5e38\u8d2d\u4e70\u5546\u54c1\u7684\u504f\u597d\u6765\u51b3\u5b9a\u7ed9\u4f60\u53d1\u6b63\u54c1\u8fd8\u662f\u5047\u8d27\u6765\u63d0\u9ad8\u5229\u6da6\u3002\u8fd9\u8bf4\u660e\u4e86\u7528\u6237\u753b\u50cf\u786e\u5b9e\u53ef\u4ee5\u505a\u5230\"\u7cbe\u51c6\u8425\u9500\"\uff0c\u5f53\u7136\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u9519\u8bef\u7684\u505a\u6cd5\u3002 \u6211\u8fd8\u60f3\u5230\u4e86\u9a6c\u4e91\u5728\u67d0\u6b21\u6f14\u8bb2\u4e2d\u8bf4\u5927\u6570\u636e\u7684\u4f5c\u7528\uff0c\u95ee\u5927\u5bb6\u5168\u56fd\u80f8\u6700\u5c0f\u7684\u7701\u4efd\u662f\u54ea\u91cc\u3002\u6211\u731c\u6d4b\u662f\u6839\u636e\u5404\u7701\u4efd\u7684\u7528\u6237\u6240\u8d2d\u4e70\u7684\u67d0\u6837\u4e1c\u897f\u7684\u5927\u5c0f\u6765\u8fdb\u884c\u7edf\u8ba1\u7684\uff0c\u5f53\u7136\u4e5f\u6709\u5f88\u591a\u5176\u4ed6\u8f85\u52a9\u624b\u6bb5\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u80fd\u8bf4\u660e\u7528\u6237\u753b\u50cf\u5728\u7528\u6237\u7edf\u8ba1\u65b9\u9762\u7684\u4f5c\u7528\u3002","title":"\u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528"},{"location":"UserProfile/Introduction/#_3","text":"\u6211\u4eec\u8981\u5efa\u7acb\u7528\u6237\u753b\u50cf\uff0c\u9700\u8981\u6536\u96c6\u6570\u636e\uff0c\u53ef\u662f\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5462\uff1f\u8fd9\u4e9b\u9700\u8981\u6839\u636e\u8981\u5efa\u7acb\u7684\u6807\u7b7e\u7cfb\u7edf\u6765\u8bf4\u3002\u5373\u6211\u4eec\u8981\u4e86\u89e3\u7528\u6237\u7684\u54ea\u4e9b\u5c5e\u6027\u3002\u7528\u6237\u7684\u6807\u7b7e\u7cfb\u7edf\u5c31\u50cf\u5bf9\u5546\u54c1\u5206\u7c7b\uff0c\u6bd4\u5982\u5bf9\u4e66\u8fdb\u884c\u5206\u7c7b\uff0c\u4e2d\u6587\u8fd8\u662f\u5916\u6587\uff1f\u662f\u6587\u5b66\u7c7b\u7ecf\u7ba1\u7c7b\u793e\u79d1\u7c7b\u8fd8\u662f\u79d1\u6280\u7c7b\uff1f\u5728\u8fd9\u4e9b\u7c7b\u522b\u4e0b\u8fd8\u6709\u66f4\u7ec6\u5206\u7684\u7c7b\u522b\u3002 \u7528\u6237\u7684\u5206\u7c7b\u8ddf\u4e66\u7684\u5206\u7c7b\u7c7b\u4f3c\uff0c\u4f46\u662f\u7528\u6237\u7684\u5206\u7c7b\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u4eba\u7684\u5174\u8da3\u5206\u7c7b\uff0c\u662f\u6709\u65f6\u6548\u6027\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u8de8\u8d8a\u5f88\u591a\u4e0d\u540c\u7684\u5174\u8da3\u5206\u7c7b\u7b49\u7b49\u3002 \u9605\u8bfb\u8d44\u6599\u540e\uff0c\u6211\u5f52\u7eb3\u7684\u7528\u6237\u753b\u50cf\u4e3b\u8981\u6709\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u7684\u6807\u7b7e\uff1a \u57fa\u672c\u5c5e\u6027\uff1a\u4e3b\u8981\u662f\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\uff1a \u6027\u522b \u3001 \u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5 \u3001 \u751f\u6d3b\u5de5\u4f5c\u5b66\u4e60\u7684\u5730\u533a \u3002\u8fd8\u6709\u4e00\u4e9b \u624b\u673a\u53f7\u7801 \u3001 \u90ae\u7bb1 \u7b49\u5c5e\u6027\u3002 \u793e\u4f1a\u5c5e\u6027\uff1a \u5b66\u5386 \u3001 \u804c\u4e1a \u3001 \u6536\u5165 \u3001 \u5a5a\u59fb\u72b6\u51b5 \u3001 \u5bb6\u5ead\u6210\u5458 (\u53ef\u80fd\u4e5f\u4f1a\u5305\u542b\u5bb6\u5ead\u6210\u5458\u7684\u5c5e\u6027\uff0c\u5982 \u6709\u591a\u5927\u7684\u5b69\u5b50 \u7b49)\u7b49(\u8fd9\u4e9b\u5c5e\u6027\u53ef\u80fd\u4f1a\u7a0d\u5fae\u53d8\u5316)\u3002\u4e0d\u540c\u4ea7\u54c1\u4f1a\u5bf9\u4e0d\u540c\u7684\u5c5e\u6027\u611f\u5174\u8da3\uff0c\u5982\u6559\u80b2\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5b66\u5386\u66f4\u611f\u5174\u8da3\uff0c\u6bcd\u5a74\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5bb6\u5ead\u6210\u5458\u611f\u5174\u8da3\u3002 \u4e2a\u6027\u5c5e\u6027\uff1a\u4e3b\u8981\u6307\u7531\u7528\u6237\u5728\u4e92\u8054\u7f51\u73af\u5883\u4e0b\u4ea7\u751f\u7684\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u5982\u5728\u7535\u5546\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u505c\u7559\u65f6\u957f\u3001\u8d2d\u4e70\u7b49\u884c\u4e3a\uff0c\u8d2d\u4e70\u7684\u5546\u54c1\u7684\u5c5e\u6027\uff0c\u5bf9\u5546\u54c1\u7684\u8bc4\u4ef7\u7b49\u7b49\u5f52\u7eb3\u51fa\u6765\u7684\u7528\u6237\u8d2d\u4e70\u7684 \u7c7b\u76ee\u504f\u597d (\u559c\u6b22\u6536\u7eb3\u6216\u559c\u6b22\u65e5\u7cfb\u7b49)\u3001 \u54c1\u724c\u504f\u597d \u3001 \u5546\u54c1\u5c5e\u6027\u504f\u597d (\u9ad8\u6027\u4ef7\u6bd4\u6216\u5962\u4f88\u54c1\u7b49)\u7b49\u7b49\u3002\u5728\u793e\u4ea4\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u641c\u7d22\u3001\u827e\u7279\u670b\u53cb\uff0c\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\uff0c\u53d1\u5e03\u5185\u5bb9\uff0c\u5f15\u7528\u8bdd\u9898\u7b49\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684 \u7528\u6237\u5174\u8da3\u504f\u597d \uff0c \u793e\u4ea4\u5c5e\u6027 \u7b49\u7b49\u3002 \u4ef7\u503c\u5c5e\u6027\uff1a\u8fd9\u4e2a\u4e3b\u8981\u662f\u8be5\u7528\u6237\u5bf9\u4ea7\u54c1\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u8be5\u7528\u6237\u672c\u8eab\u7684\u4ef7\u503c\u3002\u5bf9\u4e8e\u7535\u5546\u7f51\u7ad9\u6765\u8bf4\u7528\u6237\u7684 \u6d88\u8d39\u6863\u6b21 \uff0c \u7528\u6237\u79ef\u5206\u7b49\u7ea7 \uff0c\u8d2d\u4e70\u9891\u6b21\u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u793e\u4ea4\u7f51\u7ad9\u6765\u8bf4\uff0c\u7528\u6237\u7684 \u6d3b\u8dc3\u5ea6 \u3001 \u5f71\u54cd\u529b \u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u94f6\u884c\u6765\u8bf4\uff0c\u7528\u6237\u7684\u501f\u8d37\u4fe1\u606f\u7b49\u51b3\u5b9a\u7528\u6237 \u8bda\u4fe1\u5ea6 \u4ef7\u503c\u3002 \u77e5\u4e4e\u4e0a\u6709\u4eba\u8bf4\u53ef\u4ee5\u4ece\u4eba\u7684\u5fc3\u7406\u3001\u4eba\u683c\u5c42\u9762\u5bf9 \u4ef7\u503c\u89c2 \u3001 \u4eba\u683c \u8fdb\u884c\u5efa\u6a21\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u6709\u4e9b\u7ec6\u601d\u6050\u6781\uff0c\u4f46\u662f\u5e94\u8be5\u4e5f\u662f\u4e00\u4e2a\u53d1\u5c55\u65b9\u5411\u3002 \u6211\u4eec\u73b0\u5728\u6240\u505a\u7684\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u53ea\u662f\u6bcf\u4e2a\u4eba\u6240\u5305\u542b\u7684\u6807\u7b7e\u8fd8\u4e0d\u591f\u591a\uff0c\u6240\u638c\u63e1\u7684\u4fe1\u606f\u4e0d\u591f\u591a\uff0c\u8fd8\u6ca1\u6709\u5230\u8fbe\u80fd\u591f\u8fd8\u539f\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u4eba\u7684\u5730\u6b65\u3002 \u8bf4\u8fd9\u4e2a\u53ea\u662f\u5e2e\u52a9\u7406\u89e3\u7528\u6237\u753b\u50cf\u662f\u4ec0\u4e48\u3002","title":"\u7528\u6237\u753b\u50cf\u6807\u7b7e\u7cfb\u7edf"},{"location":"UserProfile/Introduction/#_4","text":"\u4e0d\u540c\u516c\u53f8\u7684\u4e1a\u52a1\u5bfc\u81f4\u4e86\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u4f1a\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u4f8b\u5982\u5bf9\u57fa\u672c\u5c5e\u6027\uff0c\u963f\u91cc\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u662f\u975e\u5e38\u7cbe\u786e\u7684\uff0c\u4e0d\u5149\u662f\u4ece\u7528\u6237\u586b\u5199\u7684\u8d44\u6599\u65b9\u9762\uff0c\u4ece\u963f\u91cc\u7684\u5927\u91cf\u7535\u5546\u6570\u636e\u4e2d\u53ef\u4ee5\u975e\u5e38\u7cbe\u51c6\u5730\u63a8\u6d4b\u8be5\u7528\u6237\u7684\u57fa\u672c\u5c5e\u6027\u3002\u800c\u767e\u5ea6\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u6bd4\u8f83\u4e0d\u7cbe\u786e\uff0c\u4f46\u662f\u767e\u5ea6\u7684\u641c\u7d22\u6570\u636e\u5728\u5b8f\u89c2\u5c42\u9762\u6709\u975e\u5e38\u591a\u7684\u5e94\u7528\u3002\u4f8b\u5982\u963f\u91cc\u7684\u793e\u4ea4\u6570\u636e\u5c31\u4e0d\u5982\u817e\u8baf\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e0d\u540c\u516c\u53f8\uff0c\u6536\u96c6\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u7684\u80fd\u529b\u662f\u6709\u4e00\u5b9a\u9650\u5236\u7684\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff1a\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5176\u5b9e\u662f\u7279\u5f81\u5de5\u7a0b\u7684\u4e00\u90e8\u5206\u3002 \u6765\u81ea\u7f51\u7edc\u7684\u603b\u7ed3\u548c\u4e2a\u4eba\u601d\u8003(\u6839\u636e\u4f5c\u8005\u7684\u5b9e\u9645\u7ecf\u5386\u53ef\u80fd\u4f1a\u6709\u4e9b\u4fee\u6b63\u548c\u66f4\u65b0)\uff1a \u5bf9\u4e8e\u50cf\u963f\u91cc\u8fd9\u6837\u7684\u7535\u5546\u5927\u6237\uff1a \u7f51\u7edc\u884c\u4e3a\u6570\u636e\uff1a\u6d3b\u8dc3\u5929\u6570\u3001\u9875\u9762\u6d4f\u89c8\u91cf\u3001\u8bbf\u95ee\u65f6\u957f\u3001\u6fc0\u6d3b\u7387(\u5927\u6982\u662f\u6d4f\u89c8\u8f6c\u5316\u4e3a\u70b9\u51fb\u7684\u6bd4\u7387\uff1f)\u3001\u5916\u90e8\u89e6\u70b9(\uff1f)\u3001\u793e\u4ea4\u6570\u636e\u7b49\u3002 \u670d\u52a1\u5185\u884c\u4e3a\u6570\u636e\uff1a\u6d4f\u89c8\u8def\u5f84\u3001\u9875\u9762\u505c\u7559\u65f6\u957f\u3001\u8bbf\u95ee\u6df1\u5ea6\u3001\u552f\u4e00\u9875\u9762\u6d4f\u89c8\u6b21\u6570(\uff1f)\u7b49\u3002 \u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8/\u6536\u85cf\u5185\u5bb9\u3001\u8d2d\u7269\u8f66\u5185\u5bb9\u3001\u8bc4\u8bba\u5185\u5bb9\u3001\u4e92\u52a8\u5185\u5bb9\u3001\u751f\u6d3b\u5f62\u6001\u504f\u597d\u3001\u54c1\u724c\u504f\u597d\u7b49\u3002 \u4ea4\u6613\u6570\u636e\uff1a\u8d21\u732e\u7387\u3001\u5ba2\u5355\u4ef7(\uff1f)\u3001\u8fde\u5e26\u7387\u3001\u56de\u5934\u7387\u3001\u6d41\u5931\u7387\u7b49\u3002 \u5bf9\u4e8e\u50cf\u65b0\u6d6a\u5fae\u535a\u8fd9\u6837\u7684\u793e\u4f1a\u5a92\u4f53\u5927\u6237\uff1a \u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u8f6c\u53d1\u3001\u641c\u7d22\u3001\u5206\u7ec4\u7b49 \u793e\u4ea4\u6570\u636e\uff1a\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\u3001\u53cc\u5411\u5173\u6ce8\u3001\u53d1\u5e03\u7684\u5185\u5bb9\u827e\u7279\u7684\u670b\u53cb\u7b49 \u5185\u5bb9\u4ea7\u51fa\u6570\u636e\uff1a\u53d1\u5e03\u7684\u5fae\u535a\u6587\u672c\u3001\u56fe\u7247\u3001\u89c6\u9891\u3001\u53c2\u4e0e\u7684\u8bdd\u9898\u7b49 \u672a\u6765\u5f85\u5206\u6790(\u4e5f\u6709\u53ef\u80fd\u4e0d\u5206\u6790\u4e86)\uff1a\u817e\u8baf\u793e\u4ea4\u5927\u6237\u3001b\u7ad9\u89c6\u9891\u5927\u6237\u3001\u7f51\u6613\u4e91\u97f3\u4e50\u7b49\u7b49\u3002","title":"\u7528\u6237\u753b\u50cf\u9700\u8981\u6536\u96c6\u54ea\u4e9b\u6570\u636e"},{"location":"code_offer/Introduction/","text":"\u8bf4\u660e \u8fd9\u91cc\u662f\u6211\u5728\u725b\u5ba2\u7f51\u4e0a\u7ec3\u4e60\u7f16\u7a0b\u9898\u7559\u4e0b\u6765\u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\uff0c\u65b9\u4fbf\u81ea\u5df1\u6574\u7406\u77e5\u8bc6\u548c\u590d\u4e60\u56de\u987e\u3002 \u73b0\u5728\u8fd9\u91cc\u53ea\u6709Java\u7248\u672c\u7684\u7a0b\u5e8f\uff0c\u5f80\u540e\u53ef\u80fd\u4f1a\u6709Python\u7248\u672c\u7684\u4ee3\u7801\u3002 \u76ee\u524d\u66f4\u65b0\u7684Java\u7248\u672c\u7a0b\u5e8f\u662f\u6211\u5728\u6ca1\u6709\u770b\u7f51\u4e0a\u7684\u5927\u5bb6\u63d0\u4f9b\u7684\u60c5\u51b5\u4e0b\u5199\u7684\u4ee3\u7801\uff08\u6709\u51e0\u4e2a\u9898\u505a\u4e0d\u51fa\u6765\u8fd8\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u725b\u7684\u5199\u6cd5\uff09\uff0c\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u725b\u5ba2\u7f51\u4ee3\u7801\u7684\u6d4b\u8bd5\uff0c\u4f46\u662f\u4e5f\u53ef\u80fd\u5b58\u5728\u5c11\u8bb8\u9519\u8bef\uff0c\u5e94\u8be5\u8bf4 \u4e00\u5b9a\u4f1a\u6709\u9519\u8bef \u3002\u4ee3\u7801\u5199\u5f97\u4e5f\u4e0d\u591f\u591a\uff0c\u53ea\u80fd\u778e\u641e\u641e\u8fd9\u6837\u5b50\uff0c\u6709\u65f6\u5019\u8003\u8651\u4e0d\u5468\u5168\uff0c\u6709\u65f6\u5019\u6b6a\u6253\u6b63\u7740\u3002 \u5982\u679c\u53d1\u73b0\u4e86\u9519\u8bef\uff0c\u8bf7\u4e0e\u6211\u8054\u7cfb~ \u5fae\u535a\uff1a\u84dd\u767d\u7edb\u3002","title":"Introduction"},{"location":"code_offer/Introduction/#_1","text":"\u8fd9\u91cc\u662f\u6211\u5728\u725b\u5ba2\u7f51\u4e0a\u7ec3\u4e60\u7f16\u7a0b\u9898\u7559\u4e0b\u6765\u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\uff0c\u65b9\u4fbf\u81ea\u5df1\u6574\u7406\u77e5\u8bc6\u548c\u590d\u4e60\u56de\u987e\u3002 \u73b0\u5728\u8fd9\u91cc\u53ea\u6709Java\u7248\u672c\u7684\u7a0b\u5e8f\uff0c\u5f80\u540e\u53ef\u80fd\u4f1a\u6709Python\u7248\u672c\u7684\u4ee3\u7801\u3002 \u76ee\u524d\u66f4\u65b0\u7684Java\u7248\u672c\u7a0b\u5e8f\u662f\u6211\u5728\u6ca1\u6709\u770b\u7f51\u4e0a\u7684\u5927\u5bb6\u63d0\u4f9b\u7684\u60c5\u51b5\u4e0b\u5199\u7684\u4ee3\u7801\uff08\u6709\u51e0\u4e2a\u9898\u505a\u4e0d\u51fa\u6765\u8fd8\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u725b\u7684\u5199\u6cd5\uff09\uff0c\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u725b\u5ba2\u7f51\u4ee3\u7801\u7684\u6d4b\u8bd5\uff0c\u4f46\u662f\u4e5f\u53ef\u80fd\u5b58\u5728\u5c11\u8bb8\u9519\u8bef\uff0c\u5e94\u8be5\u8bf4 \u4e00\u5b9a\u4f1a\u6709\u9519\u8bef \u3002\u4ee3\u7801\u5199\u5f97\u4e5f\u4e0d\u591f\u591a\uff0c\u53ea\u80fd\u778e\u641e\u641e\u8fd9\u6837\u5b50\uff0c\u6709\u65f6\u5019\u8003\u8651\u4e0d\u5468\u5168\uff0c\u6709\u65f6\u5019\u6b6a\u6253\u6b63\u7740\u3002 \u5982\u679c\u53d1\u73b0\u4e86\u9519\u8bef\uff0c\u8bf7\u4e0e\u6211\u8054\u7cfb~ \u5fae\u535a\uff1a\u84dd\u767d\u7edb\u3002","title":"\u8bf4\u660e"},{"location":"code_offer/java1-10/","text":"1 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 public class Solution { public boolean Find(int target, int [][] array) { boolean flag = false; for(int i=0; i<array.length; i++) { for(int j=0; j<array[0].length; j++) { if(array[i][j] < target) { continue; }else if(array[i][j] > target){ break; }else{ flag = true; } } } return flag; } } 2 \u66ff\u6362\u7a7a\u683c \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002 public class Solution { public String replaceSpace(StringBuffer str) { return str.toString().replaceAll(\" \",\"%20\"); } } 3 \u4ece\u5934\u5230\u4f4d\u6253\u5370\u94fe\u8868 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u503c\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2aArrayList\u3002 import java.util.ArrayList; import java.util.Stack; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> arrayList = new ArrayList<>(); if(listNode == null) { return arrayList; }else{ Stack<Integer> s = new Stack<Integer>(); while(listNode.next != null) { s.push(listNode.val); listNode = listNode.next; } arrayList.add(listNode.val); while(s.empty()==false) { arrayList.add(s.pop()); } return arrayList; } } } 4 \u91cd\u5efa\u4e8c\u53c9\u6811 \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1,2,4,7,3,5,6,8}\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4,7,2,1,5,3,8,6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002 public class Solution { public TreeNode reConstructBinaryTree(int[] pre, int[] in) {//reConstructBinaryTree\u4e3b\u8981\u662f\u4e00\u4e2a\u8fd4\u56de\u6839\u8282\u70b9\u7684\u7b97\u6cd5 if(pre.length == 0) { return null;//pre\u548cin\u7684length\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u67e5\u770b\u4e00\u4e2a\u662f\u5426\u957f\u5ea6\u4e3a0\u5c31\u884c //\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\u662f\uff1a\u8282\u70b9\u5907\u9009\u9879\u957f\u5ea6\u4e3a0\uff0c\u8fd9\u4e2a\u65f6\u5019\u60f3\u8981\u57280\u4e2a\u6570\u4e2d\u627e\u5230\u6839\u8282\u70b9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u8fd4\u56denull //\u540c\u6837\u5bf9\u4e8e\u4e00\u5f00\u59cb\u7ed9\u5b9a\u7684pre\u548cin\uff0c\u5982\u679c\u90fd\u662f\u7a7a\u7684\u6ca1\u6709\u6570\u5b57\u7684\uff0c\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2anull\u7684\u6839\u8282\u70b9 }else{//\u5982\u679cpre\u548cin\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u627e\u5176\u4e2d\u7684\u6839\u8282\u70b9 //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e5f\u8981\u627e\u6839\u8282\u70b9\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u6839\u8282\u70b9\u5c31\u662findex\u4e3a0\u7684\u6570\uff0c\u5176\u5de6\u53f3\u7684\u6570\u5747\u4e3a0 //\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u5747\u4e3a0\uff0c\u90a3\u4e48\u8fd4\u56de\u5176\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\u4e3anull int root_value = pre[0];//\u6839\u8282\u70b9\u7684\u503c\u4e3apre\u7684\u7b2c\u4e00\u4e2a\u6570 int index = in_index(root_value, in);//\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684index //\u5de6\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230left_pre\u548cleft_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52 int[] left_pre = new int[index]; int[] left_in = new int[index]; for(int i=0; i<left_pre.length; i++) { left_pre[i] = pre[i+1]; left_in[i] = in[i]; } //\u53f3\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230right_pre\u548cright_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52 int[] right_pre = new int[in.length-1-index]; int[] right_in = new int[in.length-1-index]; for(int i=0; i<right_pre.length; i++) { right_pre[i] = pre[i+index+1]; right_in[i] = in[i+index+1]; } TreeNode root = new TreeNode(root_value); root.left = reConstructBinaryTree(left_pre,left_in); root.right = reConstructBinaryTree(right_pre,right_in); return root; } } public int in_index(int target, int[] in) { int index = -1; for(int i=0; i<in.length; i++) { if(in[i] == target) { index = i; } } return index; } } 5 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3aint\u7c7b\u578b\u3002 import java.util.Stack; public class Solution { Stack<Integer> stack1 = new Stack<Integer>(); Stack<Integer> stack2 = new Stack<Integer>(); public void push(int node) { stack1.push(node); } public int pop() { while(stack1.empty()==false) { stack2.push(stack1.pop()); } int value = stack2.pop(); while(stack2.empty()==false) { stack1.push(stack2.pop()); } return value; } } 6 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002 import java.util.ArrayList; public class Solution { public int minNumberInRotateArray(int [] array) { int n = 0; if(array.length == 1) { n = array[0]; }else if(array.length > 1) { boolean flag = false; for(int i=1; i<array.length-1; i++) { if(array[i]<array[i-1]) { flag = true; n = array[i]; } } if(flag == false) { n = array[0]; } } return n; } } 7 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff08\u4ece0\u5f00\u59cb\uff0c\u7b2c0\u9879\u4e3a0\uff09\u3002n<=39 public class Solution { public int Fibonacci(int n) { int result = 0; if(n==0) { result = 0; }else if(n==1) { result = 1; }else{ result = Fibonacci(n-2) + Fibonacci(n-1); } return result; } } 8 \u8df3\u53f0\u9636 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002 public class Solution { public int JumpFloor(int target) { int n_solution = 0; if(target==1){ n_solution = 1; }else if(target>1) { int max_double = target/2; for(int n_2=0; n_2<=max_double; n_2++) { int n_1 = target - 2 * n_2; n_solution = n_solution + get_catogory(n_1, n_2); } } return n_solution; } public int get_catogory(int int_n_1, int int_n_2) { long n_1 = int_n_1; long n_2 = int_n_2; if(n_1==0 ||n_2==0) { return 1; } long n = n_1 + n_2; if(n_1>n_2) { n_1 = n_2; } long up = n; long down = 1l; for(int i=1; i<n_1; i++) { up = up * (n-i); down = down * (1+i); } long n_return = up/down; return (int)n_return; } } 9 \u53d8\u6001\u8df3\u53f0\u9636 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 public class Solution { public int JumpFloorII(int target) { int n_solution = 0; if(target == 0) { return 0; }else if(target == 1) { return 1; }else{ int[] array = new int[target+1]; array[0] = 0; array[1] = 1; for(int i=2; i<target+1; i++) { array[i] = 0; for(int j=0; j<i; j++) { array[i] += array[j]; } ++array[i]; } n_solution = array[target]; } return n_solution; } } 10 \u77e9\u5f62\u8986\u76d6 \u6211\u4eec\u53ef\u4ee5\u75282*1\u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528n\u4e2a2*1\u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a2*n\u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f public class Solution { public int RectCover(int target) { int n_solution = 0; if(target==1){ n_solution = 1; }else if(target>1) { int max_double = target/2; for(int n_2=0; n_2<=max_double; n_2++) { int n_1 = target - (2 * n_2); n_solution = n_solution + get_catogory(n_1, n_2); } } return n_solution; } public int get_catogory(int int_n_1, int int_n_2) { long n_1 = int_n_1; long n_2 = int_n_2; if(n_1==0 ||n_2==0) { return 1; } long n = n_1 + n_2; if(n_1>n_2) { n_1 = n_2; } long up = n; long down = 1l; for(int i=1; i<n_1; i++) { up = up * (n-i); down = down * (1+i); } long n_return = up/down; return (int)n_return; } }","title":"Java 1-10"},{"location":"code_offer/java1-10/#1","text":"\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 public class Solution { public boolean Find(int target, int [][] array) { boolean flag = false; for(int i=0; i<array.length; i++) { for(int j=0; j<array[0].length; j++) { if(array[i][j] < target) { continue; }else if(array[i][j] > target){ break; }else{ flag = true; } } } return flag; } }","title":"1 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"code_offer/java1-10/#2","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002 public class Solution { public String replaceSpace(StringBuffer str) { return str.toString().replaceAll(\" \",\"%20\"); } }","title":"2 \u66ff\u6362\u7a7a\u683c"},{"location":"code_offer/java1-10/#3","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u503c\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2aArrayList\u3002 import java.util.ArrayList; import java.util.Stack; public class Solution { public ArrayList<Integer> printListFromTailToHead(ListNode listNode) { ArrayList<Integer> arrayList = new ArrayList<>(); if(listNode == null) { return arrayList; }else{ Stack<Integer> s = new Stack<Integer>(); while(listNode.next != null) { s.push(listNode.val); listNode = listNode.next; } arrayList.add(listNode.val); while(s.empty()==false) { arrayList.add(s.pop()); } return arrayList; } } }","title":"3 \u4ece\u5934\u5230\u4f4d\u6253\u5370\u94fe\u8868"},{"location":"code_offer/java1-10/#4","text":"\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1,2,4,7,3,5,6,8}\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4,7,2,1,5,3,8,6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002 public class Solution { public TreeNode reConstructBinaryTree(int[] pre, int[] in) {//reConstructBinaryTree\u4e3b\u8981\u662f\u4e00\u4e2a\u8fd4\u56de\u6839\u8282\u70b9\u7684\u7b97\u6cd5 if(pre.length == 0) { return null;//pre\u548cin\u7684length\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u67e5\u770b\u4e00\u4e2a\u662f\u5426\u957f\u5ea6\u4e3a0\u5c31\u884c //\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\u662f\uff1a\u8282\u70b9\u5907\u9009\u9879\u957f\u5ea6\u4e3a0\uff0c\u8fd9\u4e2a\u65f6\u5019\u60f3\u8981\u57280\u4e2a\u6570\u4e2d\u627e\u5230\u6839\u8282\u70b9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u8fd4\u56denull //\u540c\u6837\u5bf9\u4e8e\u4e00\u5f00\u59cb\u7ed9\u5b9a\u7684pre\u548cin\uff0c\u5982\u679c\u90fd\u662f\u7a7a\u7684\u6ca1\u6709\u6570\u5b57\u7684\uff0c\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2anull\u7684\u6839\u8282\u70b9 }else{//\u5982\u679cpre\u548cin\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u627e\u5176\u4e2d\u7684\u6839\u8282\u70b9 //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e5f\u8981\u627e\u6839\u8282\u70b9\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u6839\u8282\u70b9\u5c31\u662findex\u4e3a0\u7684\u6570\uff0c\u5176\u5de6\u53f3\u7684\u6570\u5747\u4e3a0 //\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u5747\u4e3a0\uff0c\u90a3\u4e48\u8fd4\u56de\u5176\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\u4e3anull int root_value = pre[0];//\u6839\u8282\u70b9\u7684\u503c\u4e3apre\u7684\u7b2c\u4e00\u4e2a\u6570 int index = in_index(root_value, in);//\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684index //\u5de6\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230left_pre\u548cleft_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52 int[] left_pre = new int[index]; int[] left_in = new int[index]; for(int i=0; i<left_pre.length; i++) { left_pre[i] = pre[i+1]; left_in[i] = in[i]; } //\u53f3\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230right_pre\u548cright_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52 int[] right_pre = new int[in.length-1-index]; int[] right_in = new int[in.length-1-index]; for(int i=0; i<right_pre.length; i++) { right_pre[i] = pre[i+index+1]; right_in[i] = in[i+index+1]; } TreeNode root = new TreeNode(root_value); root.left = reConstructBinaryTree(left_pre,left_in); root.right = reConstructBinaryTree(right_pre,right_in); return root; } } public int in_index(int target, int[] in) { int index = -1; for(int i=0; i<in.length; i++) { if(in[i] == target) { index = i; } } return index; } }","title":"4 \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"code_offer/java1-10/#5","text":"\u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3aint\u7c7b\u578b\u3002 import java.util.Stack; public class Solution { Stack<Integer> stack1 = new Stack<Integer>(); Stack<Integer> stack2 = new Stack<Integer>(); public void push(int node) { stack1.push(node); } public int pop() { while(stack1.empty()==false) { stack2.push(stack1.pop()); } int value = stack2.pop(); while(stack2.empty()==false) { stack1.push(stack2.pop()); } return value; } }","title":"5 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"code_offer/java1-10/#6","text":"\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002 import java.util.ArrayList; public class Solution { public int minNumberInRotateArray(int [] array) { int n = 0; if(array.length == 1) { n = array[0]; }else if(array.length > 1) { boolean flag = false; for(int i=1; i<array.length-1; i++) { if(array[i]<array[i-1]) { flag = true; n = array[i]; } } if(flag == false) { n = array[0]; } } return n; } }","title":"6 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"code_offer/java1-10/#7","text":"\u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff08\u4ece0\u5f00\u59cb\uff0c\u7b2c0\u9879\u4e3a0\uff09\u3002n<=39 public class Solution { public int Fibonacci(int n) { int result = 0; if(n==0) { result = 0; }else if(n==1) { result = 1; }else{ result = Fibonacci(n-2) + Fibonacci(n-1); } return result; } }","title":"7 \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"code_offer/java1-10/#8","text":"\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002 public class Solution { public int JumpFloor(int target) { int n_solution = 0; if(target==1){ n_solution = 1; }else if(target>1) { int max_double = target/2; for(int n_2=0; n_2<=max_double; n_2++) { int n_1 = target - 2 * n_2; n_solution = n_solution + get_catogory(n_1, n_2); } } return n_solution; } public int get_catogory(int int_n_1, int int_n_2) { long n_1 = int_n_1; long n_2 = int_n_2; if(n_1==0 ||n_2==0) { return 1; } long n = n_1 + n_2; if(n_1>n_2) { n_1 = n_2; } long up = n; long down = 1l; for(int i=1; i<n_1; i++) { up = up * (n-i); down = down * (1+i); } long n_return = up/down; return (int)n_return; } }","title":"8 \u8df3\u53f0\u9636"},{"location":"code_offer/java1-10/#9","text":"\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 public class Solution { public int JumpFloorII(int target) { int n_solution = 0; if(target == 0) { return 0; }else if(target == 1) { return 1; }else{ int[] array = new int[target+1]; array[0] = 0; array[1] = 1; for(int i=2; i<target+1; i++) { array[i] = 0; for(int j=0; j<i; j++) { array[i] += array[j]; } ++array[i]; } n_solution = array[target]; } return n_solution; } }","title":"9 \u53d8\u6001\u8df3\u53f0\u9636"},{"location":"code_offer/java1-10/#10","text":"\u6211\u4eec\u53ef\u4ee5\u75282*1\u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528n\u4e2a2*1\u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a2*n\u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f public class Solution { public int RectCover(int target) { int n_solution = 0; if(target==1){ n_solution = 1; }else if(target>1) { int max_double = target/2; for(int n_2=0; n_2<=max_double; n_2++) { int n_1 = target - (2 * n_2); n_solution = n_solution + get_catogory(n_1, n_2); } } return n_solution; } public int get_catogory(int int_n_1, int int_n_2) { long n_1 = int_n_1; long n_2 = int_n_2; if(n_1==0 ||n_2==0) { return 1; } long n = n_1 + n_2; if(n_1>n_2) { n_1 = n_2; } long up = n; long down = 1l; for(int i=1; i<n_1; i++) { up = up * (n-i); down = down * (1+i); } long n_return = up/down; return (int)n_return; } }","title":"10 \u77e9\u5f62\u8986\u76d6"},{"location":"code_offer/java11-20/","text":"11 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002 import java.util.Stack; public class Solution { public int NumberOf1(int n) { if(n == 0) { return 0; }else if(n > 0) { int quotient = n;//\u5546 int remainder = -1;//\u4f59\u6570 int count = 0; while(quotient != 0) { remainder = quotient % 2; quotient = quotient / 2; if(remainder == 1) { ++count; } } return count; }else{ int quotient = -n; int remainder = -1; int count = 0; int len = 0; boolean flag = false; while(quotient != 0 && len < 31) { ++len; remainder = quotient % 2; quotient = quotient / 2; if(flag == false && remainder==1) { flag = true; ++count; }else if(flag == true && remainder==0) { ++count; } } return count+32-len; } } } 12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u7ed9\u5b9a\u4e00\u4e2adouble\u7c7b\u578b\u7684\u6d6e\u70b9\u6570base\u548cint\u7c7b\u578b\u7684\u6574\u6570exponent\u3002\u6c42base\u7684exponent\u6b21\u65b9\u3002 public class Solution { public double Power(double base, int exponent) { double result = 1; if(exponent==0) { result = 1; }else if(exponent == 1) { result = base; }else if(exponent > 0) { for(int i=0; i<exponent; i++) { result = result * base; } }else{ for(int i=0; i<-exponent; i++) { result = result * base; } result = 1 / result; } return result; } } 13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 import java.util.ArrayList; public class Solution { public void reOrderArray(int [] array) { ArrayList<Integer> odd = new ArrayList<>(); ArrayList<Integer> even = new ArrayList<>(); for(int i=0; i<array.length; i++) { if(array[i] % 2 == 1) { odd.add(array[i]); }else{ even.add(array[i]); } } int index = -1; for(int i=0; i<odd.size(); i++) { ++index; array[index] = odd.get(i); } for(int i=0; i<even.size(); i++) { ++index; array[index] = even.get(i); } } } 14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002 import java.util.Stack; public class Solution { public ListNode FindKthToTail(ListNode head,int k) { Stack<ListNode> stack = new Stack<>(); int size = 0; if(head == null) { return null; } if(k == 0) { return null; }else{ while(head.next != null)//\u6700\u540e\u4e00\u4e2anext\u4e3a\u7a7a\u7684\u8282\u70b9\u6ca1\u6709push\u8fdb\u53bb { stack.push(head); ++size; head = head.next; } if(k == 1) { return head; }else if(k > (size+1)) { return null; }else{ for(int i=0; i<k-2; i++)//\u5982\u679c\u8981\u5012\u6570\u7b2c\u4e8c\u4e2a\uff0c\u5c31\u53ea\u7528pop1\u6b21 { stack.pop(); } return stack.pop(); } } } } 15 \u53cd\u8f6c\u94fe\u8868 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002 import java.util.Stack; public class Solution { public ListNode ReverseList(ListNode head) { if(head == null) { return null; }else if(head.next == null) { return head; }else{ Stack<ListNode> stack = new Stack<>(); ListNode new_head = null; while(head.next != null) { stack.push(head); head = head.next; } new_head = head;//head\u73b0\u5728\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u8d4b\u503c\u7ed9new_head while(stack.empty() == false){ head.next = stack.pop(); head = head.next; } head.next = null;//\u5c06pop\u51fa\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684next\u8d4b\u503c\u4e3anull return new_head; } } } 16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 \u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 public class Solution { public ListNode Merge(ListNode list1,ListNode list2) { if(list1 == null) { return list2; }else if(list2 == null) { return list1; }else{ ListNode new_head = null; if(list1.val<=list2.val) { new_head = list1; }else{ new_head = list2;//\u4ee5list1\u4e3a\u57fa\u51c6\uff0c\u5982\u679clist1\u7684\u7b2c\u4e00\u4e2a\u6570\u5927\u4e8elist2\u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u5219\u4ea4\u6362list1\u548clist2 list2 = list1; list1 = new_head; } while(list1.next != null) { if(list1.next.val >= list2.val) { if(list2.next == null) { list2.next = list1.next; list1.next = list2; break; }else{ ListNode temp2 = list2.next; list2.next = list1.next; list1.next = list2; list1 = list1.next; list2 = temp2; } }else { list1 = list1.next; } } list1.next = list2; return new_head; } } } 17 \u6811\u7684\u5b50\u7ed3\u6784 \u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09 import java.util.LinkedList; import java.util.Queue; public class Solution { public boolean HasSubtree(TreeNode root1,TreeNode root2) { if(root2 == null) { return false; }else{ int target = root2.val; boolean flag = false; Queue<TreeNode> q = new LinkedList<>(); q.offer(root1); while((root1 = q.poll()) != null) { if(root1.left != null){q.offer(root1.left);} if(root1.right != null){q.offer(root1.right);} if(root1.val == target) { if(isSub(root1,root2) == true) { flag = true; break; } } } return flag; } } public boolean isSub(TreeNode root1,TreeNode root2)//\u5224\u65ad\u6811b\u662f\u5426\u662f\u6811a\u7684\u5b50\u7ed3\u6784 { if(root1==null){ return false; } TreeNode root2_left = root2.left; TreeNode root2_right = root2.right; TreeNode root1_left = root1.left; TreeNode root1_right = root1.right; if(root2_left == null && root2_right == null) { return root1.val == root2.val; }else if(root2_left != null && root2_right == null) { return isSub(root1_left,root2_left); }else if(root2_left == null && root2_right != null) { return isSub(root1_right,root2_right); }else{ return isSub(root1_left,root2_left) && isSub(root1_right,root2_right); } } } 18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u8f93\u5165\u63cf\u8ff0: \u4e8c\u53c9\u6811\u7684\u955c\u50cf\u5b9a\u4e49\uff1a\u6e90\u4e8c\u53c9\u6811 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811 8 / \\ 10 6 / \\ / \\ 11 9 7 5 import java.util.LinkedList; import java.util.Queue; public class Solution { public void Mirror(TreeNode root) { TreeNode p = root; Queue<TreeNode> queue = new LinkedList<>(); queue.offer(p); while((p = queue.poll()) != null) { if(p.left != null){queue.offer(p.left);} if(p.right != null){queue.offer(p.right);} TreeNode temp = p.left; p.left = p.right; p.right = temp; } } } 19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4 X 4\u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10. import java.util.ArrayList; public class Solution { public ArrayList<Integer> printMatrix(int [][] matrix) { ArrayList<Integer> out = new ArrayList<>(); int len = matrix.length; if(len == 0){return out;} int dim = matrix[0].length; if(dim == 0){return out;} int min = -1; if(len<=dim){min = len;} else{min = dim;} int round = (min+1)/2; for(int i=0; i<round; i++) { int len_bound = len - i*2; int dim_bound = dim - i*2; int j = 0; int k = 0; if(len_bound==1) { for(; k<dim_bound; k++) { out.add(matrix[i][k+i]); } }else if(dim_bound==1) { for(; j<len_bound; j++) { out.add(matrix[j+i][i]); } }else{ for(; k<dim_bound-1; k++) { out.add(matrix[j+i][k+i]); } for(; j<len_bound-1; j++) { out.add(matrix[j+i][k+i]); } for(; k>0; k--) { out.add(matrix[j+i][k+i]); } for(; j>0; j--) { out.add(matrix[j+i][k+i]); } } } return out; } } 20 \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684min\u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO\uff081\uff09\uff09\u3002 import java.util.Stack; import java.util.ArrayList; public class Solution { ArrayList<Integer> arr = new ArrayList<>(); int min_index = 0; public void push(int node) { arr.add(node); if(node < arr.get(min_index)) { min_index = arr.size()-1; } } public void pop() { if(min_index == arr.size()-1) { arr.remove(arr.size()-1); min_index = 0; for(int i=1; i<arr.size(); i++) { if(arr.get(i) < arr.get(min_index)) { min_index = i; } } }else{ arr.remove(arr.size()-1); } } public int top() { return arr.get(arr.size()-1); } public int min() { return arr.get(min_index); } }","title":"Java 11-20"},{"location":"code_offer/java11-20/#11-1","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002 import java.util.Stack; public class Solution { public int NumberOf1(int n) { if(n == 0) { return 0; }else if(n > 0) { int quotient = n;//\u5546 int remainder = -1;//\u4f59\u6570 int count = 0; while(quotient != 0) { remainder = quotient % 2; quotient = quotient / 2; if(remainder == 1) { ++count; } } return count; }else{ int quotient = -n; int remainder = -1; int count = 0; int len = 0; boolean flag = false; while(quotient != 0 && len < 31) { ++len; remainder = quotient % 2; quotient = quotient / 2; if(flag == false && remainder==1) { flag = true; ++count; }else if(flag == true && remainder==0) { ++count; } } return count+32-len; } } }","title":"11 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"code_offer/java11-20/#12","text":"\u7ed9\u5b9a\u4e00\u4e2adouble\u7c7b\u578b\u7684\u6d6e\u70b9\u6570base\u548cint\u7c7b\u578b\u7684\u6574\u6570exponent\u3002\u6c42base\u7684exponent\u6b21\u65b9\u3002 public class Solution { public double Power(double base, int exponent) { double result = 1; if(exponent==0) { result = 1; }else if(exponent == 1) { result = base; }else if(exponent > 0) { for(int i=0; i<exponent; i++) { result = result * base; } }else{ for(int i=0; i<-exponent; i++) { result = result * base; } result = 1 / result; } return result; } }","title":"12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"code_offer/java11-20/#13","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002 import java.util.ArrayList; public class Solution { public void reOrderArray(int [] array) { ArrayList<Integer> odd = new ArrayList<>(); ArrayList<Integer> even = new ArrayList<>(); for(int i=0; i<array.length; i++) { if(array[i] % 2 == 1) { odd.add(array[i]); }else{ even.add(array[i]); } } int index = -1; for(int i=0; i<odd.size(); i++) { ++index; array[index] = odd.get(i); } for(int i=0; i<even.size(); i++) { ++index; array[index] = even.get(i); } } }","title":"13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"code_offer/java11-20/#14-k","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002 import java.util.Stack; public class Solution { public ListNode FindKthToTail(ListNode head,int k) { Stack<ListNode> stack = new Stack<>(); int size = 0; if(head == null) { return null; } if(k == 0) { return null; }else{ while(head.next != null)//\u6700\u540e\u4e00\u4e2anext\u4e3a\u7a7a\u7684\u8282\u70b9\u6ca1\u6709push\u8fdb\u53bb { stack.push(head); ++size; head = head.next; } if(k == 1) { return head; }else if(k > (size+1)) { return null; }else{ for(int i=0; i<k-2; i++)//\u5982\u679c\u8981\u5012\u6570\u7b2c\u4e8c\u4e2a\uff0c\u5c31\u53ea\u7528pop1\u6b21 { stack.pop(); } return stack.pop(); } } } }","title":"14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9"},{"location":"code_offer/java11-20/#15","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002 import java.util.Stack; public class Solution { public ListNode ReverseList(ListNode head) { if(head == null) { return null; }else if(head.next == null) { return head; }else{ Stack<ListNode> stack = new Stack<>(); ListNode new_head = null; while(head.next != null) { stack.push(head); head = head.next; } new_head = head;//head\u73b0\u5728\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u8d4b\u503c\u7ed9new_head while(stack.empty() == false){ head.next = stack.pop(); head = head.next; } head.next = null;//\u5c06pop\u51fa\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684next\u8d4b\u503c\u4e3anull return new_head; } } }","title":"15 \u53cd\u8f6c\u94fe\u8868"},{"location":"code_offer/java11-20/#16","text":"\u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002 public class Solution { public ListNode Merge(ListNode list1,ListNode list2) { if(list1 == null) { return list2; }else if(list2 == null) { return list1; }else{ ListNode new_head = null; if(list1.val<=list2.val) { new_head = list1; }else{ new_head = list2;//\u4ee5list1\u4e3a\u57fa\u51c6\uff0c\u5982\u679clist1\u7684\u7b2c\u4e00\u4e2a\u6570\u5927\u4e8elist2\u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u5219\u4ea4\u6362list1\u548clist2 list2 = list1; list1 = new_head; } while(list1.next != null) { if(list1.next.val >= list2.val) { if(list2.next == null) { list2.next = list1.next; list1.next = list2; break; }else{ ListNode temp2 = list2.next; list2.next = list1.next; list1.next = list2; list1 = list1.next; list2 = temp2; } }else { list1 = list1.next; } } list1.next = list2; return new_head; } } }","title":"16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"code_offer/java11-20/#17","text":"\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09 import java.util.LinkedList; import java.util.Queue; public class Solution { public boolean HasSubtree(TreeNode root1,TreeNode root2) { if(root2 == null) { return false; }else{ int target = root2.val; boolean flag = false; Queue<TreeNode> q = new LinkedList<>(); q.offer(root1); while((root1 = q.poll()) != null) { if(root1.left != null){q.offer(root1.left);} if(root1.right != null){q.offer(root1.right);} if(root1.val == target) { if(isSub(root1,root2) == true) { flag = true; break; } } } return flag; } } public boolean isSub(TreeNode root1,TreeNode root2)//\u5224\u65ad\u6811b\u662f\u5426\u662f\u6811a\u7684\u5b50\u7ed3\u6784 { if(root1==null){ return false; } TreeNode root2_left = root2.left; TreeNode root2_right = root2.right; TreeNode root1_left = root1.left; TreeNode root1_right = root1.right; if(root2_left == null && root2_right == null) { return root1.val == root2.val; }else if(root2_left != null && root2_right == null) { return isSub(root1_left,root2_left); }else if(root2_left == null && root2_right != null) { return isSub(root1_right,root2_right); }else{ return isSub(root1_left,root2_left) && isSub(root1_right,root2_right); } } }","title":"17 \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"code_offer/java11-20/#18","text":"\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u8f93\u5165\u63cf\u8ff0: \u4e8c\u53c9\u6811\u7684\u955c\u50cf\u5b9a\u4e49\uff1a\u6e90\u4e8c\u53c9\u6811 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811 8 / \\ 10 6 / \\ / \\ 11 9 7 5 import java.util.LinkedList; import java.util.Queue; public class Solution { public void Mirror(TreeNode root) { TreeNode p = root; Queue<TreeNode> queue = new LinkedList<>(); queue.offer(p); while((p = queue.poll()) != null) { if(p.left != null){queue.offer(p.left);} if(p.right != null){queue.offer(p.right);} TreeNode temp = p.left; p.left = p.right; p.right = temp; } } }","title":"18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"code_offer/java11-20/#19","text":"\u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4 X 4\u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10. import java.util.ArrayList; public class Solution { public ArrayList<Integer> printMatrix(int [][] matrix) { ArrayList<Integer> out = new ArrayList<>(); int len = matrix.length; if(len == 0){return out;} int dim = matrix[0].length; if(dim == 0){return out;} int min = -1; if(len<=dim){min = len;} else{min = dim;} int round = (min+1)/2; for(int i=0; i<round; i++) { int len_bound = len - i*2; int dim_bound = dim - i*2; int j = 0; int k = 0; if(len_bound==1) { for(; k<dim_bound; k++) { out.add(matrix[i][k+i]); } }else if(dim_bound==1) { for(; j<len_bound; j++) { out.add(matrix[j+i][i]); } }else{ for(; k<dim_bound-1; k++) { out.add(matrix[j+i][k+i]); } for(; j<len_bound-1; j++) { out.add(matrix[j+i][k+i]); } for(; k>0; k--) { out.add(matrix[j+i][k+i]); } for(; j>0; j--) { out.add(matrix[j+i][k+i]); } } } return out; } }","title":"19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"code_offer/java11-20/#20-min","text":"\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684min\u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO\uff081\uff09\uff09\u3002 import java.util.Stack; import java.util.ArrayList; public class Solution { ArrayList<Integer> arr = new ArrayList<>(); int min_index = 0; public void push(int node) { arr.add(node); if(node < arr.get(min_index)) { min_index = arr.size()-1; } } public void pop() { if(min_index == arr.size()-1) { arr.remove(arr.size()-1); min_index = 0; for(int i=1; i<arr.size(); i++) { if(arr.get(i) < arr.get(min_index)) { min_index = i; } } }else{ arr.remove(arr.size()-1); } } public int top() { return arr.get(arr.size()-1); } public int min() { return arr.get(min_index); } }","title":"20 \u5305\u542bmin\u51fd\u6570\u7684\u6808"},{"location":"code_offer/java21-30/","text":"21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171,2,3,4,5\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u52174,5,3,2,1\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464,3,5,1,2\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09 import java.util.ArrayList; public class Solution { public boolean IsPopOrder(int [] pushA,int [] popA) { int[] seq = new int[pushA.length]; for(int i=0; i<popA.length; i++) { boolean find_flag = false; for (int j = 0; j < pushA.length; j++) { if (popA[i] == pushA[j]) { seq[i] = j; find_flag = true; break; } } if(find_flag == false) { return false; } } for(int i=0; i<seq.length-1; i++) { ArrayList<Integer> temp = new ArrayList<>(); for(int j=0; j<seq[i]; j++) { temp.add(j); } if(i==0) { if(seq[i+1] < temp.get(temp.size()-1)){return false;} else{continue;} }else{ for(int j=0; j<i; j++) { temp.remove((Integer)seq[j]); } if(seq[i+1]<temp.get(temp.size()-1)){return false;} else{continue;} } } return true; } } 22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 import java.util.ArrayList; import java.util.Queue; import java.util.LinkedList; public class Solution { public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) { ArrayList<Integer> arr = new ArrayList(); Queue<TreeNode> q = new LinkedList<>(); q.offer(root); while((root = q.poll()) != null) { arr.add(root.val); if(root.left != null){q.offer(root.left);} if(root.right != null){q.offer(root.right);} } return arr; } } 23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 public class Solution { public boolean VerifySquenceOfBST(int [] sequence) { if(sequence.length == 0) { return false; }else{ return check(sequence); } } public boolean check(int [] sequence) { if(sequence.length == 0) { return true; }else{ int mid = sequence[sequence.length-1]; int front_length = 0; for(int i=0; i<sequence.length-1; i++) { if(sequence[i] > mid) { break; }else{ ++front_length; } } int[] front_half = new int[front_length]; int[] back_half = new int[sequence.length-1-front_length]; for(int i=0; i<front_length; i++) { front_half[i] = sequence[i]; } for(int i=0; i<back_half.length; i++) { if(sequence[i+front_length] < mid){return false;} else{ back_half[i] = sequence[i+front_length]; } } return check(front_half) && check(back_half); } } } 24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u8ddf\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d) import java.util.ArrayList; import java.util.Stack; public class Solution { public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); if(root == null){ return final_list; }else{ ArrayList<Integer> list = new ArrayList<>(); search(final_list,root,list,0,target); return final_list; } } public void search(ArrayList<ArrayList<Integer>> final_list, TreeNode root, ArrayList<Integer> current_list, int current_sum, int target) { if(root.left == null && root.right == null) { if((current_sum+root.val) == target) { current_list.add(root.val); current_sum += root.val; final_list.add(current_list); } }else { current_list.add(root.val); current_sum += root.val; if(root.left!=null && root.right==null) {search(final_list,root.left,current_list,current_sum,target);} else if(root.left==null && root.right!=null) {search(final_list,root.right,current_list,current_sum,target);} else{ ArrayList<Integer> copy_current_list = copy(current_list); search(final_list,root.left,current_list,current_sum,target); search(final_list,root.right,copy_current_list,current_sum,target); } } } public ArrayList<Integer> copy(ArrayList<Integer> arr) { ArrayList<Integer> new_arr = new ArrayList<>(); for(Integer i: arr){ new_arr.add(i); } return new_arr; } } 25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09 public class Solution { public RandomListNode Clone(RandomListNode pHead) { if(pHead == null){ return null; }else{ RandomListNode p = pHead; do{ RandomListNode node = new RandomListNode(p.label); node.next = p.next; p.next = node; p = p.next.next; }while(p != null); p = pHead; do{ if(p.random != null) { p.next.random = p.random.next; }else{ p.next.random = null; } p = p.next.next; }while(p != null); p = pHead; RandomListNode q = pHead.next; RandomListNode remain_head = q; while (q.next != null) { p.next = q.next; q.next = q.next.next; p = p.next; q = q.next; } p.next = null; return remain_head; } } } 26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 import java.util.Stack; public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; }else{ TreeNode p = pRootOfTree; TreeNode pre = pRootOfTree; Stack<TreeNode> stack = new Stack<>(); while(p.left!=null){ stack.push(p); p = p.left; } pRootOfTree = p;//head node pre = null; while(p != null || !stack.empty()){ while(p!=null){ stack.push(p); p = p.left; } p = stack.pop(); p.left = pre; if(pre != null){ pre.right = p; } pre = p; p = p.right; } } return pRootOfTree; } } 27 \u5b57\u7b26\u4e32\u7684\u6392\u5217 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002 import java.util.ArrayList; import java.util.Collections; public class Solution { public ArrayList<String> Permutation(String str) { ArrayList<String> final_list = new ArrayList<>(); if(str.equals(\"\")){return final_list;} char[] arr = str.toCharArray(); ArrayList<Character> char_list = new ArrayList<>(); for(int i=0; i<arr.length; i++){ char_list.add(arr[i]); } Collections.sort(char_list); char[] init_char_arr = new char[char_list.size()]; for(int i=0; i<char_list.size(); i++){ init_char_arr[i] = char_list.get(i); } final_list.add(make_string(init_char_arr)); add_string(final_list, init_char_arr, 0); Collections.sort(final_list); return final_list; } public void add_string(ArrayList<String> final_list, char[] char_arr, int index){ if(index < char_arr.length-1){ add_string(final_list,char_arr,index+1); for(int i=index+1; i<char_arr.length; i++){ if(char_arr[index] != char_arr[i]){ char[] new_char_arr = copy_char_arr(char_arr); char temp = new_char_arr[index]; new_char_arr[index] = new_char_arr[i]; new_char_arr[i] = temp; final_list.add(make_string(new_char_arr)); add_string(final_list, new_char_arr, index+1); } } } } public char[] copy_char_arr(char[] arr){ char[] new_arr = new char[arr.length]; for(int i=0; i<arr.length; i++){ new_arr[i] = arr[i]; } return new_arr; } public String make_string(char[] char_arr){ String s = \"\"; for(int i=0; i<char_arr.length; i++){ s += char_arr[i]; } return s; } } 28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 \u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a9\u7684\u6570\u7ec4{1,2,3,2,2,2,5,4,2}\u3002\u7531\u4e8e\u6570\u5b572\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e865\u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa2\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa0\u3002 import java.util.HashMap; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { HashMap<Integer,Integer> map = new HashMap<>(); for(int i=0; i<array.length; i++){ if(map.get(array[i])!=null){ map.put(array[i], map.get(array[i])+1); }else{ map.put(array[i], 1); } } for(Integer k: map.keySet()){ if(map.get(k) > array.length/2){ return k; } } return 0; } } 29 \u6700\u5c0f\u7684k\u4e2a\u6570 \u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684K\u4e2a\u6570\u3002\u4f8b\u5982\u8f93\u51654,5,1,6,2,7,3,8\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1,2,3,4,\u3002 import java.util.ArrayList; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) { ArrayList<Integer> list = new ArrayList<>(); if(input.length == 0){ return list; } heapSort(list, input, input.length, k); return list; } public void heapSort(ArrayList<Integer> list, int[] input, int len, int k){ if(len > input.length-k && k <= input.length){ int temp; int index = len/2-1; for(int i=index; i>-1; i--){ int remain_i = i; boolean exchange_flag = false; int min_index = -1; if(i*2+2 < len){ min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2; }else{ min_index = i*2+1; } if(input[i] > input[min_index]){ exchange_flag = true; temp = input[i];//exchange input[i] = input[min_index]; input[min_index] = temp; } while(exchange_flag == true){ i = min_index; if(i*2+2 < len){ min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2; if(input[i] > input[min_index]){ temp = input[i];//exchange input[i] = input[min_index]; input[min_index] = temp; }else{ exchange_flag = false; } }else if(i*2+1 < len){ min_index = i*2+1; if(input[i] > input[min_index]){ temp = input[i];//exchange input[i] = input[min_index]; input[min_index] = temp; }else{ exchange_flag = false; } }else{ exchange_flag = false; } } i = remain_i; } int min = input[0]; input[0] = input[len-1]; input[len-1] = min; list.add(min); heapSort(list,input,len-1,k); } } } 30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c HZ\u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002\u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e,\u4ed6\u53c8\u53d1\u8bdd\u4e86:\u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d,\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c,\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019,\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002\u4f46\u662f,\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570,\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570,\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f\u4f8b\u5982:{6,-3,-2,7,-15,1,2,2},\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a8(\u4ece\u7b2c0\u4e2a\u5f00\u59cb,\u5230\u7b2c3\u4e2a\u4e3a\u6b62)\u3002\u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f(\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f1) public class Solution { public int FindGreatestSumOfSubArray(int[] array) { int max = 0; for(int i=0; i<array.length; i++){ if(array[i]<0){ continue; } int sum = array[i]; int neg = 0; for(int j=i-1; j>-1; j--){ System.out.println(\"j = \"+j); if(array[j]>=0){ sum += array[j]; }else{ neg = array[j]; int comple = 0; for(int k=j-1; k>-1; k--){ if(neg+array[k]<comple){ neg = neg+array[k]; }else{ comple = neg+array[k]; neg = neg+array[k]; } } sum = sum + comple; break; } } neg = 0; for(int j=i+1; j<array.length; j++){ System.out.println(\"j = \"+j); if(array[j]>=0){ sum += array[j]; }else{ neg = array[j]; int comple = 0; for(int k=j+1; k<array.length; k++){ if(neg+array[k]<comple){ neg = neg+array[k]; }else{ comple = neg+array[k]; neg = neg+array[k]; } } sum = sum + comple; break; } } if(sum > max){ max = sum; } } if(max == 0){ max = array[0]; for(int i=1; i<array.length; i++){ if(array[i]>max){ max = array[i]; } } } return max; } }","title":"Java 21-30"},{"location":"code_offer/java21-30/#21","text":"\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171,2,3,4,5\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u52174,5,3,2,1\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464,3,5,1,2\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09 import java.util.ArrayList; public class Solution { public boolean IsPopOrder(int [] pushA,int [] popA) { int[] seq = new int[pushA.length]; for(int i=0; i<popA.length; i++) { boolean find_flag = false; for (int j = 0; j < pushA.length; j++) { if (popA[i] == pushA[j]) { seq[i] = j; find_flag = true; break; } } if(find_flag == false) { return false; } } for(int i=0; i<seq.length-1; i++) { ArrayList<Integer> temp = new ArrayList<>(); for(int j=0; j<seq[i]; j++) { temp.add(j); } if(i==0) { if(seq[i+1] < temp.get(temp.size()-1)){return false;} else{continue;} }else{ for(int j=0; j<i; j++) { temp.remove((Integer)seq[j]); } if(seq[i+1]<temp.get(temp.size()-1)){return false;} else{continue;} } } return true; } }","title":"21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"code_offer/java21-30/#22","text":"\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 import java.util.ArrayList; import java.util.Queue; import java.util.LinkedList; public class Solution { public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) { ArrayList<Integer> arr = new ArrayList(); Queue<TreeNode> q = new LinkedList<>(); q.offer(root); while((root = q.poll()) != null) { arr.add(root.val); if(root.left != null){q.offer(root.left);} if(root.right != null){q.offer(root.right);} } return arr; } }","title":"22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"code_offer/java21-30/#23","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 public class Solution { public boolean VerifySquenceOfBST(int [] sequence) { if(sequence.length == 0) { return false; }else{ return check(sequence); } } public boolean check(int [] sequence) { if(sequence.length == 0) { return true; }else{ int mid = sequence[sequence.length-1]; int front_length = 0; for(int i=0; i<sequence.length-1; i++) { if(sequence[i] > mid) { break; }else{ ++front_length; } } int[] front_half = new int[front_length]; int[] back_half = new int[sequence.length-1-front_length]; for(int i=0; i<front_length; i++) { front_half[i] = sequence[i]; } for(int i=0; i<back_half.length; i++) { if(sequence[i+front_length] < mid){return false;} else{ back_half[i] = sequence[i+front_length]; } } return check(front_half) && check(back_half); } } }","title":"23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"code_offer/java21-30/#24","text":"\u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u8ddf\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d) import java.util.ArrayList; import java.util.Stack; public class Solution { public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); if(root == null){ return final_list; }else{ ArrayList<Integer> list = new ArrayList<>(); search(final_list,root,list,0,target); return final_list; } } public void search(ArrayList<ArrayList<Integer>> final_list, TreeNode root, ArrayList<Integer> current_list, int current_sum, int target) { if(root.left == null && root.right == null) { if((current_sum+root.val) == target) { current_list.add(root.val); current_sum += root.val; final_list.add(current_list); } }else { current_list.add(root.val); current_sum += root.val; if(root.left!=null && root.right==null) {search(final_list,root.left,current_list,current_sum,target);} else if(root.left==null && root.right!=null) {search(final_list,root.right,current_list,current_sum,target);} else{ ArrayList<Integer> copy_current_list = copy(current_list); search(final_list,root.left,current_list,current_sum,target); search(final_list,root.right,copy_current_list,current_sum,target); } } } public ArrayList<Integer> copy(ArrayList<Integer> arr) { ArrayList<Integer> new_arr = new ArrayList<>(); for(Integer i: arr){ new_arr.add(i); } return new_arr; } }","title":"24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"code_offer/java21-30/#25","text":"\u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09 public class Solution { public RandomListNode Clone(RandomListNode pHead) { if(pHead == null){ return null; }else{ RandomListNode p = pHead; do{ RandomListNode node = new RandomListNode(p.label); node.next = p.next; p.next = node; p = p.next.next; }while(p != null); p = pHead; do{ if(p.random != null) { p.next.random = p.random.next; }else{ p.next.random = null; } p = p.next.next; }while(p != null); p = pHead; RandomListNode q = pHead.next; RandomListNode remain_head = q; while (q.next != null) { p.next = q.next; q.next = q.next.next; p = p.next; q = q.next; } p.next = null; return remain_head; } } }","title":"25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"code_offer/java21-30/#26","text":"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 import java.util.Stack; public class Solution { public TreeNode Convert(TreeNode pRootOfTree) { if(pRootOfTree == null){ return null; }else{ TreeNode p = pRootOfTree; TreeNode pre = pRootOfTree; Stack<TreeNode> stack = new Stack<>(); while(p.left!=null){ stack.push(p); p = p.left; } pRootOfTree = p;//head node pre = null; while(p != null || !stack.empty()){ while(p!=null){ stack.push(p); p = p.left; } p = stack.pop(); p.left = pre; if(pre != null){ pre.right = p; } pre = p; p = p.right; } } return pRootOfTree; } }","title":"26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"code_offer/java21-30/#27","text":"\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002 import java.util.ArrayList; import java.util.Collections; public class Solution { public ArrayList<String> Permutation(String str) { ArrayList<String> final_list = new ArrayList<>(); if(str.equals(\"\")){return final_list;} char[] arr = str.toCharArray(); ArrayList<Character> char_list = new ArrayList<>(); for(int i=0; i<arr.length; i++){ char_list.add(arr[i]); } Collections.sort(char_list); char[] init_char_arr = new char[char_list.size()]; for(int i=0; i<char_list.size(); i++){ init_char_arr[i] = char_list.get(i); } final_list.add(make_string(init_char_arr)); add_string(final_list, init_char_arr, 0); Collections.sort(final_list); return final_list; } public void add_string(ArrayList<String> final_list, char[] char_arr, int index){ if(index < char_arr.length-1){ add_string(final_list,char_arr,index+1); for(int i=index+1; i<char_arr.length; i++){ if(char_arr[index] != char_arr[i]){ char[] new_char_arr = copy_char_arr(char_arr); char temp = new_char_arr[index]; new_char_arr[index] = new_char_arr[i]; new_char_arr[i] = temp; final_list.add(make_string(new_char_arr)); add_string(final_list, new_char_arr, index+1); } } } } public char[] copy_char_arr(char[] arr){ char[] new_arr = new char[arr.length]; for(int i=0; i<arr.length; i++){ new_arr[i] = arr[i]; } return new_arr; } public String make_string(char[] char_arr){ String s = \"\"; for(int i=0; i<char_arr.length; i++){ s += char_arr[i]; } return s; } }","title":"27 \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"code_offer/java21-30/#28","text":"\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a9\u7684\u6570\u7ec4{1,2,3,2,2,2,5,4,2}\u3002\u7531\u4e8e\u6570\u5b572\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e865\u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa2\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa0\u3002 import java.util.HashMap; public class Solution { public int MoreThanHalfNum_Solution(int [] array) { HashMap<Integer,Integer> map = new HashMap<>(); for(int i=0; i<array.length; i++){ if(map.get(array[i])!=null){ map.put(array[i], map.get(array[i])+1); }else{ map.put(array[i], 1); } } for(Integer k: map.keySet()){ if(map.get(k) > array.length/2){ return k; } } return 0; } }","title":"28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"code_offer/java21-30/#29-k","text":"\u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684K\u4e2a\u6570\u3002\u4f8b\u5982\u8f93\u51654,5,1,6,2,7,3,8\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1,2,3,4,\u3002 import java.util.ArrayList; public class Solution { public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) { ArrayList<Integer> list = new ArrayList<>(); if(input.length == 0){ return list; } heapSort(list, input, input.length, k); return list; } public void heapSort(ArrayList<Integer> list, int[] input, int len, int k){ if(len > input.length-k && k <= input.length){ int temp; int index = len/2-1; for(int i=index; i>-1; i--){ int remain_i = i; boolean exchange_flag = false; int min_index = -1; if(i*2+2 < len){ min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2; }else{ min_index = i*2+1; } if(input[i] > input[min_index]){ exchange_flag = true; temp = input[i];//exchange input[i] = input[min_index]; input[min_index] = temp; } while(exchange_flag == true){ i = min_index; if(i*2+2 < len){ min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2; if(input[i] > input[min_index]){ temp = input[i];//exchange input[i] = input[min_index]; input[min_index] = temp; }else{ exchange_flag = false; } }else if(i*2+1 < len){ min_index = i*2+1; if(input[i] > input[min_index]){ temp = input[i];//exchange input[i] = input[min_index]; input[min_index] = temp; }else{ exchange_flag = false; } }else{ exchange_flag = false; } } i = remain_i; } int min = input[0]; input[0] = input[len-1]; input[len-1] = min; list.add(min); heapSort(list,input,len-1,k); } } }","title":"29 \u6700\u5c0f\u7684k\u4e2a\u6570"},{"location":"code_offer/java21-30/#30","text":"HZ\u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002\u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e,\u4ed6\u53c8\u53d1\u8bdd\u4e86:\u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d,\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c,\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019,\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002\u4f46\u662f,\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570,\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570,\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f\u4f8b\u5982:{6,-3,-2,7,-15,1,2,2},\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a8(\u4ece\u7b2c0\u4e2a\u5f00\u59cb,\u5230\u7b2c3\u4e2a\u4e3a\u6b62)\u3002\u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f(\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f1) public class Solution { public int FindGreatestSumOfSubArray(int[] array) { int max = 0; for(int i=0; i<array.length; i++){ if(array[i]<0){ continue; } int sum = array[i]; int neg = 0; for(int j=i-1; j>-1; j--){ System.out.println(\"j = \"+j); if(array[j]>=0){ sum += array[j]; }else{ neg = array[j]; int comple = 0; for(int k=j-1; k>-1; k--){ if(neg+array[k]<comple){ neg = neg+array[k]; }else{ comple = neg+array[k]; neg = neg+array[k]; } } sum = sum + comple; break; } } neg = 0; for(int j=i+1; j<array.length; j++){ System.out.println(\"j = \"+j); if(array[j]>=0){ sum += array[j]; }else{ neg = array[j]; int comple = 0; for(int k=j+1; k<array.length; k++){ if(neg+array[k]<comple){ neg = neg+array[k]; }else{ comple = neg+array[k]; neg = neg+array[k]; } } sum = sum + comple; break; } } if(sum > max){ max = sum; } } if(max == 0){ max = array[0]; for(int i=1; i<array.length; i++){ if(array[i]>max){ max = array[i]; } } } return max; } }","title":"30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"code_offer/java31-40/","text":"31 \u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff09 \u6c42\u51fa1~13\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570,\u5e76\u7b97\u51fa100~1300\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff1f\u4e3a\u6b64\u4ed6\u7279\u522b\u6570\u4e86\u4e00\u4e0b1~13\u4e2d\u5305\u542b1\u7684\u6570\u5b57\u67091\u300110\u300111\u300112\u300113\u56e0\u6b64\u5171\u51fa\u73b06\u6b21,\u4f46\u662f\u5bf9\u4e8e\u540e\u9762\u95ee\u9898\u4ed6\u5c31\u6ca1\u8f99\u4e86\u3002ACMer\u5e0c\u671b\u4f60\u4eec\u5e2e\u5e2e\u4ed6,\u5e76\u628a\u95ee\u9898\u66f4\u52a0\u666e\u904d\u5316,\u53ef\u4ee5\u5f88\u5feb\u7684\u6c42\u51fa\u4efb\u610f\u975e\u8d1f\u6574\u6570\u533a\u95f4\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece1 \u5230 n \u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff09\u3002 public class Solution { public int NumberOf1Between1AndN_Solution(int n) { int sum = 0; int count = 0; for(int i=1; i<=n; i++){ String s = String.valueOf(i); char[] chars = s.toCharArray(); for(int j=0; j<chars.length; j++){ if(chars[j] == '1'){ ++count; } } } return count; } } 32 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\u8f93\u5165\u6570\u7ec4{3\uff0c32\uff0c321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a321323\u3002 import java.util.ArrayList; public class Solution { public String PrintMinNumber(int [] numbers) { String s = \"\"; if(numbers.length==0){return s;} String[] arr = new String[numbers.length]; for(int i=0; i<numbers.length; i++){ arr[i] = String.valueOf(numbers[i]); } mergeSort(arr, 0, arr.length); for(int i=0; i<arr.length; i++){ s += arr[i]; } return s; } public void mergeSort(String[] arr, int start, int end){ if(end-start > 1){ int new_start = start; int new_end = end; mergeSort(arr, new_start, (new_end-new_start+1)/2+new_start); mergeSort(arr, (new_end-new_start+1)/2+new_start, new_end); int front_index = start; int back_index = (end-start+1)/2+start; while(back_index != end && back_index != front_index){ if(isBigger(arr[front_index], arr[back_index])){ String temp = arr[back_index]; for(int i=back_index; i>front_index; i--){ arr[i] = arr[i-1]; } arr[front_index] = temp; ++back_index; ++front_index; }else{ ++front_index; } } } } public boolean isBigger(String s1, String s2){ boolean big_flag = false; int longer_len = s1.length(); if(s2.length() > longer_len){longer_len = s2.length();} for(int i=0; i<longer_len; i++){ if(s1.charAt(i % s1.length()) > s2.charAt(i % s2.length())){ big_flag = true; }else if(s1.charAt(i % s1.length()) < s2.charAt(i % s2.length())){ } } return big_flag; } } 33 \u4e11\u6570 \u628a\u53ea\u5305\u542b\u8d28\u56e0\u5b502\u30013\u548c5\u7684\u6570\u79f0\u4f5c\u4e11\u6570\uff08Ugly Number\uff09\u3002\u4f8b\u59826\u30018\u90fd\u662f\u4e11\u6570\uff0c\u4f4614\u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u8d28\u56e0\u5b507\u3002 \u4e60\u60ef\u4e0a\u6211\u4eec\u628a1\u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002\u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2cN\u4e2a\u4e11\u6570\u3002 import java.util.ArrayList; import java.util.LinkedList; import java.util.Queue; public class Solution { public int GetUglyNumber_Solution(int index) { if(index == 0){return 0;} else if(index == 1){return 1;} int[] arr = new int[index]; Queue<Integer> q2 = new LinkedList<>(); Queue<Integer> q3 = new LinkedList<>(); Queue<Integer> q5 = new LinkedList<>(); q2.offer(2); q3.offer(3); q5.offer(5); for(int i=1; i<index; i++){ int min = Math.min(q2.element(),Math.min(q3.element(), q5.element())); if(q2.element() == min){q2.poll();} if(q3.element() == min){q3.poll();} if(q5.element() == min){q5.poll();} arr[i] = min; q2.offer(min * 2); q3.offer(min * 3); q5.offer(min * 5); } return arr[index-1]; } } 34 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 \u5728\u4e00\u4e2a\u5b57\u7b26\u4e32(0<=\u5b57\u7b26\u4e32\u957f\u5ea6<=10000\uff0c\u5168\u90e8\u7531\u5b57\u6bcd\u7ec4\u6210)\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26,\u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e, \u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56de -1\uff08\u9700\u8981\u533a\u5206\u5927\u5c0f\u5199\uff09. import java.util.ArrayList; import java.util.HashMap; public class Solution { public class Element{ int first_index; int count; public Element(int index){ first_index = index; count = 1; } public void add(){ count = count+1; } } public int FirstNotRepeatingChar(String str) { char[] chars = str.toCharArray(); HashMap<Character, Element> map = new HashMap<>(); ArrayList<Character> char_order = new ArrayList<>(); for(int i=0; i<chars.length; i++){ if(map.get(chars[i]) == null){ Element e = new Element(i); map.put(chars[i], e); char_order.add(chars[i]); }else{ map.get(chars[i]).add(); } } for(int i=0; i<char_order.size(); i++){ if(map.get(char_order.get(i)).count == 1){ return map.get(char_order.get(i)).first_index; } } return -1; } } 35 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4,\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570P\u3002\u5e76\u5c06P\u5bf91000000007\u53d6\u6a21\u7684\u7ed3\u679c\u8f93\u51fa\u3002 \u5373\u8f93\u51faP%1000000007 \u8f93\u5165\u63cf\u8ff0: \u9898\u76ee\u4fdd\u8bc1\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u6ca1\u6709\u7684\u76f8\u540c\u7684\u6570\u5b57 \u6570\u636e\u8303\u56f4\uff1a \u5bf9\u4e8e%50\u7684\u6570\u636e,size<=10^4 \u5bf9\u4e8e%75\u7684\u6570\u636e,size<=10^5 \u5bf9\u4e8e%100\u7684\u6570\u636e,size<=2*10^5 public class Solution { long count = 0; public int InversePairs(int [] array) { mergeSort(array, 0, array.length); return (int)(count % 1000000007); } public void mergeSort(int[] arr, int start, int end){ if(end-start > 1){ mergeSort(arr, start, (end-start+1)/2+start); mergeSort(arr, (end-start+1)/2+start, end); int front_index = start; int back_index = (end-start+1)/2+start; int[] temp_arr = new int[end-start]; int temp_i = 0; while(back_index != end && front_index != (end-start+1)/2+start){ if(arr[back_index] < arr[front_index]){ temp_arr[temp_i] = arr[back_index]; count = count + back_index - start - temp_i; ++back_index; }else{ temp_arr[temp_i] = arr[front_index]; ++front_index; } ++temp_i; } if(back_index!=end) { for(--temp_i; temp_i>-1;temp_i--){ arr[temp_i+start] = temp_arr[temp_i]; } }else{ for(; temp_i<(end-start); temp_i++) { temp_arr[temp_i] = arr[front_index]; ++front_index; } for(int i=0; i<temp_arr.length; i++){ arr[i+start] = temp_arr[i]; } } } } } 36 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 \u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 import java.util.Stack; public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { ListNode target = null; Stack<ListNode> s1 = new Stack<>(); Stack<ListNode> s2 = new Stack<>(); while(pHead1!=null){ s1.push(pHead1); pHead1 = pHead1.next; } while(pHead2!=null){ s2.push(pHead2); pHead2 = pHead2.next; } while(!s1.empty() && !s2.empty()){ if(s1.peek() == s2.peek()){ target = s1.peek(); s1.pop(); s2.pop(); }else{ return target; } } return target; } } 37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 public class Solution { public int GetNumberOfK(int [] array , int k) { if(array.length==0){ return 0; } int count = 0; int start = 0; int end = array.length-1; while(end-start >= 0){ int mid = (start + end)/2; if(array[mid] > k){ end = mid-1; }else if(array[mid] < k){ start = mid+1; }else{ ++count; for(int i=mid-1; i>-1; i--){ if(array[i] == k){ ++count; }else{ break; } } for(int i=mid+1; i<array.length; i++){ if(array[i] == k){ ++count; }else{ break; } } break; } } return count; } } 38 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 public class Solution { public int TreeDepth(TreeNode root) { if(root==null){ return 0; }else{ int left_depth = TreeDepth(root.left); int right_depth = TreeDepth(root.right); return left_depth >= right_depth ? left_depth+1 : right_depth+1; } } } 39 \u5e73\u8861\u4e8c\u53c9\u6811 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8be5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 public class Solution { boolean flag = true; public boolean IsBalanced_Solution(TreeNode root) { get_depth(root); return flag; } public int get_depth(TreeNode root){ if(root == null){ return 0; }else{ int left_d = get_depth(root.left); int right_d = get_depth(root.right); if(left_d-right_d!=-1 && left_d-right_d!=1 && left_d-right_d!=0){ flag = false; } return left_d >= right_d ? left_d+1 : right_d+1; } } } 40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u6570\u5b57 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\u3002\u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 //num1,num2\u5206\u522b\u4e3a\u957f\u5ea6\u4e3a1\u7684\u6570\u7ec4\u3002\u4f20\u51fa\u53c2\u6570 //\u5c06num1[0],num2[0]\u8bbe\u7f6e\u4e3a\u8fd4\u56de\u7ed3\u679c public class Solution { public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) { if(array.length == 2){ num1[0] = array[0]; num2[0] = array[0]; }else{ int n = array[0]; for(int i=1; i<array.length; i++){ n = n ^ array[i]; } int first1_index = 0; while((n&1) == 0 && first1_index < 32){ n = n >> 1; ++first1_index; } num1[0] = 0; num2[0] = 0; for(int i=0; i<array.length; i++) { if (((array[i] >> first1_index) & 1) == 0) { num1[0] = num1[0] ^ array[i]; } else { num2[0] = num2[0] ^ array[i]; } } } } }","title":"Java 31-40"},{"location":"code_offer/java31-40/#31-11n1","text":"\u6c42\u51fa1~13\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570,\u5e76\u7b97\u51fa100~1300\u7684\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff1f\u4e3a\u6b64\u4ed6\u7279\u522b\u6570\u4e86\u4e00\u4e0b1~13\u4e2d\u5305\u542b1\u7684\u6570\u5b57\u67091\u300110\u300111\u300112\u300113\u56e0\u6b64\u5171\u51fa\u73b06\u6b21,\u4f46\u662f\u5bf9\u4e8e\u540e\u9762\u95ee\u9898\u4ed6\u5c31\u6ca1\u8f99\u4e86\u3002ACMer\u5e0c\u671b\u4f60\u4eec\u5e2e\u5e2e\u4ed6,\u5e76\u628a\u95ee\u9898\u66f4\u52a0\u666e\u904d\u5316,\u53ef\u4ee5\u5f88\u5feb\u7684\u6c42\u51fa\u4efb\u610f\u975e\u8d1f\u6574\u6570\u533a\u95f4\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece1 \u5230 n \u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff09\u3002 public class Solution { public int NumberOf1Between1AndN_Solution(int n) { int sum = 0; int count = 0; for(int i=1; i<=n; i++){ String s = String.valueOf(i); char[] chars = s.toCharArray(); for(int j=0; j<chars.length; j++){ if(chars[j] == '1'){ ++count; } } } return count; } }","title":"31 \u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff08\u4ece1\u5230n\u6574\u6570\u4e2d1\u51fa\u73b0\u7684\u6b21\u6570\uff09"},{"location":"code_offer/java31-40/#32","text":"\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\u8f93\u5165\u6570\u7ec4{3\uff0c32\uff0c321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a321323\u3002 import java.util.ArrayList; public class Solution { public String PrintMinNumber(int [] numbers) { String s = \"\"; if(numbers.length==0){return s;} String[] arr = new String[numbers.length]; for(int i=0; i<numbers.length; i++){ arr[i] = String.valueOf(numbers[i]); } mergeSort(arr, 0, arr.length); for(int i=0; i<arr.length; i++){ s += arr[i]; } return s; } public void mergeSort(String[] arr, int start, int end){ if(end-start > 1){ int new_start = start; int new_end = end; mergeSort(arr, new_start, (new_end-new_start+1)/2+new_start); mergeSort(arr, (new_end-new_start+1)/2+new_start, new_end); int front_index = start; int back_index = (end-start+1)/2+start; while(back_index != end && back_index != front_index){ if(isBigger(arr[front_index], arr[back_index])){ String temp = arr[back_index]; for(int i=back_index; i>front_index; i--){ arr[i] = arr[i-1]; } arr[front_index] = temp; ++back_index; ++front_index; }else{ ++front_index; } } } } public boolean isBigger(String s1, String s2){ boolean big_flag = false; int longer_len = s1.length(); if(s2.length() > longer_len){longer_len = s2.length();} for(int i=0; i<longer_len; i++){ if(s1.charAt(i % s1.length()) > s2.charAt(i % s2.length())){ big_flag = true; }else if(s1.charAt(i % s1.length()) < s2.charAt(i % s2.length())){ } } return big_flag; } }","title":"32 \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"code_offer/java31-40/#33","text":"\u628a\u53ea\u5305\u542b\u8d28\u56e0\u5b502\u30013\u548c5\u7684\u6570\u79f0\u4f5c\u4e11\u6570\uff08Ugly Number\uff09\u3002\u4f8b\u59826\u30018\u90fd\u662f\u4e11\u6570\uff0c\u4f4614\u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u8d28\u56e0\u5b507\u3002 \u4e60\u60ef\u4e0a\u6211\u4eec\u628a1\u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002\u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2cN\u4e2a\u4e11\u6570\u3002 import java.util.ArrayList; import java.util.LinkedList; import java.util.Queue; public class Solution { public int GetUglyNumber_Solution(int index) { if(index == 0){return 0;} else if(index == 1){return 1;} int[] arr = new int[index]; Queue<Integer> q2 = new LinkedList<>(); Queue<Integer> q3 = new LinkedList<>(); Queue<Integer> q5 = new LinkedList<>(); q2.offer(2); q3.offer(3); q5.offer(5); for(int i=1; i<index; i++){ int min = Math.min(q2.element(),Math.min(q3.element(), q5.element())); if(q2.element() == min){q2.poll();} if(q3.element() == min){q3.poll();} if(q5.element() == min){q5.poll();} arr[i] = min; q2.offer(min * 2); q3.offer(min * 3); q5.offer(min * 5); } return arr[index-1]; } }","title":"33 \u4e11\u6570"},{"location":"code_offer/java31-40/#34","text":"\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32(0<=\u5b57\u7b26\u4e32\u957f\u5ea6<=10000\uff0c\u5168\u90e8\u7531\u5b57\u6bcd\u7ec4\u6210)\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26,\u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e, \u5982\u679c\u6ca1\u6709\u5219\u8fd4\u56de -1\uff08\u9700\u8981\u533a\u5206\u5927\u5c0f\u5199\uff09. import java.util.ArrayList; import java.util.HashMap; public class Solution { public class Element{ int first_index; int count; public Element(int index){ first_index = index; count = 1; } public void add(){ count = count+1; } } public int FirstNotRepeatingChar(String str) { char[] chars = str.toCharArray(); HashMap<Character, Element> map = new HashMap<>(); ArrayList<Character> char_order = new ArrayList<>(); for(int i=0; i<chars.length; i++){ if(map.get(chars[i]) == null){ Element e = new Element(i); map.put(chars[i], e); char_order.add(chars[i]); }else{ map.get(chars[i]).add(); } } for(int i=0; i<char_order.size(); i++){ if(map.get(char_order.get(i)).count == 1){ return map.get(char_order.get(i)).first_index; } } return -1; } }","title":"34 \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26"},{"location":"code_offer/java31-40/#35","text":"\u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4,\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570P\u3002\u5e76\u5c06P\u5bf91000000007\u53d6\u6a21\u7684\u7ed3\u679c\u8f93\u51fa\u3002 \u5373\u8f93\u51faP%1000000007 \u8f93\u5165\u63cf\u8ff0: \u9898\u76ee\u4fdd\u8bc1\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u6ca1\u6709\u7684\u76f8\u540c\u7684\u6570\u5b57 \u6570\u636e\u8303\u56f4\uff1a \u5bf9\u4e8e%50\u7684\u6570\u636e,size<=10^4 \u5bf9\u4e8e%75\u7684\u6570\u636e,size<=10^5 \u5bf9\u4e8e%100\u7684\u6570\u636e,size<=2*10^5 public class Solution { long count = 0; public int InversePairs(int [] array) { mergeSort(array, 0, array.length); return (int)(count % 1000000007); } public void mergeSort(int[] arr, int start, int end){ if(end-start > 1){ mergeSort(arr, start, (end-start+1)/2+start); mergeSort(arr, (end-start+1)/2+start, end); int front_index = start; int back_index = (end-start+1)/2+start; int[] temp_arr = new int[end-start]; int temp_i = 0; while(back_index != end && front_index != (end-start+1)/2+start){ if(arr[back_index] < arr[front_index]){ temp_arr[temp_i] = arr[back_index]; count = count + back_index - start - temp_i; ++back_index; }else{ temp_arr[temp_i] = arr[front_index]; ++front_index; } ++temp_i; } if(back_index!=end) { for(--temp_i; temp_i>-1;temp_i--){ arr[temp_i+start] = temp_arr[temp_i]; } }else{ for(; temp_i<(end-start); temp_i++) { temp_arr[temp_i] = arr[front_index]; ++front_index; } for(int i=0; i<temp_arr.length; i++){ arr[i+start] = temp_arr[i]; } } } } }","title":"35 \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"code_offer/java31-40/#36","text":"\u8f93\u5165\u4e24\u4e2a\u94fe\u8868\uff0c\u627e\u51fa\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9\u3002 import java.util.Stack; public class Solution { public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) { ListNode target = null; Stack<ListNode> s1 = new Stack<>(); Stack<ListNode> s2 = new Stack<>(); while(pHead1!=null){ s1.push(pHead1); pHead1 = pHead1.next; } while(pHead2!=null){ s2.push(pHead2); pHead2 = pHead2.next; } while(!s1.empty() && !s2.empty()){ if(s1.peek() == s2.peek()){ target = s1.peek(); s1.pop(); s2.pop(); }else{ return target; } } return target; } }","title":"36 \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9"},{"location":"code_offer/java31-40/#37","text":"\u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002 public class Solution { public int GetNumberOfK(int [] array , int k) { if(array.length==0){ return 0; } int count = 0; int start = 0; int end = array.length-1; while(end-start >= 0){ int mid = (start + end)/2; if(array[mid] > k){ end = mid-1; }else if(array[mid] < k){ start = mid+1; }else{ ++count; for(int i=mid-1; i>-1; i--){ if(array[i] == k){ ++count; }else{ break; } } for(int i=mid+1; i<array.length; i++){ if(array[i] == k){ ++count; }else{ break; } } break; } } return count; } }","title":"37 \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"code_offer/java31-40/#38","text":"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6c42\u8be5\u6811\u7684\u6df1\u5ea6\u3002\u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 public class Solution { public int TreeDepth(TreeNode root) { if(root==null){ return 0; }else{ int left_depth = TreeDepth(root.left); int right_depth = TreeDepth(root.right); return left_depth >= right_depth ? left_depth+1 : right_depth+1; } } }","title":"38 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"code_offer/java31-40/#39","text":"\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u8be5\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002 public class Solution { boolean flag = true; public boolean IsBalanced_Solution(TreeNode root) { get_depth(root); return flag; } public int get_depth(TreeNode root){ if(root == null){ return 0; }else{ int left_d = get_depth(root.left); int right_d = get_depth(root.right); if(left_d-right_d!=-1 && left_d-right_d!=1 && left_d-right_d!=0){ flag = false; } return left_d >= right_d ? left_d+1 : right_d+1; } } }","title":"39 \u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"code_offer/java31-40/#40","text":"\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u5076\u6570\u6b21\u3002\u8bf7\u5199\u7a0b\u5e8f\u627e\u51fa\u8fd9\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002 //num1,num2\u5206\u522b\u4e3a\u957f\u5ea6\u4e3a1\u7684\u6570\u7ec4\u3002\u4f20\u51fa\u53c2\u6570 //\u5c06num1[0],num2[0]\u8bbe\u7f6e\u4e3a\u8fd4\u56de\u7ed3\u679c public class Solution { public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) { if(array.length == 2){ num1[0] = array[0]; num2[0] = array[0]; }else{ int n = array[0]; for(int i=1; i<array.length; i++){ n = n ^ array[i]; } int first1_index = 0; while((n&1) == 0 && first1_index < 32){ n = n >> 1; ++first1_index; } num1[0] = 0; num2[0] = 0; for(int i=0; i<array.length; i++) { if (((array[i] >> first1_index) & 1) == 0) { num1[0] = num1[0] ^ array[i]; } else { num2[0] = num2[0] ^ array[i]; } } } } }","title":"40 \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"code_offer/java41-50/","text":"41 \u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 \u5c0f\u660e\u5f88\u559c\u6b22\u6570\u5b66,\u6709\u4e00\u5929\u4ed6\u5728\u505a\u6570\u5b66\u4f5c\u4e1a\u65f6,\u8981\u6c42\u8ba1\u7b97\u51fa9~16\u7684\u548c,\u4ed6\u9a6c\u4e0a\u5c31\u5199\u51fa\u4e86\u6b63\u786e\u7b54\u6848\u662f100\u3002\u4f46\u662f\u4ed6\u5e76\u4e0d\u6ee1\u8db3\u4e8e\u6b64,\u4ed6\u5728\u60f3\u7a76\u7adf\u6709\u591a\u5c11\u79cd\u8fde\u7eed\u7684\u6b63\u6570\u5e8f\u5217\u7684\u548c\u4e3a100(\u81f3\u5c11\u5305\u62ec\u4e24\u4e2a\u6570)\u3002\u6ca1\u591a\u4e45,\u4ed6\u5c31\u5f97\u5230\u53e6\u4e00\u7ec4\u8fde\u7eed\u6b63\u6570\u548c\u4e3a100\u7684\u5e8f\u5217:18,19,20,21,22\u3002\u73b0\u5728\u628a\u95ee\u9898\u4ea4\u7ed9\u4f60,\u4f60\u80fd\u4e0d\u80fd\u4e5f\u5f88\u5feb\u7684\u627e\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217? Good Luck! \u8f93\u51fa\u63cf\u8ff0: \u8f93\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002\u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f import java.util.ArrayList; public class Solution { public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); for(int i=(sum+1)/2; i>=2; i--){ if(i%2==0 && sum%i==i/2 && sum/i>(i/2-1)){ ArrayList<Integer> list = new ArrayList<>(); for(int j=0; j<i; j++){list.add(j+sum/i-i/2+1);} final_list.add(list); }else if(i%2==1 && sum%i==0 && sum/i>(i/2)){ ArrayList<Integer> list = new ArrayList<>(); for(int j=0; j<i; j++){list.add(j+sum/i-i/2);} final_list.add(list); } } return final_list; } } 42 \u548c\u4e3aS\u7684\u4e24\u4e2a\u6570\u5b57 \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662fS\uff0c\u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8eS\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002 \u8f93\u51fa\u63cf\u8ff0: \u5bf9\u5e94\u6bcf\u4e2a\u6d4b\u8bd5\u6848\u4f8b\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\uff0c\u5c0f\u7684\u5148\u8f93\u51fa\u3002 import java.util.ArrayList; public class Solution { public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) { ArrayList<Integer> list = new ArrayList<>(); int i = 0; int j = array.length-1; while(i <= j){ if(array[i] + array[j] == sum){ list.add(array[i]); list.add(array[j]); break; }else if (array[i] + array[j] > sum){ --j; }else{ i++; } } return list; } } 43 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 \u6c47\u7f16\u8bed\u8a00\u4e2d\u6709\u4e00\u79cd\u79fb\u4f4d\u6307\u4ee4\u53eb\u505a\u5faa\u73af\u5de6\u79fb\uff08ROL\uff09\uff0c\u73b0\u5728\u6709\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u7528\u5b57\u7b26\u4e32\u6a21\u62df\u8fd9\u4e2a\u6307\u4ee4\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217S\uff0c\u8bf7\u4f60\u628a\u5176\u5faa\u73af\u5de6\u79fbK\u4f4d\u540e\u7684\u5e8f\u5217\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u5e8f\u5217S=\u201dabcXYZdef\u201d,\u8981\u6c42\u8f93\u51fa\u5faa\u73af\u5de6\u79fb3\u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5373\u201cXYZdefabc\u201d\u3002\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1fOK\uff0c\u641e\u5b9a\u5b83\uff01 public class Solution { public String LeftRotateString(String str,int n) { if(str.length() == 0 || str.length() == 1){ return str; }else{ n = n%str.length(); String front = str.substring(n); String back = str.substring(0,n); return front+back; } } } 44 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217 \u725b\u5ba2\u6700\u8fd1\u6765\u4e86\u4e00\u4e2a\u65b0\u5458\u5de5Fish\uff0c\u6bcf\u5929\u65e9\u6668\u603b\u662f\u4f1a\u62ff\u7740\u4e00\u672c\u82f1\u6587\u6742\u5fd7\uff0c\u5199\u4e9b\u53e5\u5b50\u5728\u672c\u5b50\u4e0a\u3002\u540c\u4e8bCat\u5bf9Fish\u5199\u7684\u5185\u5bb9\u9887\u611f\u5174\u8da3\uff0c\u6709\u4e00\u5929\u4ed6\u5411Fish\u501f\u6765\u7ffb\u770b\uff0c\u4f46\u5374\u8bfb\u4e0d\u61c2\u5b83\u7684\u610f\u601d\u3002\u4f8b\u5982\uff0c\u201cstudent. a am I\u201d\u3002\u540e\u6765\u624d\u610f\u8bc6\u5230\uff0c\u8fd9\u5bb6\u4f19\u539f\u6765\u628a\u53e5\u5b50\u5355\u8bcd\u7684\u987a\u5e8f\u7ffb\u8f6c\u4e86\uff0c\u6b63\u786e\u7684\u53e5\u5b50\u5e94\u8be5\u662f\u201cI am a student.\u201d\u3002Cat\u5bf9\u4e00\u4e00\u7684\u7ffb\u8f6c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u53ef\u4e0d\u5728\u884c\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4e48\uff1f public class Solution { public String ReverseSentence(String str) { String[] arr = str.split(\" \"); if(arr.length == 0){ return str; } String s = \"\"; for(int i=arr.length-1; i>-1; i--){ if(i == arr.length-1){ s = arr[i]; }else{ s = s + \" \" + arr[i]; } } System.out.println(\"s=>\"+s+\"_\"); return s; } } 45 \u6251\u514b\u724c\u987a\u5b50 LL\u4eca\u5929\u5fc3\u60c5\u7279\u522b\u597d,\u56e0\u4e3a\u4ed6\u53bb\u4e70\u4e86\u4e00\u526f\u6251\u514b\u724c,\u53d1\u73b0\u91cc\u9762\u5c45\u7136\u67092\u4e2a\u5927\u738b,2\u4e2a\u5c0f\u738b(\u4e00\u526f\u724c\u539f\u672c\u662f54\u5f20^_^)...\u4ed6\u968f\u673a\u4ece\u4e2d\u62bd\u51fa\u4e865\u5f20\u724c,\u60f3\u6d4b\u6d4b\u81ea\u5df1\u7684\u624b\u6c14,\u770b\u770b\u80fd\u4e0d\u80fd\u62bd\u5230\u987a\u5b50,\u5982\u679c\u62bd\u5230\u7684\u8bdd,\u4ed6\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968,\u563f\u563f\uff01\uff01\u201c\u7ea2\u5fc3A,\u9ed1\u68433,\u5c0f\u738b,\u5927\u738b,\u65b9\u72475\u201d,\u201cOh My God!\u201d\u4e0d\u662f\u987a\u5b50.....LL\u4e0d\u9ad8\u5174\u4e86,\u4ed6\u60f3\u4e86\u60f3,\u51b3\u5b9a\u5927\\\u5c0f \u738b\u53ef\u4ee5\u770b\u6210\u4efb\u4f55\u6570\u5b57,\u5e76\u4e14A\u770b\u4f5c1,J\u4e3a11,Q\u4e3a12,K\u4e3a13\u3002\u4e0a\u9762\u76845\u5f20\u724c\u5c31\u53ef\u4ee5\u53d8\u6210\u201c1,2,3,4,5\u201d(\u5927\u5c0f\u738b\u5206\u522b\u770b\u4f5c2\u548c4),\u201cSo Lucky!\u201d\u3002LL\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\u5566\u3002 \u73b0\u5728,\u8981\u6c42\u4f60\u4f7f\u7528\u8fd9\u5e45\u724c\u6a21\u62df\u4e0a\u9762\u7684\u8fc7\u7a0b,\u7136\u540e\u544a\u8bc9\u6211\u4eecLL\u7684\u8fd0\u6c14\u5982\u4f55\uff0c \u5982\u679c\u724c\u80fd\u7ec4\u6210\u987a\u5b50\u5c31\u8f93\u51fatrue\uff0c\u5426\u5219\u5c31\u8f93\u51fafalse\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1,\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5927\u5c0f\u738b\u662f0\u3002 import java.util.ArrayList; import java.util.Collections; public class Solution { public boolean isContinuous(int [] numbers) { if(numbers.length!=5){ return false; }else{ int count_0 = 0; int vacancy = 0; ArrayList<Integer> list = new ArrayList<>(); for(int i=0; i<numbers.length; i++){ if(numbers[i] != 0){ list.add(numbers[i]); }else{ ++count_0; } } Collections.sort(list); for(int i=1; i<list.size(); i++){ if(list.get(i)-list.get(i-1) > 1){ vacancy += list.get(i) - list.get(i-1)-1; }else if(list.get(i)-list.get(i-1) == 0){ return false; } } if(vacancy>count_0){return false;} else{return true;} } } } 46 \u5b69\u5b50\u4eec\u7684\u6e38\u620f(\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6811) \u6bcf\u5e74\u516d\u4e00\u513f\u7ae5\u8282,\u725b\u5ba2\u90fd\u4f1a\u51c6\u5907\u4e00\u4e9b\u5c0f\u793c\u7269\u53bb\u770b\u671b\u5b64\u513f\u9662\u7684\u5c0f\u670b\u53cb,\u4eca\u5e74\u4ea6\u662f\u5982\u6b64\u3002HF\u4f5c\u4e3a\u725b\u5ba2\u7684\u8d44\u6df1\u5143\u8001,\u81ea\u7136\u4e5f\u51c6\u5907\u4e86\u4e00\u4e9b\u5c0f\u6e38\u620f\u3002\u5176\u4e2d,\u6709\u4e2a\u6e38\u620f\u662f\u8fd9\u6837\u7684:\u9996\u5148,\u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e,\u4ed6\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570m,\u8ba9\u7f16\u53f7\u4e3a0\u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002\u6bcf\u6b21\u558a\u5230m-1\u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c,\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269,\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d,\u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb,\u7ee7\u7eed0...m-1\u62a5\u6570....\u8fd9\u6837\u4e0b\u53bb....\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb,\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14,\u5e76\u4e14\u62ff\u5230\u725b\u5ba2\u540d\u8d35\u7684\u201c\u540d\u4fa6\u63a2\u67ef\u5357\u201d\u5178\u85cf\u7248(\u540d\u989d\u6709\u9650\u54e6!!^_^)\u3002\u8bf7\u4f60\u8bd5\u7740\u60f3\u4e0b,\u54ea\u4e2a\u5c0f\u670b\u53cb\u4f1a\u5f97\u5230\u8fd9\u4efd\u793c\u54c1\u5462\uff1f(\u6ce8\uff1a\u5c0f\u670b\u53cb\u7684\u7f16\u53f7\u662f\u4ece0\u5230n-1) import java.util.LinkedList; public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0){return -1;} else if(n == 1){return 0;} LinkedList<Integer> list = new LinkedList<>(); for(int i=0; i<n; i++){ list.add(i); } int current_index = 0; while(list.size()>1){ current_index = (current_index + m -1) % list.size(); list.remove(current_index); } return(list.get(0)); } } 47 \u6c421+2+3+...+n \u6c421+2+3+...+n\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case\u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002 public class Solution { public int Sum_Solution(int n) { int sum = n; boolean flag = (sum>0) && ((sum += Sum_Solution(n-1))>0); return sum; } } 48 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528+\u3001-\u3001*\u3001/\u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 public class Solution { public int Add(int num1,int num2) { while(num2 != 0){ int xor = num1 ^ num2; int and = (num1 & num2) << 1; num1 = xor; num2 = and; } return num1; } } 49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570(\u5b9e\u73b0Integer.valueOf(string)\u7684\u529f\u80fd\uff0c\u4f46\u662fstring\u4e0d\u7b26\u5408\u6570\u5b57\u8981\u6c42\u65f6\u8fd4\u56de0)\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 \u6570\u503c\u4e3a0\u6216\u8005\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de0\u3002 \u8f93\u5165\u63cf\u8ff0: \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u5305\u62ec\u6570\u5b57\u5b57\u6bcd\u7b26\u53f7,\u53ef\u4ee5\u4e3a\u7a7a \u8f93\u51fa\u63cf\u8ff0: \u5982\u679c\u662f\u5408\u6cd5\u7684\u6570\u503c\u8868\u8fbe\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u8fd4\u56de0 \u793a\u4f8b \u8f93\u5165 +2147483647 1a33 \u8f93\u51fa 2147483647 0 import java.util.ArrayList; public class Solution { public int StrToInt(String str) { if(str.length() == 0){return 0;} char[] chars = str.toCharArray(); boolean neg = false; int index = 0; if(chars[0]=='-'){ index = 1; neg = true; }else if(chars[0]=='+'){ index = 1; } if(index>=chars.length){return 0;} while(chars[index] < '1' || chars[index] > '9'){ if(chars[index] == '0' && index+1<chars.length){ ++index; }else{ return 0; } } ArrayList<Integer> num_list = new ArrayList<>(); for(int i=index; i<chars.length; i++){ if(chars[i] < '0' || chars[i] > '9'){ return 0; }else{ num_list.add(chars[i]-48); System.out.println(chars[i]-48); } } int sum = 0; for(int i=0; i<num_list.size(); i++){ if(neg){ sum -= num_list.get(i)*Math.pow(10,(num_list.size()-1-i)); }else{ sum += num_list.get(i)*Math.pow(10,(num_list.size()-1-i)); } } return sum; } } 50 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 public class Solution { // Parameters: // numbers: an array of integers // length: the length of array numbers // duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation; // Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++ // \u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f~\u8fd4\u56de\u4efb\u610f\u91cd\u590d\u7684\u4e00\u4e2a\uff0c\u8d4b\u503cduplication[0] // Return value: true if the input is valid, and there are some duplications in the array number // otherwise false public boolean duplicate(int numbers[],int length,int [] duplication) { if(length == 0){ duplication[0] = -1; return false; } boolean[] arr = new boolean[length]; for(boolean b: arr){b=false;} for(int i=0; i<numbers.length; i++){ if(arr[numbers[i]] == false){ arr[numbers[i]] = true; }else{ duplication[0] = numbers[i]; return true; } } return false; } }","title":"Java 41-50"},{"location":"code_offer/java41-50/#41-s","text":"\u5c0f\u660e\u5f88\u559c\u6b22\u6570\u5b66,\u6709\u4e00\u5929\u4ed6\u5728\u505a\u6570\u5b66\u4f5c\u4e1a\u65f6,\u8981\u6c42\u8ba1\u7b97\u51fa9~16\u7684\u548c,\u4ed6\u9a6c\u4e0a\u5c31\u5199\u51fa\u4e86\u6b63\u786e\u7b54\u6848\u662f100\u3002\u4f46\u662f\u4ed6\u5e76\u4e0d\u6ee1\u8db3\u4e8e\u6b64,\u4ed6\u5728\u60f3\u7a76\u7adf\u6709\u591a\u5c11\u79cd\u8fde\u7eed\u7684\u6b63\u6570\u5e8f\u5217\u7684\u548c\u4e3a100(\u81f3\u5c11\u5305\u62ec\u4e24\u4e2a\u6570)\u3002\u6ca1\u591a\u4e45,\u4ed6\u5c31\u5f97\u5230\u53e6\u4e00\u7ec4\u8fde\u7eed\u6b63\u6570\u548c\u4e3a100\u7684\u5e8f\u5217:18,19,20,21,22\u3002\u73b0\u5728\u628a\u95ee\u9898\u4ea4\u7ed9\u4f60,\u4f60\u80fd\u4e0d\u80fd\u4e5f\u5f88\u5feb\u7684\u627e\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217? Good Luck! \u8f93\u51fa\u63cf\u8ff0: \u8f93\u51fa\u6240\u6709\u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002\u5e8f\u5217\u5185\u6309\u7167\u4ece\u5c0f\u81f3\u5927\u7684\u987a\u5e8f\uff0c\u5e8f\u5217\u95f4\u6309\u7167\u5f00\u59cb\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f import java.util.ArrayList; public class Solution { public ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); for(int i=(sum+1)/2; i>=2; i--){ if(i%2==0 && sum%i==i/2 && sum/i>(i/2-1)){ ArrayList<Integer> list = new ArrayList<>(); for(int j=0; j<i; j++){list.add(j+sum/i-i/2+1);} final_list.add(list); }else if(i%2==1 && sum%i==0 && sum/i>(i/2)){ ArrayList<Integer> list = new ArrayList<>(); for(int j=0; j<i; j++){list.add(j+sum/i-i/2);} final_list.add(list); } } return final_list; } }","title":"41 \u548c\u4e3aS\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"code_offer/java41-50/#42-s","text":"\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662fS\uff0c\u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8eS\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002 \u8f93\u51fa\u63cf\u8ff0: \u5bf9\u5e94\u6bcf\u4e2a\u6d4b\u8bd5\u6848\u4f8b\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\uff0c\u5c0f\u7684\u5148\u8f93\u51fa\u3002 import java.util.ArrayList; public class Solution { public ArrayList<Integer> FindNumbersWithSum(int [] array,int sum) { ArrayList<Integer> list = new ArrayList<>(); int i = 0; int j = array.length-1; while(i <= j){ if(array[i] + array[j] == sum){ list.add(array[i]); list.add(array[j]); break; }else if (array[i] + array[j] > sum){ --j; }else{ i++; } } return list; } }","title":"42 \u548c\u4e3aS\u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"code_offer/java41-50/#43","text":"\u6c47\u7f16\u8bed\u8a00\u4e2d\u6709\u4e00\u79cd\u79fb\u4f4d\u6307\u4ee4\u53eb\u505a\u5faa\u73af\u5de6\u79fb\uff08ROL\uff09\uff0c\u73b0\u5728\u6709\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u7528\u5b57\u7b26\u4e32\u6a21\u62df\u8fd9\u4e2a\u6307\u4ee4\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217S\uff0c\u8bf7\u4f60\u628a\u5176\u5faa\u73af\u5de6\u79fbK\u4f4d\u540e\u7684\u5e8f\u5217\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u5e8f\u5217S=\u201dabcXYZdef\u201d,\u8981\u6c42\u8f93\u51fa\u5faa\u73af\u5de6\u79fb3\u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5373\u201cXYZdefabc\u201d\u3002\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1fOK\uff0c\u641e\u5b9a\u5b83\uff01 public class Solution { public String LeftRotateString(String str,int n) { if(str.length() == 0 || str.length() == 1){ return str; }else{ n = n%str.length(); String front = str.substring(n); String back = str.substring(0,n); return front+back; } } }","title":"43 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"code_offer/java41-50/#44","text":"\u725b\u5ba2\u6700\u8fd1\u6765\u4e86\u4e00\u4e2a\u65b0\u5458\u5de5Fish\uff0c\u6bcf\u5929\u65e9\u6668\u603b\u662f\u4f1a\u62ff\u7740\u4e00\u672c\u82f1\u6587\u6742\u5fd7\uff0c\u5199\u4e9b\u53e5\u5b50\u5728\u672c\u5b50\u4e0a\u3002\u540c\u4e8bCat\u5bf9Fish\u5199\u7684\u5185\u5bb9\u9887\u611f\u5174\u8da3\uff0c\u6709\u4e00\u5929\u4ed6\u5411Fish\u501f\u6765\u7ffb\u770b\uff0c\u4f46\u5374\u8bfb\u4e0d\u61c2\u5b83\u7684\u610f\u601d\u3002\u4f8b\u5982\uff0c\u201cstudent. a am I\u201d\u3002\u540e\u6765\u624d\u610f\u8bc6\u5230\uff0c\u8fd9\u5bb6\u4f19\u539f\u6765\u628a\u53e5\u5b50\u5355\u8bcd\u7684\u987a\u5e8f\u7ffb\u8f6c\u4e86\uff0c\u6b63\u786e\u7684\u53e5\u5b50\u5e94\u8be5\u662f\u201cI am a student.\u201d\u3002Cat\u5bf9\u4e00\u4e00\u7684\u7ffb\u8f6c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u53ef\u4e0d\u5728\u884c\uff0c\u4f60\u80fd\u5e2e\u52a9\u4ed6\u4e48\uff1f public class Solution { public String ReverseSentence(String str) { String[] arr = str.split(\" \"); if(arr.length == 0){ return str; } String s = \"\"; for(int i=arr.length-1; i>-1; i--){ if(i == arr.length-1){ s = arr[i]; }else{ s = s + \" \" + arr[i]; } } System.out.println(\"s=>\"+s+\"_\"); return s; } }","title":"44 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217"},{"location":"code_offer/java41-50/#45","text":"LL\u4eca\u5929\u5fc3\u60c5\u7279\u522b\u597d,\u56e0\u4e3a\u4ed6\u53bb\u4e70\u4e86\u4e00\u526f\u6251\u514b\u724c,\u53d1\u73b0\u91cc\u9762\u5c45\u7136\u67092\u4e2a\u5927\u738b,2\u4e2a\u5c0f\u738b(\u4e00\u526f\u724c\u539f\u672c\u662f54\u5f20^_^)...\u4ed6\u968f\u673a\u4ece\u4e2d\u62bd\u51fa\u4e865\u5f20\u724c,\u60f3\u6d4b\u6d4b\u81ea\u5df1\u7684\u624b\u6c14,\u770b\u770b\u80fd\u4e0d\u80fd\u62bd\u5230\u987a\u5b50,\u5982\u679c\u62bd\u5230\u7684\u8bdd,\u4ed6\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968,\u563f\u563f\uff01\uff01\u201c\u7ea2\u5fc3A,\u9ed1\u68433,\u5c0f\u738b,\u5927\u738b,\u65b9\u72475\u201d,\u201cOh My God!\u201d\u4e0d\u662f\u987a\u5b50.....LL\u4e0d\u9ad8\u5174\u4e86,\u4ed6\u60f3\u4e86\u60f3,\u51b3\u5b9a\u5927\\\u5c0f \u738b\u53ef\u4ee5\u770b\u6210\u4efb\u4f55\u6570\u5b57,\u5e76\u4e14A\u770b\u4f5c1,J\u4e3a11,Q\u4e3a12,K\u4e3a13\u3002\u4e0a\u9762\u76845\u5f20\u724c\u5c31\u53ef\u4ee5\u53d8\u6210\u201c1,2,3,4,5\u201d(\u5927\u5c0f\u738b\u5206\u522b\u770b\u4f5c2\u548c4),\u201cSo Lucky!\u201d\u3002LL\u51b3\u5b9a\u53bb\u4e70\u4f53\u80b2\u5f69\u7968\u5566\u3002 \u73b0\u5728,\u8981\u6c42\u4f60\u4f7f\u7528\u8fd9\u5e45\u724c\u6a21\u62df\u4e0a\u9762\u7684\u8fc7\u7a0b,\u7136\u540e\u544a\u8bc9\u6211\u4eecLL\u7684\u8fd0\u6c14\u5982\u4f55\uff0c \u5982\u679c\u724c\u80fd\u7ec4\u6210\u987a\u5b50\u5c31\u8f93\u51fatrue\uff0c\u5426\u5219\u5c31\u8f93\u51fafalse\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1,\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u5927\u5c0f\u738b\u662f0\u3002 import java.util.ArrayList; import java.util.Collections; public class Solution { public boolean isContinuous(int [] numbers) { if(numbers.length!=5){ return false; }else{ int count_0 = 0; int vacancy = 0; ArrayList<Integer> list = new ArrayList<>(); for(int i=0; i<numbers.length; i++){ if(numbers[i] != 0){ list.add(numbers[i]); }else{ ++count_0; } } Collections.sort(list); for(int i=1; i<list.size(); i++){ if(list.get(i)-list.get(i-1) > 1){ vacancy += list.get(i) - list.get(i-1)-1; }else if(list.get(i)-list.get(i-1) == 0){ return false; } } if(vacancy>count_0){return false;} else{return true;} } } }","title":"45 \u6251\u514b\u724c\u987a\u5b50"},{"location":"code_offer/java41-50/#46","text":"\u6bcf\u5e74\u516d\u4e00\u513f\u7ae5\u8282,\u725b\u5ba2\u90fd\u4f1a\u51c6\u5907\u4e00\u4e9b\u5c0f\u793c\u7269\u53bb\u770b\u671b\u5b64\u513f\u9662\u7684\u5c0f\u670b\u53cb,\u4eca\u5e74\u4ea6\u662f\u5982\u6b64\u3002HF\u4f5c\u4e3a\u725b\u5ba2\u7684\u8d44\u6df1\u5143\u8001,\u81ea\u7136\u4e5f\u51c6\u5907\u4e86\u4e00\u4e9b\u5c0f\u6e38\u620f\u3002\u5176\u4e2d,\u6709\u4e2a\u6e38\u620f\u662f\u8fd9\u6837\u7684:\u9996\u5148,\u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e,\u4ed6\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570m,\u8ba9\u7f16\u53f7\u4e3a0\u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002\u6bcf\u6b21\u558a\u5230m-1\u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c,\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269,\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d,\u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb,\u7ee7\u7eed0...m-1\u62a5\u6570....\u8fd9\u6837\u4e0b\u53bb....\u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb,\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14,\u5e76\u4e14\u62ff\u5230\u725b\u5ba2\u540d\u8d35\u7684\u201c\u540d\u4fa6\u63a2\u67ef\u5357\u201d\u5178\u85cf\u7248(\u540d\u989d\u6709\u9650\u54e6!!^_^)\u3002\u8bf7\u4f60\u8bd5\u7740\u60f3\u4e0b,\u54ea\u4e2a\u5c0f\u670b\u53cb\u4f1a\u5f97\u5230\u8fd9\u4efd\u793c\u54c1\u5462\uff1f(\u6ce8\uff1a\u5c0f\u670b\u53cb\u7684\u7f16\u53f7\u662f\u4ece0\u5230n-1) import java.util.LinkedList; public class Solution { public int LastRemaining_Solution(int n, int m) { if(n == 0){return -1;} else if(n == 1){return 0;} LinkedList<Integer> list = new LinkedList<>(); for(int i=0; i<n; i++){ list.add(i); } int current_index = 0; while(list.size()>1){ current_index = (current_index + m -1) % list.size(); list.remove(current_index); } return(list.get(0)); } }","title":"46 \u5b69\u5b50\u4eec\u7684\u6e38\u620f(\u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6811)"},{"location":"code_offer/java41-50/#47-123n","text":"\u6c421+2+3+...+n\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case\u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002 public class Solution { public int Sum_Solution(int n) { int sum = n; boolean flag = (sum>0) && ((sum += Sum_Solution(n-1))>0); return sum; } }","title":"47 \u6c421+2+3+...+n"},{"location":"code_offer/java41-50/#48","text":"\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u5f97\u4f7f\u7528+\u3001-\u3001*\u3001/\u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 public class Solution { public int Add(int num1,int num2) { while(num2 != 0){ int xor = num1 ^ num2; int and = (num1 & num2) << 1; num1 = xor; num2 = and; } return num1; } }","title":"48 \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},{"location":"code_offer/java41-50/#49","text":"\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570(\u5b9e\u73b0Integer.valueOf(string)\u7684\u529f\u80fd\uff0c\u4f46\u662fstring\u4e0d\u7b26\u5408\u6570\u5b57\u8981\u6c42\u65f6\u8fd4\u56de0)\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 \u6570\u503c\u4e3a0\u6216\u8005\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de0\u3002 \u8f93\u5165\u63cf\u8ff0: \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u5305\u62ec\u6570\u5b57\u5b57\u6bcd\u7b26\u53f7,\u53ef\u4ee5\u4e3a\u7a7a \u8f93\u51fa\u63cf\u8ff0: \u5982\u679c\u662f\u5408\u6cd5\u7684\u6570\u503c\u8868\u8fbe\u5219\u8fd4\u56de\u8be5\u6570\u5b57\uff0c\u5426\u5219\u8fd4\u56de0 \u793a\u4f8b \u8f93\u5165 +2147483647 1a33 \u8f93\u51fa 2147483647 0 import java.util.ArrayList; public class Solution { public int StrToInt(String str) { if(str.length() == 0){return 0;} char[] chars = str.toCharArray(); boolean neg = false; int index = 0; if(chars[0]=='-'){ index = 1; neg = true; }else if(chars[0]=='+'){ index = 1; } if(index>=chars.length){return 0;} while(chars[index] < '1' || chars[index] > '9'){ if(chars[index] == '0' && index+1<chars.length){ ++index; }else{ return 0; } } ArrayList<Integer> num_list = new ArrayList<>(); for(int i=index; i<chars.length; i++){ if(chars[i] < '0' || chars[i] > '9'){ return 0; }else{ num_list.add(chars[i]-48); System.out.println(chars[i]-48); } } int sum = 0; for(int i=0; i<num_list.size(); i++){ if(neg){ sum -= num_list.get(i)*Math.pow(10,(num_list.size()-1-i)); }else{ sum += num_list.get(i)*Math.pow(10,(num_list.size()-1-i)); } } return sum; } }","title":"49 \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},{"location":"code_offer/java41-50/#50","text":"\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230n-1\u7684\u8303\u56f4\u5185\u3002 \u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3}\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 public class Solution { // Parameters: // numbers: an array of integers // length: the length of array numbers // duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation; // Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++ // \u8fd9\u91cc\u8981\u7279\u522b\u6ce8\u610f~\u8fd4\u56de\u4efb\u610f\u91cd\u590d\u7684\u4e00\u4e2a\uff0c\u8d4b\u503cduplication[0] // Return value: true if the input is valid, and there are some duplications in the array number // otherwise false public boolean duplicate(int numbers[],int length,int [] duplication) { if(length == 0){ duplication[0] = -1; return false; } boolean[] arr = new boolean[length]; for(boolean b: arr){b=false;} for(int i=0; i<numbers.length; i++){ if(arr[numbers[i]] == false){ arr[numbers[i]] = true; }else{ duplication[0] = numbers[i]; return true; } } return false; } }","title":"50 \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"code_offer/java51-60/","text":"51 \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4A[0,1,...,n-1],\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4B[0,1,...,n-1],\u5176\u4e2dB\u4e2d\u7684\u5143\u7d20B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]\u3002\u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 import java.util.ArrayList; public class Solution { public int[] multiply(int[] A) { int[] arr = new int[A.length]; for(int i=0; i<arr.length; i++){arr[i]=1;} for(int i=0; i<A.length; i++){ for(int j=0; j<A.length; j++){ if(j==i){ continue; } arr[i] *= A[j]; } } return arr; } } 52 \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec'.'\u548c' '\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26'.'\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c' '\u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"aaa\"\u4e0e\u6a21\u5f0f\"a.a\"\u548c\"ab ac a\"\u5339\u914d\uff0c\u4f46\u662f\u4e0e\"aa.a\"\u548c\"ab*a\"\u5747\u4e0d\u5339\u914d\u3002 public class Solution { public boolean match(char[] str, char[] pattern) { if (str == null || pattern == null) { return false; } int strIndex = 0; int patternIndex = 0; return matchCore(str, strIndex, pattern, patternIndex); } public boolean matchCore(char[] str, int strIndex, char[] pattern, int patternIndex) { if (strIndex == str.length && patternIndex == pattern.length) { return true; } if (strIndex != str.length && patternIndex == pattern.length) { return false; } if (patternIndex + 1 < pattern.length && pattern[patternIndex + 1] == '*') { if ((strIndex != str.length && pattern[patternIndex] == str[strIndex]) || (pattern[patternIndex] == '.' && strIndex != str.length)) { return matchCore(str, strIndex, pattern, patternIndex + 2) || matchCore(str, strIndex + 1, pattern, patternIndex + 2) || matchCore(str, strIndex + 1, pattern, patternIndex); } else { return matchCore(str, strIndex, pattern, patternIndex + 2); } } if ((strIndex != str.length && pattern[patternIndex] == str[strIndex]) || (pattern[patternIndex] == '.' && strIndex != str.length)) { return matchCore(str, strIndex + 1, pattern, patternIndex + 1); } return false; } } 53 \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"+100\",\"5e2\",\"-123\",\"3.1416\"\u548c\"-1E-16\"\u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f\"12e\",\"1a3.14\",\"1.2.3\",\"+-5\"\u548c\"12e+4.3\"\u90fd\u4e0d\u662f\u3002 public class Solution { public boolean isNumeric(char[] str) { String s = String.valueOf(str); return s.matches(\"[\\\\+-]?[0-9]*(\\\\.[0-9]*)?([eE][\\\\+-]?[0-9]+)?\"); } } 54 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26\"go\"\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\"g\"\u3002\u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26\u201cgoogle\"\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\"l\"\u3002 \u8f93\u51fa\u63cf\u8ff0: \u5982\u679c\u5f53\u524d\u5b57\u7b26\u6d41\u6ca1\u6709\u5b58\u5728\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de#\u5b57\u7b26\u3002 import java.util.ArrayList; public class Solution { class Element{ char c; int count; public Element(char c){ this.c = c; count = 1; } public void add(){ ++count; } } ArrayList<Element> list = new ArrayList<>(); //Insert one char from stringstream public void Insert(char ch) { boolean find = false; for(int i=0; i<list.size(); i++){ if(list.get(i).c == ch){ find = true; list.get(i).add(); } } if(!find){ list.add(new Element(ch)); } } //return the first appearence once char in current stringstream public char FirstAppearingOnce() { for(int i=0; i<list.size(); i++){ if(list.get(i).count == 1){ return list.get(i).c; } } return '#'; } } 55 \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 \u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\uff0c\u5426\u5219\uff0c\u8f93\u51fanull\u3002 import java.util.HashSet; public class Solution { public ListNode EntryNodeOfLoop(ListNode pHead) { if(pHead == null){return null;} HashSet<ListNode> set = new HashSet<>(); while(pHead.next!=null){ int before = set.size(); set.add(pHead); int after = set.size(); if(after == before){ return pHead; } else{ pHead = pHead.next; } } return null; } } 56 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9 \u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934\u6307\u9488\u3002 \u4f8b\u5982\uff0c\u94fe\u88681->2->3->3->4->4->5 \u5904\u7406\u540e\u4e3a 1->2->5 public class Solution { public ListNode deleteDuplication(ListNode pHead) { if(pHead == null){return null;} if(pHead.next == null){return pHead;} if(pHead.next.val == pHead.val){//\u5f53\u524d\u8282\u70b9\u662f\u91cd\u590d\u8282\u70b9 ListNode p = pHead.next;//\u5c06p\u6307\u5411\u5f53\u524d\u8282\u70b9\u540e\u9762\u7684\u91cd\u590d\u8282\u70b9 while(p!=null && p.val==pHead.val){//\u627e\u5230\u4e00\u4e2a\u4e0e\u5f53\u524d\u8282\u70b9\u4e0d\u540c\u7684\u8282\u70b9(\u5982\u679cp\u6307\u5411\u7684\u8282\u70b9\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u540c\uff0cp\u540e\u79fb) p = p.next; } if(p==null){return null;}//\u5982\u679cp\u8d70\u5230\u6700\u540e\u7684null\u4e86\uff0c\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u5230\u6700\u540e\u90fd\u662f\u91cd\u590d\u7684\uff0c\u8fd4\u56denull(\u518d\u9012\u5f52\u4e00\u6b21\u4e5f\u662f\u53ef\u4ee5\u7684) else{return deleteDuplication(p);}//\u627e\u5230\u4e86\u4e0e\u5f53\u524d\u8282\u70b9\u4e0d\u540c\u7684\u8282\u70b9\uff0c\u5148\u4e0d\u7ba1\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u4e5f\u91cd\u590d\u4e86\uff0c\u76f4\u63a5\u9012\u5f52\u8c03\u7528 // \u5982\u679c\u540e\u9762\u8fd9\u4e2a\u8282\u70b9\u8fd8\u662f\u91cd\u590d\u7684\uff0c\u540e\u9762\u7684\u9012\u5f52\u4f1a\u5904\u7406\u7684 }else{//\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u91cd\u590d\u8282\u70b9 pHead.next = deleteDuplication(pHead.next);//\u4fdd\u7559\u5f53\u524d\u8282\u70b9\uff0c\u9012\u5f52\u540e\u9762\u7684\u8282\u70b9 return pHead; } } } 57 \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5e76\u4e14\u8fd4\u56de\u3002\u6ce8\u610f\uff0c\u6811\u4e2d\u7684\u7ed3\u70b9\u4e0d\u4ec5\u5305\u542b\u5de6\u53f3\u5b50\u7ed3\u70b9\uff0c\u540c\u65f6\u5305\u542b\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 public class Solution { public TreeLinkNode GetNext(TreeLinkNode pNode) { if(pNode.right!=null){//\u6709\u53f3\u5b50\u6811 //\u67e5\u627e\u53f3\u5b50\u6811\u7684\u6700\u5de6 TreeLinkNode sub_right = pNode.right; while(sub_right.left!=null){ sub_right = sub_right.left; } return sub_right; }else{ //\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u67e5\u627e\u7236\u8282\u70b9 if(pNode.next!=null){ if(pNode == pNode.next.left) {//\u5982\u679c\u8be5\u8282\u70b9\u662f\u5176\u7236\u8282\u70b9\u7684\u5de6\u8282\u70b9 return pNode.next;//\u8fd4\u56de\u5176\u7236\u8282\u70b9 }else{//\u8be5\u8282\u70b9\u662f\u5176\u7236\u8282\u70b9\u7684\u53f3\u8282\u70b9 TreeLinkNode parent = pNode.next; TreeLinkNode right = pNode; while(parent.next != null && right == parent.right){ right = parent; parent = parent.next; } if(right == parent.left){//\u5982\u679c\u627e\u5230\u4e86\u8fd9\u4e2a\u8282\u70b9\u662f\u5176\u5de6\u5b50\u6811\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd4\u56de\u8fd9\u4e2a\u7236\u8282\u70b9 return parent; }else{//\u5982\u679c\u5f80\u4e0a\u7684\u8282\u70b9\u5168\u662f\u53f3\u8282\u70b9\uff0c\u5219\u8fd9\u4e2a\u70b9\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd4\u56denull return null; } } }else{//\u6ca1\u6709\u7236\u8282\u70b9\uff0c(\u8be5\u8282\u70b9\u4e3a\u6839\u8282\u70b9) return null; } } } } 58 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u9897\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u540c\u6b64\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u662f\u540c\u6837\u7684\uff0c\u5b9a\u4e49\u5176\u4e3a\u5bf9\u79f0\u7684\u3002 public class Solution { boolean isSymmetrical(TreeNode pRoot) { if(pRoot == null){return true;} if(pRoot.left == null && pRoot.right == null){ return true; } else if(pRoot.left == null && pRoot.right != null){ return false; } else if(pRoot.left != null && pRoot.right == null){ return false; } else{ return isSym(pRoot.left, pRoot.right); } } boolean isSym(TreeNode left, TreeNode right){ if(left == null && right == null){ return true; } else if(left == null && right != null){ return false; } else if(left != null && right == null){ return false; } if(left.val != right.val){ return false; } return isSym(left.left, right.right) && isSym(left.right, right.left); } } 59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u81f3\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 import java.util.ArrayList; import java.util.LinkedList; import java.util.Queue; public class Solution { public ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); if(pRoot == null){return final_list;} Queue<TreeNode> queue = new LinkedList<>(); queue.offer(pRoot); queue.offer(null); boolean flag = true; ArrayList<Integer> current_list = new ArrayList<>(); while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node!=null){ if(flag == true){//\u6839\u636eflag\u6765\u51b3\u5b9a\u63d2\u5165\u7684\u987a\u5e8f current_list.add(node.val); }else{ current_list.add(0,node.val); } if(node.left!=null){queue.add(node.left);} if(node.right!=null){queue.add(node.right);} }else{//\u5982\u679c\u961f\u5217\u51fa\u5217\u7684\u662f\u8bbe\u7f6e\u7684null\u503c final_list.add(current_list); current_list = new ArrayList<>(); if(flag){flag = false;} else{flag = true;}//\u4fee\u6539flag if(!queue.isEmpty()){queue.offer(null);} } } return final_list; } } 60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c \u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7ed3\u70b9\u4ece\u5de6\u81f3\u53f3\u8f93\u51fa\u3002\u6bcf\u4e00\u5c42\u8f93\u51fa\u4e00\u884c\u3002 import java.util.ArrayList; import java.util.Queue; import java.util.LinkedList; public class Solution { public ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); if(pRoot == null){return final_list;} Queue<TreeNode> queue = new LinkedList<>(); queue.offer(pRoot); queue.offer(null); ArrayList<Integer> current_list = new ArrayList<>(); while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node!=null){ current_list.add(node.val); if(node.left!=null){queue.add(node.left);} if(node.right!=null){queue.add(node.right);} }else{//\u5982\u679c\u961f\u5217\u51fa\u5217\u7684\u662f\u8bbe\u7f6e\u7684null\u503c final_list.add(current_list); current_list = new ArrayList<>(); if(!queue.isEmpty()){queue.offer(null);} } } return final_list; } }","title":"Java 51-60"},{"location":"code_offer/java51-60/#51","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4A[0,1,...,n-1],\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4B[0,1,...,n-1],\u5176\u4e2dB\u4e2d\u7684\u5143\u7d20B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]\u3002\u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 import java.util.ArrayList; public class Solution { public int[] multiply(int[] A) { int[] arr = new int[A.length]; for(int i=0; i<arr.length; i++){arr[i]=1;} for(int i=0; i<A.length; i++){ for(int j=0; j<A.length; j++){ if(j==i){ continue; } arr[i] *= A[j]; } } return arr; } }","title":"51 \u6784\u5efa\u4e58\u79ef\u6570\u7ec4"},{"location":"code_offer/java51-60/#52","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec'.'\u548c' '\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26'.'\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c' '\u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b0\u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"aaa\"\u4e0e\u6a21\u5f0f\"a.a\"\u548c\"ab ac a\"\u5339\u914d\uff0c\u4f46\u662f\u4e0e\"aa.a\"\u548c\"ab*a\"\u5747\u4e0d\u5339\u914d\u3002 public class Solution { public boolean match(char[] str, char[] pattern) { if (str == null || pattern == null) { return false; } int strIndex = 0; int patternIndex = 0; return matchCore(str, strIndex, pattern, patternIndex); } public boolean matchCore(char[] str, int strIndex, char[] pattern, int patternIndex) { if (strIndex == str.length && patternIndex == pattern.length) { return true; } if (strIndex != str.length && patternIndex == pattern.length) { return false; } if (patternIndex + 1 < pattern.length && pattern[patternIndex + 1] == '*') { if ((strIndex != str.length && pattern[patternIndex] == str[strIndex]) || (pattern[patternIndex] == '.' && strIndex != str.length)) { return matchCore(str, strIndex, pattern, patternIndex + 2) || matchCore(str, strIndex + 1, pattern, patternIndex + 2) || matchCore(str, strIndex + 1, pattern, patternIndex); } else { return matchCore(str, strIndex, pattern, patternIndex + 2); } } if ((strIndex != str.length && pattern[patternIndex] == str[strIndex]) || (pattern[patternIndex] == '.' && strIndex != str.length)) { return matchCore(str, strIndex + 1, pattern, patternIndex + 1); } return false; } }","title":"52 \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"code_offer/java51-60/#53","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"+100\",\"5e2\",\"-123\",\"3.1416\"\u548c\"-1E-16\"\u90fd\u8868\u793a\u6570\u503c\u3002 \u4f46\u662f\"12e\",\"1a3.14\",\"1.2.3\",\"+-5\"\u548c\"12e+4.3\"\u90fd\u4e0d\u662f\u3002 public class Solution { public boolean isNumeric(char[] str) { String s = String.valueOf(str); return s.matches(\"[\\\\+-]?[0-9]*(\\\\.[0-9]*)?([eE][\\\\+-]?[0-9]+)?\"); } }","title":"53 \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"code_offer/java51-60/#54","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26\"go\"\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\"g\"\u3002\u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26\u201cgoogle\"\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f\"l\"\u3002 \u8f93\u51fa\u63cf\u8ff0: \u5982\u679c\u5f53\u524d\u5b57\u7b26\u6d41\u6ca1\u6709\u5b58\u5728\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u8fd4\u56de#\u5b57\u7b26\u3002 import java.util.ArrayList; public class Solution { class Element{ char c; int count; public Element(char c){ this.c = c; count = 1; } public void add(){ ++count; } } ArrayList<Element> list = new ArrayList<>(); //Insert one char from stringstream public void Insert(char ch) { boolean find = false; for(int i=0; i<list.size(); i++){ if(list.get(i).c == ch){ find = true; list.get(i).add(); } } if(!find){ list.add(new Element(ch)); } } //return the first appearence once char in current stringstream public char FirstAppearingOnce() { for(int i=0; i<list.size(); i++){ if(list.get(i).count == 1){ return list.get(i).c; } } return '#'; } }","title":"54 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26"},{"location":"code_offer/java51-60/#55","text":"\u7ed9\u4e00\u4e2a\u94fe\u8868\uff0c\u82e5\u5176\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\uff0c\u5426\u5219\uff0c\u8f93\u51fanull\u3002 import java.util.HashSet; public class Solution { public ListNode EntryNodeOfLoop(ListNode pHead) { if(pHead == null){return null;} HashSet<ListNode> set = new HashSet<>(); while(pHead.next!=null){ int before = set.size(); set.add(pHead); int after = set.size(); if(after == before){ return pHead; } else{ pHead = pHead.next; } } return null; } }","title":"55 \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9"},{"location":"code_offer/java51-60/#56","text":"\u5728\u4e00\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\u4e2d\uff0c\u5b58\u5728\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u8bf7\u5220\u9664\u8be5\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9\uff0c\u91cd\u590d\u7684\u7ed3\u70b9\u4e0d\u4fdd\u7559\uff0c\u8fd4\u56de\u94fe\u8868\u5934\u6307\u9488\u3002 \u4f8b\u5982\uff0c\u94fe\u88681->2->3->3->4->4->5 \u5904\u7406\u540e\u4e3a 1->2->5 public class Solution { public ListNode deleteDuplication(ListNode pHead) { if(pHead == null){return null;} if(pHead.next == null){return pHead;} if(pHead.next.val == pHead.val){//\u5f53\u524d\u8282\u70b9\u662f\u91cd\u590d\u8282\u70b9 ListNode p = pHead.next;//\u5c06p\u6307\u5411\u5f53\u524d\u8282\u70b9\u540e\u9762\u7684\u91cd\u590d\u8282\u70b9 while(p!=null && p.val==pHead.val){//\u627e\u5230\u4e00\u4e2a\u4e0e\u5f53\u524d\u8282\u70b9\u4e0d\u540c\u7684\u8282\u70b9(\u5982\u679cp\u6307\u5411\u7684\u8282\u70b9\u4e0e\u5f53\u524d\u8282\u70b9\u76f8\u540c\uff0cp\u540e\u79fb) p = p.next; } if(p==null){return null;}//\u5982\u679cp\u8d70\u5230\u6700\u540e\u7684null\u4e86\uff0c\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u5230\u6700\u540e\u90fd\u662f\u91cd\u590d\u7684\uff0c\u8fd4\u56denull(\u518d\u9012\u5f52\u4e00\u6b21\u4e5f\u662f\u53ef\u4ee5\u7684) else{return deleteDuplication(p);}//\u627e\u5230\u4e86\u4e0e\u5f53\u524d\u8282\u70b9\u4e0d\u540c\u7684\u8282\u70b9\uff0c\u5148\u4e0d\u7ba1\u8fd9\u4e2a\u8282\u70b9\u662f\u5426\u4e5f\u91cd\u590d\u4e86\uff0c\u76f4\u63a5\u9012\u5f52\u8c03\u7528 // \u5982\u679c\u540e\u9762\u8fd9\u4e2a\u8282\u70b9\u8fd8\u662f\u91cd\u590d\u7684\uff0c\u540e\u9762\u7684\u9012\u5f52\u4f1a\u5904\u7406\u7684 }else{//\u5f53\u524d\u8282\u70b9\u4e0d\u662f\u91cd\u590d\u8282\u70b9 pHead.next = deleteDuplication(pHead.next);//\u4fdd\u7559\u5f53\u524d\u8282\u70b9\uff0c\u9012\u5f52\u540e\u9762\u7684\u8282\u70b9 return pHead; } } }","title":"56 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9"},{"location":"code_offer/java51-60/#57","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5e76\u4e14\u8fd4\u56de\u3002\u6ce8\u610f\uff0c\u6811\u4e2d\u7684\u7ed3\u70b9\u4e0d\u4ec5\u5305\u542b\u5de6\u53f3\u5b50\u7ed3\u70b9\uff0c\u540c\u65f6\u5305\u542b\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 public class Solution { public TreeLinkNode GetNext(TreeLinkNode pNode) { if(pNode.right!=null){//\u6709\u53f3\u5b50\u6811 //\u67e5\u627e\u53f3\u5b50\u6811\u7684\u6700\u5de6 TreeLinkNode sub_right = pNode.right; while(sub_right.left!=null){ sub_right = sub_right.left; } return sub_right; }else{ //\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u67e5\u627e\u7236\u8282\u70b9 if(pNode.next!=null){ if(pNode == pNode.next.left) {//\u5982\u679c\u8be5\u8282\u70b9\u662f\u5176\u7236\u8282\u70b9\u7684\u5de6\u8282\u70b9 return pNode.next;//\u8fd4\u56de\u5176\u7236\u8282\u70b9 }else{//\u8be5\u8282\u70b9\u662f\u5176\u7236\u8282\u70b9\u7684\u53f3\u8282\u70b9 TreeLinkNode parent = pNode.next; TreeLinkNode right = pNode; while(parent.next != null && right == parent.right){ right = parent; parent = parent.next; } if(right == parent.left){//\u5982\u679c\u627e\u5230\u4e86\u8fd9\u4e2a\u8282\u70b9\u662f\u5176\u5de6\u5b50\u6811\u7684\u67d0\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd4\u56de\u8fd9\u4e2a\u7236\u8282\u70b9 return parent; }else{//\u5982\u679c\u5f80\u4e0a\u7684\u8282\u70b9\u5168\u662f\u53f3\u8282\u70b9\uff0c\u5219\u8fd9\u4e2a\u70b9\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd4\u56denull return null; } } }else{//\u6ca1\u6709\u7236\u8282\u70b9\uff0c(\u8be5\u8282\u70b9\u4e3a\u6839\u8282\u70b9) return null; } } } }","title":"57 \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"},{"location":"code_offer/java51-60/#58","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e00\u9897\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5bf9\u79f0\u7684\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u540c\u6b64\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u662f\u540c\u6837\u7684\uff0c\u5b9a\u4e49\u5176\u4e3a\u5bf9\u79f0\u7684\u3002 public class Solution { boolean isSymmetrical(TreeNode pRoot) { if(pRoot == null){return true;} if(pRoot.left == null && pRoot.right == null){ return true; } else if(pRoot.left == null && pRoot.right != null){ return false; } else if(pRoot.left != null && pRoot.right == null){ return false; } else{ return isSym(pRoot.left, pRoot.right); } } boolean isSym(TreeNode left, TreeNode right){ if(left == null && right == null){ return true; } else if(left == null && right != null){ return false; } else if(left != null && right == null){ return false; } if(left.val != right.val){ return false; } return isSym(left.left, right.right) && isSym(left.right, right.left); } }","title":"58 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"code_offer/java51-60/#59","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u81f3\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 import java.util.ArrayList; import java.util.LinkedList; import java.util.Queue; public class Solution { public ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); if(pRoot == null){return final_list;} Queue<TreeNode> queue = new LinkedList<>(); queue.offer(pRoot); queue.offer(null); boolean flag = true; ArrayList<Integer> current_list = new ArrayList<>(); while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node!=null){ if(flag == true){//\u6839\u636eflag\u6765\u51b3\u5b9a\u63d2\u5165\u7684\u987a\u5e8f current_list.add(node.val); }else{ current_list.add(0,node.val); } if(node.left!=null){queue.add(node.left);} if(node.right!=null){queue.add(node.right);} }else{//\u5982\u679c\u961f\u5217\u51fa\u5217\u7684\u662f\u8bbe\u7f6e\u7684null\u503c final_list.add(current_list); current_list = new ArrayList<>(); if(flag){flag = false;} else{flag = true;}//\u4fee\u6539flag if(!queue.isEmpty()){queue.offer(null);} } } return final_list; } }","title":"59 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"code_offer/java51-60/#60","text":"\u4ece\u4e0a\u5230\u4e0b\u6309\u5c42\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u540c\u4e00\u5c42\u7ed3\u70b9\u4ece\u5de6\u81f3\u53f3\u8f93\u51fa\u3002\u6bcf\u4e00\u5c42\u8f93\u51fa\u4e00\u884c\u3002 import java.util.ArrayList; import java.util.Queue; import java.util.LinkedList; public class Solution { public ArrayList<ArrayList<Integer>> Print(TreeNode pRoot) { ArrayList<ArrayList<Integer>> final_list = new ArrayList<>(); if(pRoot == null){return final_list;} Queue<TreeNode> queue = new LinkedList<>(); queue.offer(pRoot); queue.offer(null); ArrayList<Integer> current_list = new ArrayList<>(); while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node!=null){ current_list.add(node.val); if(node.left!=null){queue.add(node.left);} if(node.right!=null){queue.add(node.right);} }else{//\u5982\u679c\u961f\u5217\u51fa\u5217\u7684\u662f\u8bbe\u7f6e\u7684null\u503c final_list.add(current_list); current_list = new ArrayList<>(); if(!queue.isEmpty()){queue.offer(null);} } } return final_list; } }","title":"60 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c"},{"location":"code_offer/java61-66/","text":"61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 public class Solution { String Serialize(TreeNode root) { StringBuffer stringBuffer = new StringBuffer(); if(root==null){ stringBuffer.append(\"#,\"); return stringBuffer.toString(); }else{ stringBuffer.append(root.val+\",\"); stringBuffer.append(Serialize(root.left)); stringBuffer.append(Serialize(root.right)); return stringBuffer.toString(); } } int index = -1;//\u8fd9\u4e2aindex\u4f1a\u6539\u53d8\uff0c\u540e\u9762\u7684\u9012\u5f52\uff0cindex\u4f1a\u6162\u6162\u52a0 TreeNode Deserialize(String str) { index++; System.out.println(\"index = \"+index); String[] split = str.split(\",\"); TreeNode node = null; if(!split[index].equals(\"#\")){ node = new TreeNode(Integer.parseInt(split[index])); node.left = Deserialize(str); node.right = Deserialize(str); } return node; } } 62 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u4e2a\u7ed3\u70b9 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2ck\u5c0f\u7684\u7ed3\u70b9\u3002\u4f8b\u5982\uff0c \uff085\uff0c3\uff0c7\uff0c2\uff0c4\uff0c6\uff0c8\uff09 \u4e2d\uff0c\u6309\u7ed3\u70b9\u6570\u503c\u5927\u5c0f\u987a\u5e8f\u7b2c\u4e09\u5c0f\u7ed3\u70b9\u7684\u503c\u4e3a4\u3002 import java.util.ArrayList; public class Solution { ArrayList<TreeNode> list = new ArrayList<>(); TreeNode KthNode(TreeNode pRoot, int k) { if(k==0){return null;} pre(pRoot); if(k>list.size()){return null;} return list.get(k-1); } public void pre(TreeNode pRoot){ if(pRoot!=null){ pre(pRoot.left); list.add(pRoot); pre(pRoot.right); } } } 63 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002\u6211\u4eec\u4f7f\u7528Insert()\u65b9\u6cd5\u8bfb\u53d6\u6570\u636e\u6d41\uff0c\u4f7f\u7528GetMedian()\u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u8bfb\u53d6\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u3002 import java.util.ArrayList; public class Solution { ArrayList<Integer> list = new ArrayList<>(); public void Insert(Integer num) { boolean flag = false; for(int i=0; i<list.size(); i++){ if(list.get(i) > num){ list.add(i,num); flag = true; break; } } if(flag == false){list.add(num);} } public Double GetMedian() { if(list.size()%2==0){ int a = list.get(list.size()/2); int b = list.get(list.size()/2-1); return ((double)a+(double)b)/2; }else{ return (double)list.get(list.size()/2); } } } 64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u6570\u503c\u7684\u6700\u5927\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4{2,3,4,2,6,2,5,1}\u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u57286\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u4ed6\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a{4,4,6,6,6,5}\uff1b \u9488\u5bf9\u6570\u7ec4{2,3,4,2,6,2,5,1}\u7684\u6ed1\u52a8\u7a97\u53e3\u6709\u4ee5\u4e0b6\u4e2a\uff1a {[2,3,4],2,6,2,5,1}\uff0c {2,[3,4,2],6,2,5,1}\uff0c {2,3,[4,2,6],2,5,1}\uff0c {2,3,4,[2,6,2],5,1}\uff0c {2,3,4,2,[6,2,5],1}\uff0c {2,3,4,2,6,[2,5,1]}\u3002 import java.util.ArrayList; public class Solution { public ArrayList<Integer> maxInWindows(int [] num, int size) { ArrayList<Integer> list = new ArrayList<>(); if(size == 0){ return list;} else if(size == 1){ for(int i=0; i<num.length; i++){list.add(num[i]);} return list; } int index = size-1; int max_index = 0; int max = num[max_index]; for(; index<num.length; index++){ if(index == size-1){//\u5f53\u662f\u7b2c\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u7684\u65f6\u5019\uff0c\u8981\u8ba1\u7b97\u4e00\u4e2a\u5f53\u524d\u7684\u6700\u5927\u503c\uff0c\u4fdd\u7559\u6700\u5927\u503c\u7684index for(int i=index-size+1; i<=index; i++){ if(num[i] > max){ max = num[i]; max_index = i; } } //\u5c06\u7b2c\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\u52a0\u5165\u5230list\u4e2d list.add(max); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else{ if(max_index>=index-size+1 && num[max_index]>num[index]){ //\u8fd9\u4e2a\u65f6\u5019max\u4f9d\u7136\u662f\u539f\u6765\u7684\u503c\uff0cmax_index\u4e5f\u4e0d\u7528\u66ff\u6362 list.add(num[max_index]); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else if(max_index>=index-size+1 && num[max_index]==num[index]){ //\u8fd9\u4e2a\u65f6\u5019max\u548c\u65b0\u8fdb\u6765\u7684\u6570\u4e00\u6837\uff0c\u540c\u65f6\u4fdd\u6301\u5728\u6ed1\u52a8\u7a97\u53e3\u5185 //\u867d\u7136\u4e00\u6837\uff0cmax_index\u8fd8\u662f\u6362\u4e00\u4e0b max_index = index; list.add(num[max_index]); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else if(num[max_index]<=num[index]){ //\u65e0\u8bbamax\u662f\u5426\u51fa\u4e86\u6ed1\u52a8\u7a97\u53e3\uff0c\u4f46\u662f\u65b0\u8fdb\u6765\u7684\u6570\u662f\u5927\u4e8e\u5b83\u7684 //\u6ed1\u52a8\u7a97\u53e3\u5185\u7684\u5176\u4ed6\u503c\u90fd\u662f\u5c0f\u4e8e\u8fd9\u4e2a\u503c\u7684\uff0c\u90a3\u4e48\u65b0\u8fdb\u6765\u7684\u8fd9\u4e2a\u503c\u4e00\u5b9a\u662f\u6700\u5927\u503c max_index = index; max = num[max_index]; list.add(num[max_index]); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else{ max_index = index-size+1; max = num[index-size+1]; for(int i=index-size+1; i<=index; i++){ if(num[i] > max){ max = num[i]; max_index = i; } } //\u5c06\u7b2c\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\u52a0\u5165\u5230list\u4e2d list.add(max); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); } } } return list; } } 65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u4e4b\u540e\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u4f8b\u5982 a b c e s f c s a d e e \u8fd9\u6837\u76843 X 4 \u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32\"bcced\"\u7684\u8def\u5f84\uff0c\u4f46\u662f\u77e9\u9635\u4e2d\u4e0d\u5305\u542b\"abcb\"\u8def\u5f84\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002 public class Solution { class Path{ int row; int col; public Path(int row, int col){ this.row = row; this.col = col; } } public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { if(matrix.length == 0){ return false; }else if(str.length == 0){ return false; }else{ char[][] mat = new char[rows][cols]; for(int i=0; i<matrix.length; i++){ mat[i/cols][i%cols] = matrix[i]; } char first_char = str[0]; boolean succeed_flag = false; for(int i=0; i<rows; i++){ for(int j=0; j<cols; j++){ if(mat[i][j] == first_char){ int index = 0; Path[] paths = new Path[str.length]; Path path = new Path(i,j); paths[index] = path; if(!succeed_flag){//\u5982\u679c\u8fd8\u6ca1\u6709\u6210\u529f\uff0c\u5219\u53bb\u5bfb\u627e succeed_flag = isCorrect(mat,paths,index,str); } } } } return succeed_flag; } } public boolean isCorrect(char[][] mat, Path[] paths, int index, char[] str){ if(index+1 > str.length-1){ return true; } int rows = mat.length; int cols = mat[0].length; //\u5bfb\u627eindex\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6ee1\u8db3\u6761\u4ef6\uff1a //\u662findex\u8282\u70b9\u7684\u4e0a\u4e0b\u5de6\u53f3\u3002\u4e0d\u8d8a\u754c\u3002\u662f\u5f53\u524d\u8981\u627e\u7684index+1\u7684\u7b26\u53f7\u3002\u4e0d\u5b58\u5728\u4e8e\u5df2\u7ecf\u5728path\u4e2d\u7684\u8282\u70b9\u4e2d\u3002 //\u5982\u679c\u6ca1\u6709\u627e\u5230\u5c31\u8fd4\u56defalse Path last_path = paths[index]; int x = last_path.row; int y = last_path.col; boolean down = false; boolean up = false; boolean right = false; boolean left = false; if(x+1 < rows && mat[x+1][y] == str[index+1] && canGo(paths, x+1, y, index)){ Path path = new Path(x+1, y); paths[index+1] = path; down = isCorrect(mat,paths,index+1,str); } if(x-1 >= 0 && mat[x-1][y] == str[index+1] && canGo(paths, x-1, y, index)){ Path path = new Path(x-1, y); paths[index+1] = path; up = isCorrect(mat,paths,index+1,str); } if(y+1 < cols && mat[x][y+1] == str[index+1] && canGo(paths, x, y+1, index)){ Path path = new Path(x, y+1); paths[index+1] = path; right = isCorrect(mat,paths,index+1,str); } if(y-1 >= 0 && mat[x][y-1] == str[index+1] && canGo(paths, x, y-1, index)){ Path path = new Path(x, y-1); paths[index+1] = path; left = isCorrect(mat,paths,index+1,str); } return down || up || right || left; } public boolean canGo(Path[] paths, int x, int y, int index){ for(int i=0; i<=index; i++){ if(x == paths[i].row && y == paths[i].col){ return false; } } return true; } } 66 \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \u5730\u4e0a\u6709\u4e00\u4e2am\u884c\u548cn\u5217\u7684\u65b9\u683c\u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u68070,0\u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\uff0c\u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c\uff0835,37\uff09\uff0c\u56e0\u4e3a3+5+3+7 = 18\u3002\u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c\uff0835,38\uff09\uff0c\u56e0\u4e3a3+5+3+8 = 19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f public class Solution { int count = 0; public int movingCount(int threshold, int rows, int cols) { if(threshold < 0){return 0;} if(threshold == 0){return 1;} if(rows == 0 || cols == 0){return 0;} boolean[][] visited = new boolean[rows][cols]; visited[0][0] = true; ++count; go(threshold, visited, 0, 0); return count; } public void go(int threshold, boolean[][] visited, int x, int y){ int rows = visited.length; int cols = visited[0].length; boolean down = false; boolean right = false; //\u53ea\u9700\u8981\u5f80\u4e0b\u548c\u5f80\u53f3\u8d70\uff08\u5f80\u4e0a\u548c\u5f80\u5de6\u662f\u9000\u56de\uff0c\u4f46\u662f\u9000\u56de\u4e4b\u540e\u8d70\u7684\u8def\uff0c\u4e00\u5b9a\u5728\u8fd9\u4e4b\u524d\u53ef\u4ee5\u8d70\uff09\uff0c\u53ef\u4ee5\u8d70\u7684\u6761\u4ef6\uff1a //\u5f80\u4e0b\u548c\u5f80\u53f3\u4e0d\u8d85\u8fc7\u8fb9\u754c\uff0cvisited\u4e3afalse\uff0c\u6ee1\u8db3threshold if(x+1<rows && visited[x+1][y] == false && can(threshold, x+1, y)){ visited[x+1][y] = true; ++count; go(threshold, visited,x+1, y); } if(y+1<cols && visited[x][y+1] == false && can(threshold, x, y+1)){ visited[x][y+1] = true; ++count; go(threshold, visited, x, y+1); } } public boolean can(int threshold, int x, int y){ char[] chars_x = String.valueOf(x).toCharArray(); char[] chars_y = String.valueOf(y).toCharArray(); int n = 0; for(int i=0; i<chars_x.length; i++){ n = n + chars_x[i] - 48; } for(int i=0; i<chars_y.length; i++){ n = n + chars_y[i] - 48; } if(n<=threshold){ return true; }else{ return false; } } }","title":"Java 61-66"},{"location":"code_offer/java61-66/#61","text":"\u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811 public class Solution { String Serialize(TreeNode root) { StringBuffer stringBuffer = new StringBuffer(); if(root==null){ stringBuffer.append(\"#,\"); return stringBuffer.toString(); }else{ stringBuffer.append(root.val+\",\"); stringBuffer.append(Serialize(root.left)); stringBuffer.append(Serialize(root.right)); return stringBuffer.toString(); } } int index = -1;//\u8fd9\u4e2aindex\u4f1a\u6539\u53d8\uff0c\u540e\u9762\u7684\u9012\u5f52\uff0cindex\u4f1a\u6162\u6162\u52a0 TreeNode Deserialize(String str) { index++; System.out.println(\"index = \"+index); String[] split = str.split(\",\"); TreeNode node = null; if(!split[index].equals(\"#\")){ node = new TreeNode(Integer.parseInt(split[index])); node.left = Deserialize(str); node.right = Deserialize(str); } return node; } }","title":"61 \u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"code_offer/java61-66/#62-k","text":"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7684\u7b2ck\u5c0f\u7684\u7ed3\u70b9\u3002\u4f8b\u5982\uff0c \uff085\uff0c3\uff0c7\uff0c2\uff0c4\uff0c6\uff0c8\uff09 \u4e2d\uff0c\u6309\u7ed3\u70b9\u6570\u503c\u5927\u5c0f\u987a\u5e8f\u7b2c\u4e09\u5c0f\u7ed3\u70b9\u7684\u503c\u4e3a4\u3002 import java.util.ArrayList; public class Solution { ArrayList<TreeNode> list = new ArrayList<>(); TreeNode KthNode(TreeNode pRoot, int k) { if(k==0){return null;} pre(pRoot); if(k>list.size()){return null;} return list.get(k-1); } public void pre(TreeNode pRoot){ if(pRoot!=null){ pre(pRoot.left); list.add(pRoot); pre(pRoot.right); } } }","title":"62 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u4e2a\u7ed3\u70b9"},{"location":"code_offer/java61-66/#63","text":"\u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002\u6211\u4eec\u4f7f\u7528Insert()\u65b9\u6cd5\u8bfb\u53d6\u6570\u636e\u6d41\uff0c\u4f7f\u7528GetMedian()\u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u8bfb\u53d6\u6570\u636e\u7684\u4e2d\u4f4d\u6570\u3002 import java.util.ArrayList; public class Solution { ArrayList<Integer> list = new ArrayList<>(); public void Insert(Integer num) { boolean flag = false; for(int i=0; i<list.size(); i++){ if(list.get(i) > num){ list.add(i,num); flag = true; break; } } if(flag == false){list.add(num);} } public Double GetMedian() { if(list.size()%2==0){ int a = list.get(list.size()/2); int b = list.get(list.size()/2-1); return ((double)a+(double)b)/2; }else{ return (double)list.get(list.size()/2); } } }","title":"63 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"code_offer/java61-66/#64","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u6570\u503c\u7684\u6700\u5927\u503c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4{2,3,4,2,6,2,5,1}\u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u57286\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u4ed6\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a{4,4,6,6,6,5}\uff1b \u9488\u5bf9\u6570\u7ec4{2,3,4,2,6,2,5,1}\u7684\u6ed1\u52a8\u7a97\u53e3\u6709\u4ee5\u4e0b6\u4e2a\uff1a {[2,3,4],2,6,2,5,1}\uff0c {2,[3,4,2],6,2,5,1}\uff0c {2,3,[4,2,6],2,5,1}\uff0c {2,3,4,[2,6,2],5,1}\uff0c {2,3,4,2,[6,2,5],1}\uff0c {2,3,4,2,6,[2,5,1]}\u3002 import java.util.ArrayList; public class Solution { public ArrayList<Integer> maxInWindows(int [] num, int size) { ArrayList<Integer> list = new ArrayList<>(); if(size == 0){ return list;} else if(size == 1){ for(int i=0; i<num.length; i++){list.add(num[i]);} return list; } int index = size-1; int max_index = 0; int max = num[max_index]; for(; index<num.length; index++){ if(index == size-1){//\u5f53\u662f\u7b2c\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u7684\u65f6\u5019\uff0c\u8981\u8ba1\u7b97\u4e00\u4e2a\u5f53\u524d\u7684\u6700\u5927\u503c\uff0c\u4fdd\u7559\u6700\u5927\u503c\u7684index for(int i=index-size+1; i<=index; i++){ if(num[i] > max){ max = num[i]; max_index = i; } } //\u5c06\u7b2c\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\u52a0\u5165\u5230list\u4e2d list.add(max); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else{ if(max_index>=index-size+1 && num[max_index]>num[index]){ //\u8fd9\u4e2a\u65f6\u5019max\u4f9d\u7136\u662f\u539f\u6765\u7684\u503c\uff0cmax_index\u4e5f\u4e0d\u7528\u66ff\u6362 list.add(num[max_index]); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else if(max_index>=index-size+1 && num[max_index]==num[index]){ //\u8fd9\u4e2a\u65f6\u5019max\u548c\u65b0\u8fdb\u6765\u7684\u6570\u4e00\u6837\uff0c\u540c\u65f6\u4fdd\u6301\u5728\u6ed1\u52a8\u7a97\u53e3\u5185 //\u867d\u7136\u4e00\u6837\uff0cmax_index\u8fd8\u662f\u6362\u4e00\u4e0b max_index = index; list.add(num[max_index]); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else if(num[max_index]<=num[index]){ //\u65e0\u8bbamax\u662f\u5426\u51fa\u4e86\u6ed1\u52a8\u7a97\u53e3\uff0c\u4f46\u662f\u65b0\u8fdb\u6765\u7684\u6570\u662f\u5927\u4e8e\u5b83\u7684 //\u6ed1\u52a8\u7a97\u53e3\u5185\u7684\u5176\u4ed6\u503c\u90fd\u662f\u5c0f\u4e8e\u8fd9\u4e2a\u503c\u7684\uff0c\u90a3\u4e48\u65b0\u8fdb\u6765\u7684\u8fd9\u4e2a\u503c\u4e00\u5b9a\u662f\u6700\u5927\u503c max_index = index; max = num[max_index]; list.add(num[max_index]); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); }else{ max_index = index-size+1; max = num[index-size+1]; for(int i=index-size+1; i<=index; i++){ if(num[i] > max){ max = num[i]; max_index = i; } } //\u5c06\u7b2c\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\u52a0\u5165\u5230list\u4e2d list.add(max); for(Integer i: list){ System.out.print(i+\" \"); }System.out.println(); } } } return list; } }","title":"64 \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c"},{"location":"code_offer/java61-66/#65","text":"\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u4e4b\u540e\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u4f8b\u5982 a b c e s f c s a d e e \u8fd9\u6837\u76843 X 4 \u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32\"bcced\"\u7684\u8def\u5f84\uff0c\u4f46\u662f\u77e9\u9635\u4e2d\u4e0d\u5305\u542b\"abcb\"\u8def\u5f84\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002 public class Solution { class Path{ int row; int col; public Path(int row, int col){ this.row = row; this.col = col; } } public boolean hasPath(char[] matrix, int rows, int cols, char[] str) { if(matrix.length == 0){ return false; }else if(str.length == 0){ return false; }else{ char[][] mat = new char[rows][cols]; for(int i=0; i<matrix.length; i++){ mat[i/cols][i%cols] = matrix[i]; } char first_char = str[0]; boolean succeed_flag = false; for(int i=0; i<rows; i++){ for(int j=0; j<cols; j++){ if(mat[i][j] == first_char){ int index = 0; Path[] paths = new Path[str.length]; Path path = new Path(i,j); paths[index] = path; if(!succeed_flag){//\u5982\u679c\u8fd8\u6ca1\u6709\u6210\u529f\uff0c\u5219\u53bb\u5bfb\u627e succeed_flag = isCorrect(mat,paths,index,str); } } } } return succeed_flag; } } public boolean isCorrect(char[][] mat, Path[] paths, int index, char[] str){ if(index+1 > str.length-1){ return true; } int rows = mat.length; int cols = mat[0].length; //\u5bfb\u627eindex\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u6ee1\u8db3\u6761\u4ef6\uff1a //\u662findex\u8282\u70b9\u7684\u4e0a\u4e0b\u5de6\u53f3\u3002\u4e0d\u8d8a\u754c\u3002\u662f\u5f53\u524d\u8981\u627e\u7684index+1\u7684\u7b26\u53f7\u3002\u4e0d\u5b58\u5728\u4e8e\u5df2\u7ecf\u5728path\u4e2d\u7684\u8282\u70b9\u4e2d\u3002 //\u5982\u679c\u6ca1\u6709\u627e\u5230\u5c31\u8fd4\u56defalse Path last_path = paths[index]; int x = last_path.row; int y = last_path.col; boolean down = false; boolean up = false; boolean right = false; boolean left = false; if(x+1 < rows && mat[x+1][y] == str[index+1] && canGo(paths, x+1, y, index)){ Path path = new Path(x+1, y); paths[index+1] = path; down = isCorrect(mat,paths,index+1,str); } if(x-1 >= 0 && mat[x-1][y] == str[index+1] && canGo(paths, x-1, y, index)){ Path path = new Path(x-1, y); paths[index+1] = path; up = isCorrect(mat,paths,index+1,str); } if(y+1 < cols && mat[x][y+1] == str[index+1] && canGo(paths, x, y+1, index)){ Path path = new Path(x, y+1); paths[index+1] = path; right = isCorrect(mat,paths,index+1,str); } if(y-1 >= 0 && mat[x][y-1] == str[index+1] && canGo(paths, x, y-1, index)){ Path path = new Path(x, y-1); paths[index+1] = path; left = isCorrect(mat,paths,index+1,str); } return down || up || right || left; } public boolean canGo(Path[] paths, int x, int y, int index){ for(int i=0; i<=index; i++){ if(x == paths[i].row && y == paths[i].col){ return false; } } return true; } }","title":"65 \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"code_offer/java61-66/#66","text":"\u5730\u4e0a\u6709\u4e00\u4e2am\u884c\u548cn\u5217\u7684\u65b9\u683c\u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u68070,0\u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\uff0c\u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c\uff0835,37\uff09\uff0c\u56e0\u4e3a3+5+3+7 = 18\u3002\u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c\uff0835,38\uff09\uff0c\u56e0\u4e3a3+5+3+8 = 19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f public class Solution { int count = 0; public int movingCount(int threshold, int rows, int cols) { if(threshold < 0){return 0;} if(threshold == 0){return 1;} if(rows == 0 || cols == 0){return 0;} boolean[][] visited = new boolean[rows][cols]; visited[0][0] = true; ++count; go(threshold, visited, 0, 0); return count; } public void go(int threshold, boolean[][] visited, int x, int y){ int rows = visited.length; int cols = visited[0].length; boolean down = false; boolean right = false; //\u53ea\u9700\u8981\u5f80\u4e0b\u548c\u5f80\u53f3\u8d70\uff08\u5f80\u4e0a\u548c\u5f80\u5de6\u662f\u9000\u56de\uff0c\u4f46\u662f\u9000\u56de\u4e4b\u540e\u8d70\u7684\u8def\uff0c\u4e00\u5b9a\u5728\u8fd9\u4e4b\u524d\u53ef\u4ee5\u8d70\uff09\uff0c\u53ef\u4ee5\u8d70\u7684\u6761\u4ef6\uff1a //\u5f80\u4e0b\u548c\u5f80\u53f3\u4e0d\u8d85\u8fc7\u8fb9\u754c\uff0cvisited\u4e3afalse\uff0c\u6ee1\u8db3threshold if(x+1<rows && visited[x+1][y] == false && can(threshold, x+1, y)){ visited[x+1][y] = true; ++count; go(threshold, visited,x+1, y); } if(y+1<cols && visited[x][y+1] == false && can(threshold, x, y+1)){ visited[x][y+1] = true; ++count; go(threshold, visited, x, y+1); } } public boolean can(int threshold, int x, int y){ char[] chars_x = String.valueOf(x).toCharArray(); char[] chars_y = String.valueOf(y).toCharArray(); int n = 0; for(int i=0; i<chars_x.length; i++){ n = n + chars_x[i] - 48; } for(int i=0; i<chars_y.length; i++){ n = n + chars_y[i] - 48; } if(n<=threshold){ return true; }else{ return false; } } }","title":"66 \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"code_offer/sort/","text":"\u524d\u8a00 \u56e0\u4e3a\u4e0d\u60f3\u770b\u522b\u4eba\u5199\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u4ee3\u7801\u53c8\u662f\u6211\u81ea\u5df1\u778e\u641e\u7684\uff0c\u53ef\u4ee5\u5b8c\u6210\u6392\u5e8f\u4efb\u52a1\u3002\u4f46\u662f\uff0c\u6211\u7684\u4ee3\u7801\u592a\u957f\u4e86\uff0c\u4e0d\u7b80\u6d01\uff0c\u53ef\u4ee5\u7b97\u662f \u53cd\u4f8b \uff0c\u5982\u679c\u9700\u8981\u5b66\u4e60\uff0c\u63a8\u8350\u5927\u5bb6\u53bb\u68c0\u7d22\u5176\u4ed6\u7684\u4f18\u79c0\u7684\u6392\u5e8f\u4ee3\u7801\u3002;-P \u5192\u6ce1\u6392\u5e8f /** * \u5192\u6ce1\u6392\u5e8f\u662f\u6bcf\u8f6e\u627e\u5230\u672a\u6392\u5e8f\u6570\u7684\u6700\u5927\u503c\uff0c\u5c06\u5176\u653e\u5230\u6700\u540e * \u5177\u4f53\u7684\u662f\u6bcf\u8f6e\u6bd4\u8f83\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\uff0c\u5224\u65ad\u540e\u9762\u7684\u6570\u662f\u4e0d\u662f\u6bd4\u524d\u9762\u7684\u6570\u5927\uff0c\u5982\u679c\u540e\u9762\u7684\u6570\u5927\uff0c\u5219j++\uff0c\u5982\u679c\u524d\u9762\u7684\u6570\u5927\uff0c\u5219\u4ea4\u6362\u3002 * \u8f6e\u6570\u6700\u591a\u4e3a\u6570\u7ec4\u957f\u5ea6-2\u8f6e\uff0c\u5373i=0,1,2...,len-2\u3002 * \u5982\u679c\u67d0\u8f6e\u6ca1\u6709\u4ea4\u6362\u4efb\u4f55\u6570\u7684\u4f4d\u7f6e\uff0c\u5219\u6392\u5e8f\u7ed3\u675f\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff1b\u6700\u574f\u672c\u8eab\u662f\u5012\u5e8f\uff0cO(n^2)\uff1b\u6700\u597d\u672c\u8eab\u662f\u6b63\u5e8f\uff0cO(n)\uff0c\u53ea\u8981\u4e00\u6b21\u904d\u5386\u53d1\u73b0\u6ca1\u6709\u4ea4\u6362\u4efb\u4f55\u6570\uff0c\u5c31\u7ed3\u675f\u4e86\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u53ea\u9700\u8981\u4ea4\u6362\u4e24\u4e2a\u6570\u7684temp * \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a * \u6bcf\u8f6e\u6392\u7684\u6570\u4f1a\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u3002 * @param arr * @return */ public static int[] bubbleSort(int[] arr){ int temp;//\u8bbe\u7f6e\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u56e0\u4e3a\u5982\u679c\u540e\u9762\u7684\u6570\u6bd4\u524d\u9762\u7684\u6570\u5927\uff0c\u5219\u8981\u4ea4\u6362\u76f8\u90bb\u4e24\u4e2a\u6570 //\u53cc\u5c42\u5d4c\u5957 for(int i=0; i<arr.length-1; i++){//\u6392\u5e8f\u6700\u591a\u6392len-2\u8f6e boolean change_flag = false;//\u4e3a\u6bcf\u8f6e\u6392\u5e8f\u8bbe\u7f6e\u4e00\u4e2a\u662f\u5426\u6539\u52a8\u7684flag for(int j=0; j<arr.length-1-i; j++){//\u7b2ci\u8f6e\u7684\u7ed3\u679c\u6392i+1\u4e2a\u6570\uff0c\u5219j\u6700\u540e\u4e00\u4e2a\u503c\u4e3aarr.length-(1+i)-1 if(arr[j] > arr[j+1]){//\u5982\u679c\u524d\u9762\u7684\u6570\u5927\u4e8e\u540e\u9762\u7684\u6570\uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e change_flag = true; temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } } System.out.print(\"round\"+ i + \": \"); print_arr(arr); if(!change_flag){//\u5982\u679c\u67d0\u8f6e\u6ca1\u6709\u4ea4\u6362\u6570\u7684\u4f4d\u7f6e\uff0c\u5219\u6392\u5e8f\u7ed3\u675f\u3002 return arr; } } return arr; } \u9009\u62e9\u6392\u5e8f /** * \u9009\u62e9\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u6bcf\u8f6e\u627e\u5230\u6700\u5c0f\u7684\u6570\uff0c\u4e0e\u672a\u6392\u5e8f\u6570\u7684\u6700\u524d\u9762\u7684\u503c\u4ea4\u6362 * \u5982\u679c\u672a\u6392\u5e8f\u503c\u7b2c\u4e00\u4e2a\u5c31\u662f\u6700\u5c0f\u503c\uff0c\u5219\u4e0d\u7528\u4ea4\u6362(\u4ea4\u6362\u4e5f\u884c) * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff1b\u6700\u574fO(n^2)\uff1b\u6700\u597dO(n^2)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a\uff0c\u56e0\u4e3a\u6bcf\u6b21\u627e\u5230\u6700\u5c0f\u7684\u6570\u4e4b\u540e\uff0c\u8981\u4e0e\u672a\u6392\u5e8f\u6570\u6700\u524d\u9762\u7684\u6570\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u4f1a\u6253\u4e71\u76f8\u540c\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 * \u6bcf\u8f6e\u6392\u7684\u6570\u4f1a\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] selectSort(int[] arr){ for(int i=0; i<arr.length-1; i++){ int min_index = i;//i\u7684\u4e0b\u6807\u662f\u672a\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u503c\uff0cmin_index\u4fdd\u5b58\u672a\u6392\u5e8f\u6570\u7684\u6700\u5c0f\u503c\u7684index for(int j=i+1; j<arr.length; j++){//\u627e\u5230\u672a\u6392\u5e8f\u6570\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807 if(arr[j] < arr[min_index]){ min_index = j; } } if(min_index != i){//\u5c06\u672a\u6392\u5e8f\u6570\u7684\u6700\u5c0f\u503c\u4ea4\u6362\u5230\u672a\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u3002\u672a\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u503c\u7684\u4e0b\u6807\u4e3ai int temp = arr[i]; arr[i] = arr[min_index]; arr[min_index] = temp; } System.out.print(\"round\" + i + \":\"); print_arr(arr); } return arr; } \u63d2\u5165\u6392\u5e8f /** * \u63d2\u5165\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u662f\u4ece\u5de6\u5f80\u53f3\uff0c\u5bf9\u6bcf\u4e2a\u6570\uff0c\u5c06\u5176\u4e0e\u524d\u9762\u7684\u6570\u6bd4\u5927\u5c0f\u3002 * \u5982\u679c\u6bd4\u524d\u9762\u7684\u6570\u5c0f\uff0c\u5c31\u4ea4\u6362\u5230\u524d\u9762\u53bb\uff0c\u5982\u679c\u8fd8\u6bd4\u524d\u9762\u7684\u6570\u5c0f\uff0c\u90a3\u4e48\u7ee7\u7eed\u4ea4\u6362\uff0c\u76f4\u5230\u8fd9\u4e2a\u6570\u6bd4\u524d\u9762\u7684\u6570\u5927\u7684\u4f4d\u7f6e\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff1b\u6700\u574fO(n^2)\uff0c\u5012\u5e8f\uff1b\u6700\u597dO(n)\uff0c\u6b63\u5e8f * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a * \u6bcf\u8f6e\u4e0d\u4e00\u5b9a\u662f\u6700\u7ec8\u4f4d\u7f6e\u3002 * @param arr * @return */ public static int[] insertSort(int[] arr){ for(int i=1; i<arr.length; i++){ for(int j=i; j>0; j--){ if(arr[j] < arr[j-1]){ int temp = arr[j-1]; arr[j-1] = arr[j]; arr[j] = temp; } } System.out.print(\"round\"+i+\":\"); print_arr(arr); } return arr; } \u5e0c\u5c14\u6392\u5e8f /** * \u5e0c\u5c14\u6392\u5e8f(\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u79cd\uff0c\u53c8\u79f0\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f(Diminishing increment sort)) * \u662f\u6309\u6b65\u957f\uff0c\u5c06\u76f8\u9694\u540c\u6837\u6b65\u957f\u7684\u6570\u636e\u5206\u4e3a\u4e00\u7ec4\uff0c\u5bf9step\u4e2a\u7ec4\u5206\u522b\u63d2\u5165\u6392\u5e8f\u3002 * \u7136\u540e\u4e0d\u65ad\u51cf\u5c0f\u6b65\u957f\uff0c\u6700\u540e\u4e00\u8f6e\u7684\u6b65\u957f\u4e3a1\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u589e\u91cf\u6709\u5173\uff0c\u5e0c\u5c14\u589e\u91cf\u4e3aO(n^2)\uff0cHibbard\u589e\u91cf\u4e3aO(n^(3/2))\uff1b\u6700\u574fO(n^2)\uff1b\u6700\u597dO(nlog2 2n)\u3002\u53c2\u8003\u767e\u5ea6\u767e\u79d1 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a * \u5e76\u4e0d\u4e00\u5b9a\u5230\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] shellSort(int[] arr){ int step = 4; int step_reduce = 2; while(step > 0){//\u6bcf\u8f6e\u4e00\u4e2a\u6b65\u957f\uff0c\u4e00\u4e2a\u6b65\u957f\u4e00\u8f6e for(int i=0; i<step; i++){//\u9488\u5bf9\u5f53\u524d\u6b65\u957f\uff0c\u5c06\u6570\u7ec4\u5206\u4e3a\u4e86step\u4e2a\u7ec4\uff0c\u6bcf\u7ec4\u7684\u6570\u636e\u5206\u522b\u6392\u5e8f for(int j=i+step; j<arr.length; j=j+step){//\u9694\u7a7a\u6392\u5e8f(\u63d2\u5165\u6392\u5e8f) for(int k=(j-i)/step; k>0; k--){ if(arr[i+(k-1)*step] > arr[i+k*step]){//\u5982\u679c\u540e\u9762\u7684\u6570\u6bd4\u8f83\u5927\uff0c\u5219\u4ea4\u6362arr[j]\u548carr[j-step] System.out.println(\"i=\"+i+\" k=\"+k+\" \"+arr[i+(k-1)*step]+\"<-->\"+arr[i+k*step]); int temp = arr[i+(k-1)*step]; arr[i+(k-1)*step] = arr[i+k*step]; arr[i+k*step] = temp; } } } print_arr(arr); } if(step == 1){ return arr; }//\u5982\u679c\u5f53\u524d step = step - step_reduce; if(step<1){ step = 1; } } return arr; } \u5feb\u901f\u6392\u5e8f /** * \u5feb\u901f\u6392\u5e8f\u4e3b\u8981\u662f\u6709\u4e24\u4e2a\u6307\u9488\uff0ci\u5728\u524d\uff0cj\u5728\u5c3e\u3002i\u5bfb\u627e\u6bd4temp\u5927\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230j\u7684\u4f4d\u7f6e\u4e0a\uff1bj\u5bfb\u627e\u6bd4temp\u5c0f\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230i\u7684\u4f4d\u7f6e\u4e0a\u3002 * \u9996\u5148\u5c06\u5f85\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u6570\u503c\u8d4b\u503c\u7ed9temp\uff0c\u540e\u90e8\u5206\u6307\u9488j\u5148\u5411\u524d\u5bfb\u627e\uff0c\u627e\u5230\u6bd4temp\u5c0f\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230arr[i]\u4e0a * \u7136\u540e\u6307\u9488j\u4e0d\u52a8\uff0c\u6307\u9488i\u5411\u540e\u5bfb\u627e\u6bd4temp\u5927\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230arr[j]\u4e0a\uff0c\u518d\u6362j\u5411\u524d\u5bfb\u627e * \u76f4\u5230i=j\uff0c\u5219\u4f4d\u7f6ei\u6216j\u5219\u662ftemp\u6570\u503c\u7684\u6700\u7ec8\u4f4d\u7f6e\u3002 * temp\u7684\u6700\u7ec8\u4f4d\u7f6e\u5c06\u6570\u5206\u6210\u524d\u540e\u4e24\u90e8\u5206\uff0c\u5206\u522b\u9012\u5f52\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff0c\u6700\u574fO(n^2)\uff1b\u6700\u597dO(nlog2 n)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff0c\u4e3b\u8981\u9012\u5f52\u8c03\u7528\u3002 * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a * \u6bcf\u8f6e\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] quickSort(int[] arr){ return qSort(arr, 0, arr.length); } public static int[] qSort(int[] arr, int start, int end){ if(end - start <= 1){//\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6570\u6216\u8005\u4e3a\u7a7a\u4e86\uff0c\u5219\u4e0d\u7528\u6392\u4e86 return arr; } int temp = arr[start];//\u5c06\u7b2c\u4e00\u4e2a\u6570\u8d4b\u503c\u7ed9temp int temp_index = start;//\u968f\u4fbf\u8d4b\u4e00\u4e2a\u503c\u7ed9temp_index int i = start;//i\u4e3a\u524d\u90e8\u5206\u6307\u9488 int j = end-1;//j\u4e3a\u540e\u90e8\u5206\u6307\u9488 while(i < j){//\u5f53i\u548cj\u6ca1\u6709\u76f8\u9047\u7684\u65f6\u5019 while(arr[j] >= temp && j > i){//\u9996\u5148j\u5f80\u524d\u8d70\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u6bd4temp\u5927\u7684\u503c\uff0c\u5e76\u4e14\u6ca1\u6709\u9047\u5230i\uff0c\u5219\u5411\u524d\u8d70\u3002 j--; } if(j == i){//\u4e0a\u9762\u7684while\u4e0d\u6ee1\u8db3\u7684\u539f\u56e0\uff0c\u4e00\u4e2a\u662fj\u4e0ei\u76f8\u9047\u4e86\u3002\u76f8\u9047\u4e86\uff0c\u5219\u5c06temp\u8d4b\u503c\u7ed9arr[j]\uff0c\u5219temp\u7684\u6570\u503c\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u3002 arr[j] = temp; temp_index = j; break;//\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u4e86\u5219\u8fd9\u4e00\u8f6e\u6392\u5e8f\u7ed3\u675f\uff0c\u540e\u9762\u9012\u5f52\u5de6\u53f3\u4e24\u90e8\u5206\u3002 }else{ arr[i] = arr[j];//while\u4e0d\u6ee1\u8db3\u7684\u53e6\u5916\u4e00\u4e2a\u539f\u56e0\uff0c\u662fj\u627e\u5230\u4e86\u6bd4temp\u5c0fde\u503c\uff0c\u5219\u5c06j\u6240\u6307\u7684\u503c\u8986\u76d6\u5230i\u4e0a\u3002(\u540e\u9762i\u5f00\u59cb\u5411\u540e\u8d70) } while(arr[i] <= temp && i < j){//i\u5411\u540e\u8d70\uff0c\u5728\u6ca1\u6709\u627e\u5230\u6bd4temp\u5927\u7684\u6570\u5e76\u4e14\u6ca1\u6709\u4e0ej\u76f8\u9047\u65f6\uff0c\u5411\u540e\u8d70\u3002 i++; } if(i == j){//\u5982\u679c\u4e0ej\u76f8\u9047\uff0c\u5219temp\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e arr[i] = temp; temp_index = j; break; }else{ arr[j] = arr[i];//\u5982\u679ci\u627e\u5230\u4e86\u6bd4temp\u5927\u7684\u503c\uff0c\u5219\u5c06i\u6240\u6307\u7684\u503c\u8986\u76d6\u5230j\u4e0a\u3002 } print_arr(arr); } qSort(arr, start, temp_index);//\u9012\u5f52\u6392\u5e8f\u5de6\u53f3\u4e24\u90e8\u5206 qSort(arr, temp_index+1, end); return arr; } \u5f52\u5e76\u6392\u5e8f /** * \u5f52\u5e76\u6392\u5e8f\u7684\u601d\u60f3\u662f\u4e00\u4e2a\u6570\u4e0d\u6392\u5e8f\uff0c\u4e24\u4e2a\u7ec4\u6392\u5e8f\u3002\u4e24\u4e24\u5f52\u5e76\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff1b\u6700\u574fO(nlog2 n)\uff1b\u6700\u597dO(nlog2 n)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e24\u8def\u5f52\u5e76\u7684\u65f6\u5019\u8981\u6392\u5e8f\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u8d77\u6765\u3002\u8fd8\u6709\u9012\u5f52\u8c03\u7528\u3002 * \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a * \u4e0d\u4e00\u5b9a\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] mergeSort(int[] arr){ int start = 0; int end = arr.length; return merge(arr, start, end); } public static int[] merge(int[] arr, int start, int end){ if(end-start != 1){ int mid = (start + end + 1)/2 ;//\u8ba1\u7b97mid\uff0cmid\u4e3a\u540e\u534a\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u4e0b\u6807 int front = start;//front\u4e3a\u524d\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488 int back = mid;//back\u4e3a\u540e\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488 merge(arr, start, mid); merge(arr, mid, end); //\u6536\u62fe\u597d\u524d\u540e\u4e24\u534a\u7684\u90e8\u5206\u4e4b\u540e\uff0c\u518d\u6536\u62fe\u5408\u5e76\u7684\u90e8\u5206 int[] temp = new int[end-start];//\u5efa\u7acb\u4e00\u4e2a\u4e34\u65f6\u7684\u6570\u7ec4\uff0c\u9010\u4e2a\u4e2a\u4fdd\u5b58\u524d\u540e\u4e24\u90e8\u5206\u7684\u6700\u5c0f\u503c for(int i=0; i<temp.length; i++){ if(front != mid && back != end){//\u5982\u679c\u524d\u540e\u4e24\u4e2a\u79fb\u52a8\u6307\u9488\u90fd\u6ca1\u6709\u51fa\u754c\uff0c\u5219\u5224\u65ad\u8c01\u66f4\u5c0f if(arr[front] <= arr[back]){ temp[i] = arr[front]; front++;//\u5c06\u66f4\u5c0f\u7684\u503c\u5199\u5165temp\u6570\u7ec4\u540e\uff0c\u8bb0\u5f97\u6307\u9488\u540e\u79fb }else{ temp[i] = arr[back]; back++; } }else if(front == mid){ temp[i] = arr[back];//\u5982\u679c\u524d\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488\u5df2\u51fa\u754c\uff0c\u5219temp\u6570\u7ec4\u76f4\u63a5\u5199\u5165\u540e\u534a\u90e8\u5206\u7684\u6570 back++; }else{ temp[i] = arr[front];//\u540e\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488\u5df2\u51fa\u754c front++; } } for(int i=0; i<temp.length; i++){//\u8986\u76d6\u5230\u539f\u6570\u7ec4\u4e0a arr[i+start] = temp[i]; } print_arr(arr); } return arr; } \u5806\u6392\u5e8f /** * \u5806\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5982\u679c\u5347\u5e8f\u6392\u5217\uff0c\u5219\u6784\u9020\u5927\u9876\u5806\uff1b\u5982\u679c\u964d\u5e8f\u6392\u5217\uff0c\u5219\u6784\u9020\u5c0f\u9876\u5806\u3002\u672c\u4ee3\u7801\u5347\u5e8f\u6392\u5217\u3002 * \u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u6ca1\u6709\u5927\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\uff0c\u5219\u5411\u524d\uff0c\u627e\u5012\u6570\u7b2c\u4e8c\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u3002 * \u5982\u679c\u5de6\u53f3\u5b50\u7ed3\u70b9\u6709\u5927\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\uff0c\u5219\u8c03\u6362\u5230\u7236\u7ed3\u70b9\u4e0a\u3002\u4f46\u662f\u540c\u65f6\u8981\u8003\u8651\u5c06\u7236\u7ed3\u70b9\u8c03\u6362\u5230\u5b50\u7ed3\u70b9\u4e0a\u540e\uff0c\u662f\u5426\u4f1a\u5bf9\u540e\u9762\u7684\u7ed3\u70b9\u6709\u5f71\u54cd\u3002 * \u5982\u679c\u8c03\u6362\u5230\u5b50\u7ed3\u70b9\u4e4b\u540e\uff0c\u5b50\u7ed3\u70b9\u4f5c\u4e3a\u7236\u7ed3\u70b9\uff0c\u6bd4\u5b83\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u90fd\u5927\uff0c\u5219\u6ca1\u95ee\u9898\u3002 * \u5982\u679c\u6bd4\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u67d0\u4e2a\u503c\u5c0f\uff0c\u5219\u8981\u5c06\u8f83\u5927\u7684\u5b50\u7ed3\u70b9\u8c03\u6362\u4e0a\u6765\u3002 * \u8c03\u6362\u4e4b\u540e\u8fd8\u8981\u7ee7\u7eed\u8003\u8651\u662f\u5426\u5f71\u54cd\u4e86\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u8fd9\u91cc\u7528\u7684\u662fwhile\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff1b\u6700\u574fO(nlog2 n)\uff1b\u6700\u597dO(nlog2 n)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e24\u8def\u5f52\u5e76\u7684\u65f6\u5019\u8981\u6392\u5e8f\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u8d77\u6765\u3002\u8fd8\u6709\u9012\u5f52\u8c03\u7528\u3002 * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a * \u6bcf\u8f6e\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u3002 * @param arr * @return */ public static int[] heapSort(int[] arr){ return hSort(arr, 0, arr.length-1); } public static int[] hSort(int[] arr, int start, int end){ if(end-start <= 0){ return arr; } int temp; for(int i=(end-1)/2; i>-1; i--){//\u627e\u5230\u672a\u6392\u5e8f\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9 int max_child_index = 0;//\u8981\u6bd4\u8f83\u7236\u7ed3\u70b9\u548c\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u5927\u5c0f\uff0c\u4fdd\u5b58\u4e0b\u6807 if(i*2+2 <= end){//\u5982\u679c\u8be5\u7236\u7ed3\u70b9\u7684\u53f3\u7ed3\u70b9\u5b58\u5728\uff0c\u5219\u5de6\u53f3\u5b50\u7ed3\u70b9\u6bd4\u8f83\u4e00\u4e0b\uff0c\u770b\u8c01\u5927 if(arr[i*2+1] >= arr[i*2+2]){ max_child_index = i*2+1; }else{ max_child_index = i*2+2; } }else{//\u5176\u5de6\u5b50\u7ed3\u70b9\u4e00\u5b9a\u5b58\u5728\uff0c\u4e0d\u7136\u4e0d\u662f\u7236\u7ed3\u70b9 max_child_index = i*2+1; } if(arr[max_child_index] > arr[i]){//\u5982\u679c\u5b50\u7ed3\u70b9\u5927\u4e8e\u7236\u7ed3\u70b9\uff0c\u4ea4\u6362 temp = arr[i]; arr[i] = arr[max_child_index]; arr[max_child_index] = temp; //\u7236\u7ed3\u70b9\u4ea4\u6362\u5230\u5b50\u7ed3\u70b9\u4e4b\u540e\uff0c\u8981\u8003\u8651\u662f\u4e0d\u662f\u5f71\u54cd\u4e86\u4e0b\u9762\u7684\u7ed3\u70b9 int j = max_child_index; while(j*2+1<=end){//\u5f53\u524d\u7ed3\u70b9\u662f\u7236\u7ed3\u70b9\u7684\u65f6\u5019 if(j*2+2 <= end){//\u5982\u679c\u4ea4\u6362\u4e0b\u6765\u7684\u6570\u6709\u53f3\u5b50\u7ed3\u70b9\uff0c\u5219\u627e\u5230\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u8f83\u5927\u503c\uff0c\u8bb0\u4e0b\u5b83\u7684\u4e0b\u6807 if(arr[j*2+1] >= arr[j*2+2]){ max_child_index = j*2+1; }else{ max_child_index = j*2+2; } }else{//\u5982\u679c\u53ea\u6709\u5de6\u7ed3\u70b9\uff0c\u5219\u8f83\u5927\u503c\u7684\u4e0b\u6807\u5c31\u662f\u5176\u5de6\u5b50\u7ed3\u70b9 max_child_index = j*2+1; } if(arr[j] < arr[max_child_index]){//\u5982\u679c\u7236\u7ed3\u70b9\u6bd4\u5b50\u7ed3\u70b9\u7684\u8f83\u5927\u8005\u5c0f\uff0c\u5219\u9700\u8981\u5c06\u7236\u7ed3\u70b9\u4ea4\u6362\u4e0b\u53bb\u3002 temp = arr[j]; arr[j] = arr[max_child_index]; arr[max_child_index] = temp; }else{//\u5982\u679c\u7236\u7ed3\u70b9\u6bd4\u5b50\u7ed3\u70b9\u90fd\u5927\uff0c\u5219\u6ca1\u95ee\u9898\uff0c\u5f71\u54cd\u89e3\u9664\u3002 break; } } } } temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; print_arr(arr); hSort(arr, start, end-1); return arr; }","title":"\u57fa\u7840\u6392\u5e8f"},{"location":"code_offer/sort/#_1","text":"\u56e0\u4e3a\u4e0d\u60f3\u770b\u522b\u4eba\u5199\u7684\u4ee3\u7801\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u4ee3\u7801\u53c8\u662f\u6211\u81ea\u5df1\u778e\u641e\u7684\uff0c\u53ef\u4ee5\u5b8c\u6210\u6392\u5e8f\u4efb\u52a1\u3002\u4f46\u662f\uff0c\u6211\u7684\u4ee3\u7801\u592a\u957f\u4e86\uff0c\u4e0d\u7b80\u6d01\uff0c\u53ef\u4ee5\u7b97\u662f \u53cd\u4f8b \uff0c\u5982\u679c\u9700\u8981\u5b66\u4e60\uff0c\u63a8\u8350\u5927\u5bb6\u53bb\u68c0\u7d22\u5176\u4ed6\u7684\u4f18\u79c0\u7684\u6392\u5e8f\u4ee3\u7801\u3002;-P","title":"\u524d\u8a00"},{"location":"code_offer/sort/#_2","text":"/** * \u5192\u6ce1\u6392\u5e8f\u662f\u6bcf\u8f6e\u627e\u5230\u672a\u6392\u5e8f\u6570\u7684\u6700\u5927\u503c\uff0c\u5c06\u5176\u653e\u5230\u6700\u540e * \u5177\u4f53\u7684\u662f\u6bcf\u8f6e\u6bd4\u8f83\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5927\u5c0f\uff0c\u5224\u65ad\u540e\u9762\u7684\u6570\u662f\u4e0d\u662f\u6bd4\u524d\u9762\u7684\u6570\u5927\uff0c\u5982\u679c\u540e\u9762\u7684\u6570\u5927\uff0c\u5219j++\uff0c\u5982\u679c\u524d\u9762\u7684\u6570\u5927\uff0c\u5219\u4ea4\u6362\u3002 * \u8f6e\u6570\u6700\u591a\u4e3a\u6570\u7ec4\u957f\u5ea6-2\u8f6e\uff0c\u5373i=0,1,2...,len-2\u3002 * \u5982\u679c\u67d0\u8f6e\u6ca1\u6709\u4ea4\u6362\u4efb\u4f55\u6570\u7684\u4f4d\u7f6e\uff0c\u5219\u6392\u5e8f\u7ed3\u675f\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff1b\u6700\u574f\u672c\u8eab\u662f\u5012\u5e8f\uff0cO(n^2)\uff1b\u6700\u597d\u672c\u8eab\u662f\u6b63\u5e8f\uff0cO(n)\uff0c\u53ea\u8981\u4e00\u6b21\u904d\u5386\u53d1\u73b0\u6ca1\u6709\u4ea4\u6362\u4efb\u4f55\u6570\uff0c\u5c31\u7ed3\u675f\u4e86\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\uff0c\u53ea\u9700\u8981\u4ea4\u6362\u4e24\u4e2a\u6570\u7684temp * \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a * \u6bcf\u8f6e\u6392\u7684\u6570\u4f1a\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u3002 * @param arr * @return */ public static int[] bubbleSort(int[] arr){ int temp;//\u8bbe\u7f6e\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u56e0\u4e3a\u5982\u679c\u540e\u9762\u7684\u6570\u6bd4\u524d\u9762\u7684\u6570\u5927\uff0c\u5219\u8981\u4ea4\u6362\u76f8\u90bb\u4e24\u4e2a\u6570 //\u53cc\u5c42\u5d4c\u5957 for(int i=0; i<arr.length-1; i++){//\u6392\u5e8f\u6700\u591a\u6392len-2\u8f6e boolean change_flag = false;//\u4e3a\u6bcf\u8f6e\u6392\u5e8f\u8bbe\u7f6e\u4e00\u4e2a\u662f\u5426\u6539\u52a8\u7684flag for(int j=0; j<arr.length-1-i; j++){//\u7b2ci\u8f6e\u7684\u7ed3\u679c\u6392i+1\u4e2a\u6570\uff0c\u5219j\u6700\u540e\u4e00\u4e2a\u503c\u4e3aarr.length-(1+i)-1 if(arr[j] > arr[j+1]){//\u5982\u679c\u524d\u9762\u7684\u6570\u5927\u4e8e\u540e\u9762\u7684\u6570\uff0c\u5219\u4ea4\u6362\u4f4d\u7f6e change_flag = true; temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } } System.out.print(\"round\"+ i + \": \"); print_arr(arr); if(!change_flag){//\u5982\u679c\u67d0\u8f6e\u6ca1\u6709\u4ea4\u6362\u6570\u7684\u4f4d\u7f6e\uff0c\u5219\u6392\u5e8f\u7ed3\u675f\u3002 return arr; } } return arr; }","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"code_offer/sort/#_3","text":"/** * \u9009\u62e9\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u6bcf\u8f6e\u627e\u5230\u6700\u5c0f\u7684\u6570\uff0c\u4e0e\u672a\u6392\u5e8f\u6570\u7684\u6700\u524d\u9762\u7684\u503c\u4ea4\u6362 * \u5982\u679c\u672a\u6392\u5e8f\u503c\u7b2c\u4e00\u4e2a\u5c31\u662f\u6700\u5c0f\u503c\uff0c\u5219\u4e0d\u7528\u4ea4\u6362(\u4ea4\u6362\u4e5f\u884c) * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff1b\u6700\u574fO(n^2)\uff1b\u6700\u597dO(n^2)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a\uff0c\u56e0\u4e3a\u6bcf\u6b21\u627e\u5230\u6700\u5c0f\u7684\u6570\u4e4b\u540e\uff0c\u8981\u4e0e\u672a\u6392\u5e8f\u6570\u6700\u524d\u9762\u7684\u6570\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u4f1a\u6253\u4e71\u76f8\u540c\u6570\u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 * \u6bcf\u8f6e\u6392\u7684\u6570\u4f1a\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] selectSort(int[] arr){ for(int i=0; i<arr.length-1; i++){ int min_index = i;//i\u7684\u4e0b\u6807\u662f\u672a\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u503c\uff0cmin_index\u4fdd\u5b58\u672a\u6392\u5e8f\u6570\u7684\u6700\u5c0f\u503c\u7684index for(int j=i+1; j<arr.length; j++){//\u627e\u5230\u672a\u6392\u5e8f\u6570\u7684\u6700\u5c0f\u503c\u7684\u4e0b\u6807 if(arr[j] < arr[min_index]){ min_index = j; } } if(min_index != i){//\u5c06\u672a\u6392\u5e8f\u6570\u7684\u6700\u5c0f\u503c\u4ea4\u6362\u5230\u672a\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u3002\u672a\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u503c\u7684\u4e0b\u6807\u4e3ai int temp = arr[i]; arr[i] = arr[min_index]; arr[min_index] = temp; } System.out.print(\"round\" + i + \":\"); print_arr(arr); } return arr; }","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"code_offer/sort/#_4","text":"/** * \u63d2\u5165\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u662f\u4ece\u5de6\u5f80\u53f3\uff0c\u5bf9\u6bcf\u4e2a\u6570\uff0c\u5c06\u5176\u4e0e\u524d\u9762\u7684\u6570\u6bd4\u5927\u5c0f\u3002 * \u5982\u679c\u6bd4\u524d\u9762\u7684\u6570\u5c0f\uff0c\u5c31\u4ea4\u6362\u5230\u524d\u9762\u53bb\uff0c\u5982\u679c\u8fd8\u6bd4\u524d\u9762\u7684\u6570\u5c0f\uff0c\u90a3\u4e48\u7ee7\u7eed\u4ea4\u6362\uff0c\u76f4\u5230\u8fd9\u4e2a\u6570\u6bd4\u524d\u9762\u7684\u6570\u5927\u7684\u4f4d\u7f6e\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\uff1b\u6700\u574fO(n^2)\uff0c\u5012\u5e8f\uff1b\u6700\u597dO(n)\uff0c\u6b63\u5e8f * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a * \u6bcf\u8f6e\u4e0d\u4e00\u5b9a\u662f\u6700\u7ec8\u4f4d\u7f6e\u3002 * @param arr * @return */ public static int[] insertSort(int[] arr){ for(int i=1; i<arr.length; i++){ for(int j=i; j>0; j--){ if(arr[j] < arr[j-1]){ int temp = arr[j-1]; arr[j-1] = arr[j]; arr[j] = temp; } } System.out.print(\"round\"+i+\":\"); print_arr(arr); } return arr; }","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"code_offer/sort/#_5","text":"/** * \u5e0c\u5c14\u6392\u5e8f(\u63d2\u5165\u6392\u5e8f\u7684\u4e00\u79cd\uff0c\u53c8\u79f0\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f(Diminishing increment sort)) * \u662f\u6309\u6b65\u957f\uff0c\u5c06\u76f8\u9694\u540c\u6837\u6b65\u957f\u7684\u6570\u636e\u5206\u4e3a\u4e00\u7ec4\uff0c\u5bf9step\u4e2a\u7ec4\u5206\u522b\u63d2\u5165\u6392\u5e8f\u3002 * \u7136\u540e\u4e0d\u65ad\u51cf\u5c0f\u6b65\u957f\uff0c\u6700\u540e\u4e00\u8f6e\u7684\u6b65\u957f\u4e3a1\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u4e0e\u589e\u91cf\u6709\u5173\uff0c\u5e0c\u5c14\u589e\u91cf\u4e3aO(n^2)\uff0cHibbard\u589e\u91cf\u4e3aO(n^(3/2))\uff1b\u6700\u574fO(n^2)\uff1b\u6700\u597dO(nlog2 2n)\u3002\u53c2\u8003\u767e\u5ea6\u767e\u79d1 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a * \u5e76\u4e0d\u4e00\u5b9a\u5230\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] shellSort(int[] arr){ int step = 4; int step_reduce = 2; while(step > 0){//\u6bcf\u8f6e\u4e00\u4e2a\u6b65\u957f\uff0c\u4e00\u4e2a\u6b65\u957f\u4e00\u8f6e for(int i=0; i<step; i++){//\u9488\u5bf9\u5f53\u524d\u6b65\u957f\uff0c\u5c06\u6570\u7ec4\u5206\u4e3a\u4e86step\u4e2a\u7ec4\uff0c\u6bcf\u7ec4\u7684\u6570\u636e\u5206\u522b\u6392\u5e8f for(int j=i+step; j<arr.length; j=j+step){//\u9694\u7a7a\u6392\u5e8f(\u63d2\u5165\u6392\u5e8f) for(int k=(j-i)/step; k>0; k--){ if(arr[i+(k-1)*step] > arr[i+k*step]){//\u5982\u679c\u540e\u9762\u7684\u6570\u6bd4\u8f83\u5927\uff0c\u5219\u4ea4\u6362arr[j]\u548carr[j-step] System.out.println(\"i=\"+i+\" k=\"+k+\" \"+arr[i+(k-1)*step]+\"<-->\"+arr[i+k*step]); int temp = arr[i+(k-1)*step]; arr[i+(k-1)*step] = arr[i+k*step]; arr[i+k*step] = temp; } } } print_arr(arr); } if(step == 1){ return arr; }//\u5982\u679c\u5f53\u524d step = step - step_reduce; if(step<1){ step = 1; } } return arr; }","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"code_offer/sort/#_6","text":"/** * \u5feb\u901f\u6392\u5e8f\u4e3b\u8981\u662f\u6709\u4e24\u4e2a\u6307\u9488\uff0ci\u5728\u524d\uff0cj\u5728\u5c3e\u3002i\u5bfb\u627e\u6bd4temp\u5927\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230j\u7684\u4f4d\u7f6e\u4e0a\uff1bj\u5bfb\u627e\u6bd4temp\u5c0f\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230i\u7684\u4f4d\u7f6e\u4e0a\u3002 * \u9996\u5148\u5c06\u5f85\u6392\u5e8f\u6570\u7684\u7b2c\u4e00\u4e2a\u6570\u503c\u8d4b\u503c\u7ed9temp\uff0c\u540e\u90e8\u5206\u6307\u9488j\u5148\u5411\u524d\u5bfb\u627e\uff0c\u627e\u5230\u6bd4temp\u5c0f\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230arr[i]\u4e0a * \u7136\u540e\u6307\u9488j\u4e0d\u52a8\uff0c\u6307\u9488i\u5411\u540e\u5bfb\u627e\u6bd4temp\u5927\u7684\u6570\uff0c\u5c06\u5176\u5199\u5230arr[j]\u4e0a\uff0c\u518d\u6362j\u5411\u524d\u5bfb\u627e * \u76f4\u5230i=j\uff0c\u5219\u4f4d\u7f6ei\u6216j\u5219\u662ftemp\u6570\u503c\u7684\u6700\u7ec8\u4f4d\u7f6e\u3002 * temp\u7684\u6700\u7ec8\u4f4d\u7f6e\u5c06\u6570\u5206\u6210\u524d\u540e\u4e24\u90e8\u5206\uff0c\u5206\u522b\u9012\u5f52\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff0c\u6700\u574fO(n^2)\uff1b\u6700\u597dO(nlog2 n)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff0c\u4e3b\u8981\u9012\u5f52\u8c03\u7528\u3002 * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a * \u6bcf\u8f6e\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] quickSort(int[] arr){ return qSort(arr, 0, arr.length); } public static int[] qSort(int[] arr, int start, int end){ if(end - start <= 1){//\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6570\u6216\u8005\u4e3a\u7a7a\u4e86\uff0c\u5219\u4e0d\u7528\u6392\u4e86 return arr; } int temp = arr[start];//\u5c06\u7b2c\u4e00\u4e2a\u6570\u8d4b\u503c\u7ed9temp int temp_index = start;//\u968f\u4fbf\u8d4b\u4e00\u4e2a\u503c\u7ed9temp_index int i = start;//i\u4e3a\u524d\u90e8\u5206\u6307\u9488 int j = end-1;//j\u4e3a\u540e\u90e8\u5206\u6307\u9488 while(i < j){//\u5f53i\u548cj\u6ca1\u6709\u76f8\u9047\u7684\u65f6\u5019 while(arr[j] >= temp && j > i){//\u9996\u5148j\u5f80\u524d\u8d70\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u6bd4temp\u5927\u7684\u503c\uff0c\u5e76\u4e14\u6ca1\u6709\u9047\u5230i\uff0c\u5219\u5411\u524d\u8d70\u3002 j--; } if(j == i){//\u4e0a\u9762\u7684while\u4e0d\u6ee1\u8db3\u7684\u539f\u56e0\uff0c\u4e00\u4e2a\u662fj\u4e0ei\u76f8\u9047\u4e86\u3002\u76f8\u9047\u4e86\uff0c\u5219\u5c06temp\u8d4b\u503c\u7ed9arr[j]\uff0c\u5219temp\u7684\u6570\u503c\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u3002 arr[j] = temp; temp_index = j; break;//\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u4e86\u5219\u8fd9\u4e00\u8f6e\u6392\u5e8f\u7ed3\u675f\uff0c\u540e\u9762\u9012\u5f52\u5de6\u53f3\u4e24\u90e8\u5206\u3002 }else{ arr[i] = arr[j];//while\u4e0d\u6ee1\u8db3\u7684\u53e6\u5916\u4e00\u4e2a\u539f\u56e0\uff0c\u662fj\u627e\u5230\u4e86\u6bd4temp\u5c0fde\u503c\uff0c\u5219\u5c06j\u6240\u6307\u7684\u503c\u8986\u76d6\u5230i\u4e0a\u3002(\u540e\u9762i\u5f00\u59cb\u5411\u540e\u8d70) } while(arr[i] <= temp && i < j){//i\u5411\u540e\u8d70\uff0c\u5728\u6ca1\u6709\u627e\u5230\u6bd4temp\u5927\u7684\u6570\u5e76\u4e14\u6ca1\u6709\u4e0ej\u76f8\u9047\u65f6\uff0c\u5411\u540e\u8d70\u3002 i++; } if(i == j){//\u5982\u679c\u4e0ej\u76f8\u9047\uff0c\u5219temp\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e arr[i] = temp; temp_index = j; break; }else{ arr[j] = arr[i];//\u5982\u679ci\u627e\u5230\u4e86\u6bd4temp\u5927\u7684\u503c\uff0c\u5219\u5c06i\u6240\u6307\u7684\u503c\u8986\u76d6\u5230j\u4e0a\u3002 } print_arr(arr); } qSort(arr, start, temp_index);//\u9012\u5f52\u6392\u5e8f\u5de6\u53f3\u4e24\u90e8\u5206 qSort(arr, temp_index+1, end); return arr; }","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"code_offer/sort/#_7","text":"/** * \u5f52\u5e76\u6392\u5e8f\u7684\u601d\u60f3\u662f\u4e00\u4e2a\u6570\u4e0d\u6392\u5e8f\uff0c\u4e24\u4e2a\u7ec4\u6392\u5e8f\u3002\u4e24\u4e24\u5f52\u5e76\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff1b\u6700\u574fO(nlog2 n)\uff1b\u6700\u597dO(nlog2 n)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e24\u8def\u5f52\u5e76\u7684\u65f6\u5019\u8981\u6392\u5e8f\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u8d77\u6765\u3002\u8fd8\u6709\u9012\u5f52\u8c03\u7528\u3002 * \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a * \u4e0d\u4e00\u5b9a\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e * @param arr * @return */ public static int[] mergeSort(int[] arr){ int start = 0; int end = arr.length; return merge(arr, start, end); } public static int[] merge(int[] arr, int start, int end){ if(end-start != 1){ int mid = (start + end + 1)/2 ;//\u8ba1\u7b97mid\uff0cmid\u4e3a\u540e\u534a\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u6570\u7684\u4e0b\u6807 int front = start;//front\u4e3a\u524d\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488 int back = mid;//back\u4e3a\u540e\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488 merge(arr, start, mid); merge(arr, mid, end); //\u6536\u62fe\u597d\u524d\u540e\u4e24\u534a\u7684\u90e8\u5206\u4e4b\u540e\uff0c\u518d\u6536\u62fe\u5408\u5e76\u7684\u90e8\u5206 int[] temp = new int[end-start];//\u5efa\u7acb\u4e00\u4e2a\u4e34\u65f6\u7684\u6570\u7ec4\uff0c\u9010\u4e2a\u4e2a\u4fdd\u5b58\u524d\u540e\u4e24\u90e8\u5206\u7684\u6700\u5c0f\u503c for(int i=0; i<temp.length; i++){ if(front != mid && back != end){//\u5982\u679c\u524d\u540e\u4e24\u4e2a\u79fb\u52a8\u6307\u9488\u90fd\u6ca1\u6709\u51fa\u754c\uff0c\u5219\u5224\u65ad\u8c01\u66f4\u5c0f if(arr[front] <= arr[back]){ temp[i] = arr[front]; front++;//\u5c06\u66f4\u5c0f\u7684\u503c\u5199\u5165temp\u6570\u7ec4\u540e\uff0c\u8bb0\u5f97\u6307\u9488\u540e\u79fb }else{ temp[i] = arr[back]; back++; } }else if(front == mid){ temp[i] = arr[back];//\u5982\u679c\u524d\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488\u5df2\u51fa\u754c\uff0c\u5219temp\u6570\u7ec4\u76f4\u63a5\u5199\u5165\u540e\u534a\u90e8\u5206\u7684\u6570 back++; }else{ temp[i] = arr[front];//\u540e\u534a\u90e8\u5206\u7684\u79fb\u52a8\u6307\u9488\u5df2\u51fa\u754c front++; } } for(int i=0; i<temp.length; i++){//\u8986\u76d6\u5230\u539f\u6570\u7ec4\u4e0a arr[i+start] = temp[i]; } print_arr(arr); } return arr; }","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"code_offer/sort/#_8","text":"/** * \u5806\u6392\u5e8f\u7684\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5982\u679c\u5347\u5e8f\u6392\u5217\uff0c\u5219\u6784\u9020\u5927\u9876\u5806\uff1b\u5982\u679c\u964d\u5e8f\u6392\u5217\uff0c\u5219\u6784\u9020\u5c0f\u9876\u5806\u3002\u672c\u4ee3\u7801\u5347\u5e8f\u6392\u5217\u3002 * \u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\uff0c\u5982\u679c\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u6ca1\u6709\u5927\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\uff0c\u5219\u5411\u524d\uff0c\u627e\u5012\u6570\u7b2c\u4e8c\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u3002 * \u5982\u679c\u5de6\u53f3\u5b50\u7ed3\u70b9\u6709\u5927\u4e8e\u7236\u7ed3\u70b9\u7684\u503c\uff0c\u5219\u8c03\u6362\u5230\u7236\u7ed3\u70b9\u4e0a\u3002\u4f46\u662f\u540c\u65f6\u8981\u8003\u8651\u5c06\u7236\u7ed3\u70b9\u8c03\u6362\u5230\u5b50\u7ed3\u70b9\u4e0a\u540e\uff0c\u662f\u5426\u4f1a\u5bf9\u540e\u9762\u7684\u7ed3\u70b9\u6709\u5f71\u54cd\u3002 * \u5982\u679c\u8c03\u6362\u5230\u5b50\u7ed3\u70b9\u4e4b\u540e\uff0c\u5b50\u7ed3\u70b9\u4f5c\u4e3a\u7236\u7ed3\u70b9\uff0c\u6bd4\u5b83\u7684\u5de6\u53f3\u5b50\u7ed3\u70b9\u90fd\u5927\uff0c\u5219\u6ca1\u95ee\u9898\u3002 * \u5982\u679c\u6bd4\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u67d0\u4e2a\u503c\u5c0f\uff0c\u5219\u8981\u5c06\u8f83\u5927\u7684\u5b50\u7ed3\u70b9\u8c03\u6362\u4e0a\u6765\u3002 * \u8c03\u6362\u4e4b\u540e\u8fd8\u8981\u7ee7\u7eed\u8003\u8651\u662f\u5426\u5f71\u54cd\u4e86\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u8fd9\u91cc\u7528\u7684\u662fwhile\u3002 * * \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlog2 n)\uff1b\u6700\u574fO(nlog2 n)\uff1b\u6700\u597dO(nlog2 n)\u3002 * \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u4e24\u8def\u5f52\u5e76\u7684\u65f6\u5019\u8981\u6392\u5e8f\uff0c\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u8d77\u6765\u3002\u8fd8\u6709\u9012\u5f52\u8c03\u7528\u3002 * \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a * \u6bcf\u8f6e\u5230\u8fbe\u6700\u7ec8\u4f4d\u7f6e\u3002 * @param arr * @return */ public static int[] heapSort(int[] arr){ return hSort(arr, 0, arr.length-1); } public static int[] hSort(int[] arr, int start, int end){ if(end-start <= 0){ return arr; } int temp; for(int i=(end-1)/2; i>-1; i--){//\u627e\u5230\u672a\u6392\u5e8f\u6570\u7684\u6700\u540e\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9 int max_child_index = 0;//\u8981\u6bd4\u8f83\u7236\u7ed3\u70b9\u548c\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u5927\u5c0f\uff0c\u4fdd\u5b58\u4e0b\u6807 if(i*2+2 <= end){//\u5982\u679c\u8be5\u7236\u7ed3\u70b9\u7684\u53f3\u7ed3\u70b9\u5b58\u5728\uff0c\u5219\u5de6\u53f3\u5b50\u7ed3\u70b9\u6bd4\u8f83\u4e00\u4e0b\uff0c\u770b\u8c01\u5927 if(arr[i*2+1] >= arr[i*2+2]){ max_child_index = i*2+1; }else{ max_child_index = i*2+2; } }else{//\u5176\u5de6\u5b50\u7ed3\u70b9\u4e00\u5b9a\u5b58\u5728\uff0c\u4e0d\u7136\u4e0d\u662f\u7236\u7ed3\u70b9 max_child_index = i*2+1; } if(arr[max_child_index] > arr[i]){//\u5982\u679c\u5b50\u7ed3\u70b9\u5927\u4e8e\u7236\u7ed3\u70b9\uff0c\u4ea4\u6362 temp = arr[i]; arr[i] = arr[max_child_index]; arr[max_child_index] = temp; //\u7236\u7ed3\u70b9\u4ea4\u6362\u5230\u5b50\u7ed3\u70b9\u4e4b\u540e\uff0c\u8981\u8003\u8651\u662f\u4e0d\u662f\u5f71\u54cd\u4e86\u4e0b\u9762\u7684\u7ed3\u70b9 int j = max_child_index; while(j*2+1<=end){//\u5f53\u524d\u7ed3\u70b9\u662f\u7236\u7ed3\u70b9\u7684\u65f6\u5019 if(j*2+2 <= end){//\u5982\u679c\u4ea4\u6362\u4e0b\u6765\u7684\u6570\u6709\u53f3\u5b50\u7ed3\u70b9\uff0c\u5219\u627e\u5230\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u8f83\u5927\u503c\uff0c\u8bb0\u4e0b\u5b83\u7684\u4e0b\u6807 if(arr[j*2+1] >= arr[j*2+2]){ max_child_index = j*2+1; }else{ max_child_index = j*2+2; } }else{//\u5982\u679c\u53ea\u6709\u5de6\u7ed3\u70b9\uff0c\u5219\u8f83\u5927\u503c\u7684\u4e0b\u6807\u5c31\u662f\u5176\u5de6\u5b50\u7ed3\u70b9 max_child_index = j*2+1; } if(arr[j] < arr[max_child_index]){//\u5982\u679c\u7236\u7ed3\u70b9\u6bd4\u5b50\u7ed3\u70b9\u7684\u8f83\u5927\u8005\u5c0f\uff0c\u5219\u9700\u8981\u5c06\u7236\u7ed3\u70b9\u4ea4\u6362\u4e0b\u53bb\u3002 temp = arr[j]; arr[j] = arr[max_child_index]; arr[max_child_index] = temp; }else{//\u5982\u679c\u7236\u7ed3\u70b9\u6bd4\u5b50\u7ed3\u70b9\u90fd\u5927\uff0c\u5219\u6ca1\u95ee\u9898\uff0c\u5f71\u54cd\u89e3\u9664\u3002 break; } } } } temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; print_arr(arr); hSort(arr, start, end-1); return arr; }","title":"\u5806\u6392\u5e8f"}]}