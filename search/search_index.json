{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to PP's Notes\n\n\n\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u57fa\u7840\u77e5\u8bc6\u548c\u4f7f\u7528\u5de5\u5177\u65f6\u9047\u5230\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u65b9\u5411\u7684\u4e00\u4e9b\u5f52\u7eb3\u603b\u7ed3\u7b49\u3002\n\n\nEnjoy learning~\n\n\n\u5fae\u535a\uff1a\u84dd\u767d\u7edb\n\n\nB\u7ad9\uff1a\u84dd\u767d\u7edb",
            "title": "Welcome"
        },
        {
            "location": "/#welcome-to-pps-notes",
            "text": "\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u57fa\u7840\u77e5\u8bc6\u548c\u4f7f\u7528\u5de5\u5177\u65f6\u9047\u5230\u7684\u95ee\u9898\uff0c\u8fd8\u6709\u4e00\u4e9b\u6211\u6240\u5b66\u4e60\u7684\u65b9\u5411\u7684\u4e00\u4e9b\u5f52\u7eb3\u603b\u7ed3\u7b49\u3002  Enjoy learning~  \u5fae\u535a\uff1a\u84dd\u767d\u7edb  B\u7ad9\uff1a\u84dd\u767d\u7edb",
            "title": "Welcome to PP's Notes"
        },
        {
            "location": "/UserProfile/Introduction/",
            "text": "\u7528\u6237\u753b\u50cf\u7684\u5b9a\u4e49\n\n\n\u53c2\u8003\u8d44\u6599\u6765\u6e90\u4e8e\n\u4ec0\u4e48\u662f\u7528\u6237\u753b\u50cf\u5462\uff1f\u4e00\u822c\u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f-\u77e5\u4e4e\n\n\n\u7528\u6237\u753b\u50cf\u662f\u6839\u636e\u7528\u6237\u793e\u4f1a\u5c5e\u6027\u3001\u751f\u6d3b\u4e60\u60ef\u548c\u6d88\u8d39\u884c\u4e3a\u7b49\u4fe1\u606f\u800c\u62bd\u8c61\u51fa\u7684\u4e00\u4e2a\u6807\u7b7e\u5316\u7684\u7528\u6237\u6a21\u578b\u3002\u6784\u5efa\u7528\u6237\u753b\u50cf\u7684\u6838\u5fc3\u5de5\u4f5c\u662f\u7ed9\u7528\u6237\u8d34\u201c\u6807\u7b7e\u201d\uff0c\u800c\u6807\u7b7e\u662f\u901a\u8fc7\u5bf9\u7528\u6237\u4fe1\u606f\u5206\u6790\u800c\u6765\u7684\u9ad8\u5ea6\u7cbe\u70bc\u7684\u7279\u5f81\u6807\u8bc6\u3002\n\n\n\u4f8b\u5982\u67d0\u4f4d\u7528\u6237\uff1a\n\u59d3\u540d\n\uff1a\u5c0f\u660e\uff0c\n\u6027\u522b\n\uff1a\u7537\uff0c\n\u5730\u533a\n\uff1a\u6b66\u6c49\uff0c\n\u5174\u8da3\n\uff1a\u7bee\u7403\uff0c\n\u5b66\u5386\n\uff1a\u7855\u58eb\u3002\u7b80\u5355\u6765\u8bb2\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u6807\u7b7e\u5316\u3002 \n\n\n\u7528\u6237\u753b\u50cf vs. \u7528\u6237\u89d2\u8272\n\n\n- \u5b9a\u4e49\u7684\u4e0d\u540c\n\n\n\u8fd9\u91cc\u6240\u8bf4\u7684\u7528\u6237\u753b\u50cf\u6307\u7684\u662fUser profile\u3002\u4e0eUser profile\u76f8\u5173\u8054\u7684\u4e00\u4e2a\u6982\u5ff5\u662fUser persona\uff0c\u5b83\u8bd1\u505a\u7528\u6237\u89d2\u8272\uff0c\u4f46\u662f\u5728\u5f88\u591a\u5730\u65b9\u4e5f\u88ab\u8bd1\u4f5c\u4e86\u7528\u6237\u753b\u50cf\u3002\u8fd9\u91cc\u6211\u4eec\u5c06User profile\u8bd1\u4f5c\u7528\u6237\u753b\u50cf\uff0cUser persona\u8bd1\u4f5c\u7528\u6237\u89d2\u8272\u3002\n\n\n\u7528\u6237\u89d2\u8272\u591a\u7528\u4e8e\u4ea7\u54c1\u548c\u7528\u7814\u3002\u662f\u63cf\u7ed8\u62bd\u8c61\u4e00\u4e2a\u81ea\u7136\u4eba\u7684\u5c5e\u6027\uff0c\u901a\u8fc7\u8c03\u7814\u95ee\u5377\u3001\u7535\u8bdd\u8bbf\u8c08\u7b49\u624b\u6bb5\u83b7\u5f97\u7528\u6237\u7684\u5b9a\u6027\u7279\u5f81\uff0c\u662f\u4e00\u79cd\u7cbe\u70bc\u548c\u6982\u62ec\u3002\n\n\n\u7528\u6237\u753b\u50cf\u7528\u6237\u753b\u50cf\u591a\u7528\u4e8e\u6570\u636e\u548c\u7814\u53d1\u3002\u662f\u901a\u8fc7\u6570\u636e\u5efa\u7acb\u63cf\u7ed8\u7528\u6237\u7684\u6807\u7b7e\uff0c\u662f\u4e0e\u6570\u636e\u6316\u6398\u548c\u5927\u6570\u636e\u606f\u606f\u76f8\u5173\u7684\u5e94\u7528\u3002\u5b83\u66f4\u591a\u88ab\u8fd0\u8425\u548c\u6570\u636e\u5206\u6790\u5e08\u4f7f\u7528\uff0c\u662f\u5404\u7c7b\u63cf\u8ff0\u7528\u6237\u6570\u636e\u7684\u53d8\u91cf\u96c6\u5408\u3002(\u4f5c\u8005\u4e3b\u8981\u5173\u6ce8\u6570\u636e\u6316\u6398\u65b9\u9762\uff0c\u6240\u4ee5\u66f4\u591a\u5173\u6ce8\u7684\u662f\u7528\u6237\u753b\u50cfUser profile.)\n\n\n- \u4ea7\u751f\u573a\u666f\u7684\u4e0d\u540c\n\n\n\u5b9a\u4e49\u5f88\u96be\u61c2\uff0c\u4f46\u662f\u770b\u4ea7\u751f\u5b83\u4eec\u4ea7\u751f\u7684\u573a\u666f\u5c31\u6bd4\u8f83\u5bb9\u6613\u4e86\u3002\n\n\n\u5728\u4ea7\u54c1\u8bbe\u8ba1\u3001\u7528\u6237\u4f53\u9a8c\u8bbe\u8ba1\u7684\u5de5\u4f5c\u4e2d\uff0c\u8981\u8bbe\u8ba1\u4e00\u4e2a\u4ea7\u54c1\uff0c\u6211\u4eec\u8981\u4ece\u5b8f\u89c2\u7684\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u53bb\u5206\u6790\u6211\u4eec\u8981\u5207\u5165\u7684\u5e02\u573a\u662f\u4ec0\u4e48\uff0c\u53d7\u4f17\u662f\u54ea\u4e9b\u4eba\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u62bd\u8c61\u51fa\u4e00\u4e2a\u53ef\u80fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u4ea7\u54c1\u7684\u4eba\u7fa4\uff0c\u660e\u786e\u5b9a\u4f4d\u7528\u6237\u3002\n\u62ff\u77e5\u4e4e\u4e2d\u8bb2\u7684\u4e00\u4e2a\u65b0\u6d6a\u5fae\u535a\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u6700\u5f00\u59cb\uff0c\u5fae\u535a\u4e3b\u8981\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u4e00\u4e8c\u7ebf\u57ce\u5e02\u7684\u767d\u9886\u7684\u4f7f\u7528\u3002\u6b64\u65f6\u7684\u7528\u6237\u753b\u50cf\u53ef\u80fd\u662f\uff1a\u4e00\u4e8c\u7ebf\u57ce\u5e02\u3001\u4e8c\u5341\u5230\u4e09\u5341\u5c81\u3001\u8f83\u9ad8\u6559\u80b2\u7a0b\u5ea6\u3001\u767d\u9886\u3001\u6536\u5165\u57286k\u4ee5\u4e0a\u3002\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6240\u6709\u7684\u4ea7\u54c1\u4ea4\u4e92\u548c\u6d41\u7a0b\u8bbe\u8ba1\u90fd\u662f\u4f9d\u636e\u8fd9\u6837\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u865a\u62df\u4eba\u7fa4\u7684\u9700\u6c42\u7b49\u6765\u8bbe\u8ba1\u7684\u3002\u8fd9\u91cc\u7684\u4eba\u7fa4\u6ca1\u6709\u7279\u6307\u67d0\u4e2a\u7528\u6237\u3002\n\n\n\u4ea7\u54c1\u7ecf\u8fc7\u79ef\u7d2f\u4e86\u4e00\u5b9a\u91cf\u7684\u7528\u6237\u884c\u4e3a\u7b49\u7b49\u7684\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u7cbe\u7ec6\u5730\u4e86\u89e3\u7528\u6237\u3002\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u6765\u4e3a\u4ea7\u54c1\u63d0\u4f9b\u66f4\u597d\u5730\u652f\u6491\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u4f1a\u8bde\u751f\u4e00\u4e9b\u65b0\u7684\u529f\u80fd\u6765\u4e3a\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002\u6839\u636e\u7528\u6237\u5728\u4ea7\u54c1\u4e2d\u7684\u884c\u4e3a\u6570\u636e\uff0c\u4ea7\u51fa\u63cf\u8ff0\u8be5\u7528\u6237\u7684\u6807\u7b7e\u96c6\u5408\u3002\u8fd9\u4e2a\u65f6\u5019\u7684\u7528\u6237\u662f\u7279\u5b9a\u7684\u3002\n\u6bd4\u5982\u6211\u4eec\u9700\u8981\u63a8\u6d4b\u7528\u6237\u7684\u6027\u522b\u3001\u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5\u3001\u751f\u6d3b\u5de5\u4f5c\u6240\u5728\u5730\u3001\u5174\u8da3\u7231\u597d\u3001\u662f\u5426\u8ffd\u661f\u3001\u559c\u6b22\u4e70\u4ec0\u4e48\u4e1c\u897f\u7b49\u7b49\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u7528\u6237\u6570\u636e\u5316\uff0c\u7528\u4e8e\u7cbe\u51c6\u8425\u9500\u7b49\u3002(\u867d\u7136\u5f88\u591a\u5730\u65b9\u6211\u4eec\u90fd\u9700\u8981\u586b\u5199\u8d44\u6599\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u586b\u5199\u7684\u8d44\u6599\u662f\u7f3a\u5931\u7684\u6216\u4e0d\u771f\u5b9e\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8fd0\u7528\u6570\u636e\u6316\u6398\u7684\u65b9\u6cd5\u6765\u63a8\u6d4b\u3002)\n\n\n\u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528\n\n\n\n\n\u7cbe\u51c6\u8425\u9500\uff1a\u5206\u6790\u4ea7\u54c1\u6f5c\u5728\u7528\u6237\uff0c\u9488\u5bf9\u7279\u5b9a\u7fa4\u4f53\u5229\u7528\u77ed\u4fe1\u3001\u90ae\u4ef6\u7b49\u65b9\u5f0f\u8fdb\u884c\u8425\u9500\u3002\u4f8b\u5982\u63a8\u9500\u6bcd\u5a74\u4ea7\u54c1\uff0c\u5c31\u5411\u6211\u4eec\u63a8\u6d4b\u51fa\u7684\u6709\u5c0f\u5b69\u7684\u6bcd\u4eb2\u6216\u7531\u8d2d\u4e70\u6570\u636e\u8868\u73b0\u51fa\u6765\u7684\u7ecf\u5e38\u8d2d\u4e70\u6bcd\u5a74\u4ea7\u54c1\u7684\u7528\u6237\u5b9a\u5411\u63a8\u8350\u3002\n\n\n\u7528\u6237\u7edf\u8ba1\uff1a\u6bd4\u5982\u4e9a\u9a6c\u900a\u53ef\u4ee5\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u5b66\u79d1\u6216\u67d0\u4e2a\u66f4\u7ec6\u5206\u7684\u5b66\u79d1\u7ecf\u5e38\u8d2d\u4e70\u7684\u4e66\u7c4d\u3002\n\n\n\u6570\u636e\u6316\u6398\uff1a\u6700\u5178\u578b\u7684\u4f8b\u5b50\u662f\u5564\u9152\u548c\u5c3f\u5e03\u3002\u53ef\u4ee5\u901a\u8fc7\u5173\u8054\u89c4\u5219\u5206\u6790\u51fa\u7ecf\u5e38\u5728\u4e00\u8d77\u8d2d\u4e70\u7684\u7269\u54c1\u7b49\u7b49\u3002\n\n\n\u5b9a\u4f4d\u670d\u52a1\u7fa4\u4f53\uff1a\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002\n\n\n\u51b3\u7b56\u652f\u6301\uff1a\u901a\u8fc7\u67d0\u7c7b\u53d7\u4f17\u7684\u559c\u597d\u6765\u5bf9\u4ea7\u54c1\u8fdb\u884c\u5b9a\u4ef7\uff0c\u5236\u5b9a\u8425\u9500\u7b56\u7565\u7b49\u3002\n\n\n\u4e1a\u52a1\u7ecf\u8425\u5206\u6790\u4ee5\u53ca\u7ade\u4e89\u5206\u6790\uff1a\u4e3a\u4f01\u4e1a\u53d1\u5c55\u63d0\u4f9b\u6570\u636e\u5206\u6790\u7684\u652f\u6301\u3002\n\n\n\n\ntricks:\u77e5\u4e4e\u4e0a\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u7f57\u632f\u5b87\u5728\u300a\u65f6\u95f4\u7684\u670b\u53cb\u300b\u8de8\u5e74\u6f14\u8bb2\u4e0a\u4e3e\u4f8b\uff1a\u5f53\u4e00\u4e2a\u574f\u5546\u5bb6\u638c\u63e1\u4e86\u4f60\u7684\u8d2d\u4e70\u6570\u636e\uff0c\u4ed6\u5c31\u53ef\u4ee5\u6839\u636e\u4f60\u5e73\u5e38\u8d2d\u4e70\u5546\u54c1\u7684\u504f\u597d\u6765\u51b3\u5b9a\u7ed9\u4f60\u53d1\u6b63\u54c1\u8fd8\u662f\u5047\u8d27\u6765\u63d0\u9ad8\u5229\u6da6\u3002\u8fd9\u8bf4\u660e\u4e86\u7528\u6237\u753b\u50cf\u786e\u5b9e\u53ef\u4ee5\u505a\u5230\"\u7cbe\u51c6\u8425\u9500\"\uff0c\u5f53\u7136\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u9519\u8bef\u7684\u505a\u6cd5\u3002\n\n\n\u6211\u8fd8\u60f3\u5230\u4e86\u9a6c\u4e91\u5728\u67d0\u6b21\u6f14\u8bb2\u4e2d\u8bf4\u5927\u6570\u636e\u7684\u4f5c\u7528\uff0c\u95ee\u5927\u5bb6\u5168\u56fd\u80f8\u6700\u5c0f\u7684\u7701\u4efd\u662f\u54ea\u91cc\u3002\u6211\u731c\u6d4b\u662f\u6839\u636e\u5404\u7701\u4efd\u7684\u7528\u6237\u6240\u8d2d\u4e70\u7684\u67d0\u6837\u4e1c\u897f\u7684\u5927\u5c0f\u6765\u8fdb\u884c\u7edf\u8ba1\u7684\uff0c\u5f53\u7136\u4e5f\u6709\u5f88\u591a\u5176\u4ed6\u8f85\u52a9\u624b\u6bb5\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u80fd\u8bf4\u660e\u7528\u6237\u753b\u50cf\u5728\u7528\u6237\u7edf\u8ba1\u65b9\u9762\u7684\u4f5c\u7528\u3002\n\n\n\u7528\u6237\u753b\u50cf\u6807\u7b7e\u7cfb\u7edf\n\n\n\u6211\u4eec\u8981\u5efa\u7acb\u7528\u6237\u753b\u50cf\uff0c\u9700\u8981\u6536\u96c6\u6570\u636e\uff0c\u53ef\u662f\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5462\uff1f\u8fd9\u4e9b\u9700\u8981\u6839\u636e\u8981\u5efa\u7acb\u7684\u6807\u7b7e\u7cfb\u7edf\u6765\u8bf4\u3002\u5373\u6211\u4eec\u8981\u4e86\u89e3\u7528\u6237\u7684\u54ea\u4e9b\u5c5e\u6027\u3002\u7528\u6237\u7684\u6807\u7b7e\u7cfb\u7edf\u5c31\u50cf\u5bf9\u5546\u54c1\u5206\u7c7b\uff0c\u6bd4\u5982\u5bf9\u4e66\u8fdb\u884c\u5206\u7c7b\uff0c\u4e2d\u6587\u8fd8\u662f\u5916\u6587\uff1f\u662f\u6587\u5b66\u7c7b\u7ecf\u7ba1\u7c7b\u793e\u79d1\u7c7b\u8fd8\u662f\u79d1\u6280\u7c7b\uff1f\u5728\u8fd9\u4e9b\u7c7b\u522b\u4e0b\u8fd8\u6709\u66f4\u7ec6\u5206\u7684\u7c7b\u522b\u3002\n\u7528\u6237\u7684\u5206\u7c7b\u8ddf\u4e66\u7684\u5206\u7c7b\u7c7b\u4f3c\uff0c\u4f46\u662f\u7528\u6237\u7684\u5206\u7c7b\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u4eba\u7684\u5174\u8da3\u5206\u7c7b\uff0c\u662f\u6709\u65f6\u6548\u6027\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u8de8\u8d8a\u5f88\u591a\u4e0d\u540c\u7684\u5174\u8da3\u5206\u7c7b\u7b49\u7b49\u3002\n\n\n\u9605\u8bfb\u8d44\u6599\u540e\uff0c\u6211\u5f52\u7eb3\u7684\u7528\u6237\u753b\u50cf\u4e3b\u8981\u6709\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u7684\u6807\u7b7e\uff1a\n\n\n\n\n\u57fa\u672c\u5c5e\u6027\uff1a\u4e3b\u8981\u662f\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\uff1a\n\u6027\u522b\n\u3001\n\u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5\n\u3001\n\u751f\u6d3b\u5de5\u4f5c\u5b66\u4e60\u7684\u5730\u533a\n\u3002\u8fd8\u6709\u4e00\u4e9b\n\u624b\u673a\u53f7\u7801\n\u3001\n\u90ae\u7bb1\n\u7b49\u5c5e\u6027\u3002\n\n\n\u793e\u4f1a\u5c5e\u6027\uff1a\n\u5b66\u5386\n\u3001\n\u804c\u4e1a\n\u3001\n\u6536\u5165\n\u3001\n\u5a5a\u59fb\u72b6\u51b5\n\u3001\n\u5bb6\u5ead\u6210\u5458\n(\u53ef\u80fd\u4e5f\u4f1a\u5305\u542b\u5bb6\u5ead\u6210\u5458\u7684\u5c5e\u6027\uff0c\u5982\n\u6709\u591a\u5927\u7684\u5b69\u5b50\n\u7b49)\u7b49(\u8fd9\u4e9b\u5c5e\u6027\u53ef\u80fd\u4f1a\u7a0d\u5fae\u53d8\u5316)\u3002\u4e0d\u540c\u4ea7\u54c1\u4f1a\u5bf9\u4e0d\u540c\u7684\u5c5e\u6027\u611f\u5174\u8da3\uff0c\u5982\u6559\u80b2\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5b66\u5386\u66f4\u611f\u5174\u8da3\uff0c\u6bcd\u5a74\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5bb6\u5ead\u6210\u5458\u611f\u5174\u8da3\u3002\n\n\n\u4e2a\u6027\u5c5e\u6027\uff1a\u4e3b\u8981\u6307\u7531\u7528\u6237\u5728\u4e92\u8054\u7f51\u73af\u5883\u4e0b\u4ea7\u751f\u7684\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u5982\u5728\u7535\u5546\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u505c\u7559\u65f6\u957f\u3001\u8d2d\u4e70\u7b49\u884c\u4e3a\uff0c\u8d2d\u4e70\u7684\u5546\u54c1\u7684\u5c5e\u6027\uff0c\u5bf9\u5546\u54c1\u7684\u8bc4\u4ef7\u7b49\u7b49\u5f52\u7eb3\u51fa\u6765\u7684\u7528\u6237\u8d2d\u4e70\u7684\n\u7c7b\u76ee\u504f\u597d\n(\u559c\u6b22\u6536\u7eb3\u6216\u559c\u6b22\u65e5\u7cfb\u7b49)\u3001\n\u54c1\u724c\u504f\u597d\n\u3001\n\u5546\u54c1\u5c5e\u6027\u504f\u597d\n(\u9ad8\u6027\u4ef7\u6bd4\u6216\u5962\u4f88\u54c1\u7b49)\u7b49\u7b49\u3002\u5728\u793e\u4ea4\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u641c\u7d22\u3001\u827e\u7279\u670b\u53cb\uff0c\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\uff0c\u53d1\u5e03\u5185\u5bb9\uff0c\u5f15\u7528\u8bdd\u9898\u7b49\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684\n\u7528\u6237\u5174\u8da3\u504f\u597d\n\uff0c\n\u793e\u4ea4\u5c5e\u6027\n\u7b49\u7b49\u3002\n\n\n\u4ef7\u503c\u5c5e\u6027\uff1a\u8fd9\u4e2a\u4e3b\u8981\u662f\u8be5\u7528\u6237\u5bf9\u4ea7\u54c1\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u8be5\u7528\u6237\u672c\u8eab\u7684\u4ef7\u503c\u3002\u5bf9\u4e8e\u7535\u5546\u7f51\u7ad9\u6765\u8bf4\u7528\u6237\u7684\n\u6d88\u8d39\u6863\u6b21\n\uff0c\n\u7528\u6237\u79ef\u5206\u7b49\u7ea7\n\uff0c\u8d2d\u4e70\u9891\u6b21\u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u793e\u4ea4\u7f51\u7ad9\u6765\u8bf4\uff0c\u7528\u6237\u7684\n\u6d3b\u8dc3\u5ea6\n\u3001\n\u5f71\u54cd\u529b\n\u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u94f6\u884c\u6765\u8bf4\uff0c\u7528\u6237\u7684\u501f\u8d37\u4fe1\u606f\u7b49\u51b3\u5b9a\u7528\u6237\n\u8bda\u4fe1\u5ea6\n\u4ef7\u503c\u3002\n\n\n\n\n\u77e5\u4e4e\u4e0a\u6709\u4eba\u8bf4\u53ef\u4ee5\u4ece\u4eba\u7684\u5fc3\u7406\u3001\u4eba\u683c\u5c42\u9762\u5bf9\n\u4ef7\u503c\u89c2\n\u3001\n\u4eba\u683c\n\u8fdb\u884c\u5efa\u6a21\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u6709\u4e9b\u7ec6\u601d\u6050\u6781\uff0c\u4f46\u662f\u5e94\u8be5\u4e5f\u662f\u4e00\u4e2a\u53d1\u5c55\u65b9\u5411\u3002\n\u6211\u4eec\u73b0\u5728\u6240\u505a\u7684\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u53ea\u662f\u6bcf\u4e2a\u4eba\u6240\u5305\u542b\u7684\u6807\u7b7e\u8fd8\u4e0d\u591f\u591a\uff0c\u6240\u638c\u63e1\u7684\u4fe1\u606f\u4e0d\u591f\u591a\uff0c\u8fd8\u6ca1\u6709\u5230\u8fbe\u80fd\u591f\u8fd8\u539f\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u4eba\u7684\u5730\u6b65\u3002\n\u8bf4\u8fd9\u4e2a\u53ea\u662f\u5e2e\u52a9\u7406\u89e3\u7528\u6237\u753b\u50cf\u662f\u4ec0\u4e48\u3002\n\n\n\u7528\u6237\u753b\u50cf\u9700\u8981\u6536\u96c6\u54ea\u4e9b\u6570\u636e\n\n\n\u4e0d\u540c\u516c\u53f8\u7684\u4e1a\u52a1\u5bfc\u81f4\u4e86\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u4f1a\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u4f8b\u5982\u5bf9\u57fa\u672c\u5c5e\u6027\uff0c\u963f\u91cc\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u662f\u975e\u5e38\u7cbe\u786e\u7684\uff0c\u4e0d\u5149\u662f\u4ece\u7528\u6237\u586b\u5199\u7684\u8d44\u6599\u65b9\u9762\uff0c\u4ece\u963f\u91cc\u7684\u5927\u91cf\u7535\u5546\u6570\u636e\u4e2d\u53ef\u4ee5\u975e\u5e38\u7cbe\u51c6\u5730\u63a8\u6d4b\u8be5\u7528\u6237\u7684\u57fa\u672c\u5c5e\u6027\u3002\u800c\u767e\u5ea6\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u6bd4\u8f83\u4e0d\u7cbe\u786e\uff0c\u4f46\u662f\u767e\u5ea6\u7684\u641c\u7d22\u6570\u636e\u5728\u5b8f\u89c2\u5c42\u9762\u6709\u975e\u5e38\u591a\u7684\u5e94\u7528\u3002\u4f8b\u5982\u963f\u91cc\u7684\u793e\u4ea4\u6570\u636e\u5c31\u4e0d\u5982\u817e\u8baf\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e0d\u540c\u516c\u53f8\uff0c\u6536\u96c6\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u7684\u80fd\u529b\u662f\u6709\u4e00\u5b9a\u9650\u5236\u7684\u3002\n\n\n\u4e2a\u4eba\u8ba4\u4e3a\uff1a\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5176\u5b9e\u662f\u7279\u5f81\u5de5\u7a0b\u7684\u4e00\u90e8\u5206\u3002\n\n\n\u6765\u81ea\u7f51\u7edc\u7684\u603b\u7ed3\u548c\u4e2a\u4eba\u601d\u8003(\u6839\u636e\u4f5c\u8005\u7684\u5b9e\u9645\u7ecf\u5386\u53ef\u80fd\u4f1a\u6709\u4e9b\u4fee\u6b63\u548c\u66f4\u65b0)\uff1a\n\n\n\u5bf9\u4e8e\u50cf\u963f\u91cc\u8fd9\u6837\u7684\u7535\u5546\u5927\u6237\uff1a\n\n\n\n\n\u7f51\u7edc\u884c\u4e3a\u6570\u636e\uff1a\u6d3b\u8dc3\u5929\u6570\u3001\u9875\u9762\u6d4f\u89c8\u91cf\u3001\u8bbf\u95ee\u65f6\u957f\u3001\u6fc0\u6d3b\u7387(\u5927\u6982\u662f\u6d4f\u89c8\u8f6c\u5316\u4e3a\u70b9\u51fb\u7684\u6bd4\u7387\uff1f)\u3001\u5916\u90e8\u89e6\u70b9(\uff1f)\u3001\u793e\u4ea4\u6570\u636e\u7b49\u3002\n\n\n\u670d\u52a1\u5185\u884c\u4e3a\u6570\u636e\uff1a\u6d4f\u89c8\u8def\u5f84\u3001\u9875\u9762\u505c\u7559\u65f6\u957f\u3001\u8bbf\u95ee\u6df1\u5ea6\u3001\u552f\u4e00\u9875\u9762\u6d4f\u89c8\u6b21\u6570(\uff1f)\u7b49\u3002\n\n\n\u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8/\u6536\u85cf\u5185\u5bb9\u3001\u8d2d\u7269\u8f66\u5185\u5bb9\u3001\u8bc4\u8bba\u5185\u5bb9\u3001\u4e92\u52a8\u5185\u5bb9\u3001\u751f\u6d3b\u5f62\u6001\u504f\u597d\u3001\u54c1\u724c\u504f\u597d\u7b49\u3002\n\n\n\u4ea4\u6613\u6570\u636e\uff1a\u8d21\u732e\u7387\u3001\u5ba2\u5355\u4ef7(\uff1f)\u3001\u8fde\u5e26\u7387\u3001\u56de\u5934\u7387\u3001\u6d41\u5931\u7387\u7b49\u3002\n\n\n\n\n\u5bf9\u4e8e\u50cf\u65b0\u6d6a\u5fae\u535a\u8fd9\u6837\u7684\u793e\u4f1a\u5a92\u4f53\u5927\u6237\uff1a\n\n\n\n\n\u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u8f6c\u53d1\u3001\u641c\u7d22\u3001\u5206\u7ec4\u7b49\n\n\n\u793e\u4ea4\u6570\u636e\uff1a\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\u3001\u53cc\u5411\u5173\u6ce8\u3001\u53d1\u5e03\u7684\u5185\u5bb9\u827e\u7279\u7684\u670b\u53cb\u7b49\n\n\n\u5185\u5bb9\u4ea7\u51fa\u6570\u636e\uff1a\u53d1\u5e03\u7684\u5fae\u535a\u6587\u672c\u3001\u56fe\u7247\u3001\u89c6\u9891\u3001\u53c2\u4e0e\u7684\u8bdd\u9898\u7b49\n\n\n\n\n\u672a\u6765\u5f85\u5206\u6790(\u4e5f\u6709\u53ef\u80fd\u4e0d\u5206\u6790\u4e86)\uff1a\u817e\u8baf\u793e\u4ea4\u5927\u6237\u3001b\u7ad9\u89c6\u9891\u5927\u6237\u3001\u7f51\u6613\u4e91\u97f3\u4e50\u7b49\u7b49\u3002",
            "title": "Introduction"
        },
        {
            "location": "/UserProfile/Introduction/#_1",
            "text": "\u53c2\u8003\u8d44\u6599\u6765\u6e90\u4e8e \u4ec0\u4e48\u662f\u7528\u6237\u753b\u50cf\u5462\uff1f\u4e00\u822c\u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f-\u77e5\u4e4e  \u7528\u6237\u753b\u50cf\u662f\u6839\u636e\u7528\u6237\u793e\u4f1a\u5c5e\u6027\u3001\u751f\u6d3b\u4e60\u60ef\u548c\u6d88\u8d39\u884c\u4e3a\u7b49\u4fe1\u606f\u800c\u62bd\u8c61\u51fa\u7684\u4e00\u4e2a\u6807\u7b7e\u5316\u7684\u7528\u6237\u6a21\u578b\u3002\u6784\u5efa\u7528\u6237\u753b\u50cf\u7684\u6838\u5fc3\u5de5\u4f5c\u662f\u7ed9\u7528\u6237\u8d34\u201c\u6807\u7b7e\u201d\uff0c\u800c\u6807\u7b7e\u662f\u901a\u8fc7\u5bf9\u7528\u6237\u4fe1\u606f\u5206\u6790\u800c\u6765\u7684\u9ad8\u5ea6\u7cbe\u70bc\u7684\u7279\u5f81\u6807\u8bc6\u3002  \u4f8b\u5982\u67d0\u4f4d\u7528\u6237\uff1a \u59d3\u540d \uff1a\u5c0f\u660e\uff0c \u6027\u522b \uff1a\u7537\uff0c \u5730\u533a \uff1a\u6b66\u6c49\uff0c \u5174\u8da3 \uff1a\u7bee\u7403\uff0c \u5b66\u5386 \uff1a\u7855\u58eb\u3002\u7b80\u5355\u6765\u8bb2\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u6807\u7b7e\u5316\u3002",
            "title": "\u7528\u6237\u753b\u50cf\u7684\u5b9a\u4e49"
        },
        {
            "location": "/UserProfile/Introduction/#vs",
            "text": "",
            "title": "\u7528\u6237\u753b\u50cf vs. \u7528\u6237\u89d2\u8272"
        },
        {
            "location": "/UserProfile/Introduction/#-",
            "text": "\u8fd9\u91cc\u6240\u8bf4\u7684\u7528\u6237\u753b\u50cf\u6307\u7684\u662fUser profile\u3002\u4e0eUser profile\u76f8\u5173\u8054\u7684\u4e00\u4e2a\u6982\u5ff5\u662fUser persona\uff0c\u5b83\u8bd1\u505a\u7528\u6237\u89d2\u8272\uff0c\u4f46\u662f\u5728\u5f88\u591a\u5730\u65b9\u4e5f\u88ab\u8bd1\u4f5c\u4e86\u7528\u6237\u753b\u50cf\u3002\u8fd9\u91cc\u6211\u4eec\u5c06User profile\u8bd1\u4f5c\u7528\u6237\u753b\u50cf\uff0cUser persona\u8bd1\u4f5c\u7528\u6237\u89d2\u8272\u3002  \u7528\u6237\u89d2\u8272\u591a\u7528\u4e8e\u4ea7\u54c1\u548c\u7528\u7814\u3002\u662f\u63cf\u7ed8\u62bd\u8c61\u4e00\u4e2a\u81ea\u7136\u4eba\u7684\u5c5e\u6027\uff0c\u901a\u8fc7\u8c03\u7814\u95ee\u5377\u3001\u7535\u8bdd\u8bbf\u8c08\u7b49\u624b\u6bb5\u83b7\u5f97\u7528\u6237\u7684\u5b9a\u6027\u7279\u5f81\uff0c\u662f\u4e00\u79cd\u7cbe\u70bc\u548c\u6982\u62ec\u3002  \u7528\u6237\u753b\u50cf\u7528\u6237\u753b\u50cf\u591a\u7528\u4e8e\u6570\u636e\u548c\u7814\u53d1\u3002\u662f\u901a\u8fc7\u6570\u636e\u5efa\u7acb\u63cf\u7ed8\u7528\u6237\u7684\u6807\u7b7e\uff0c\u662f\u4e0e\u6570\u636e\u6316\u6398\u548c\u5927\u6570\u636e\u606f\u606f\u76f8\u5173\u7684\u5e94\u7528\u3002\u5b83\u66f4\u591a\u88ab\u8fd0\u8425\u548c\u6570\u636e\u5206\u6790\u5e08\u4f7f\u7528\uff0c\u662f\u5404\u7c7b\u63cf\u8ff0\u7528\u6237\u6570\u636e\u7684\u53d8\u91cf\u96c6\u5408\u3002(\u4f5c\u8005\u4e3b\u8981\u5173\u6ce8\u6570\u636e\u6316\u6398\u65b9\u9762\uff0c\u6240\u4ee5\u66f4\u591a\u5173\u6ce8\u7684\u662f\u7528\u6237\u753b\u50cfUser profile.)",
            "title": "- \u5b9a\u4e49\u7684\u4e0d\u540c"
        },
        {
            "location": "/UserProfile/Introduction/#-_1",
            "text": "\u5b9a\u4e49\u5f88\u96be\u61c2\uff0c\u4f46\u662f\u770b\u4ea7\u751f\u5b83\u4eec\u4ea7\u751f\u7684\u573a\u666f\u5c31\u6bd4\u8f83\u5bb9\u6613\u4e86\u3002  \u5728\u4ea7\u54c1\u8bbe\u8ba1\u3001\u7528\u6237\u4f53\u9a8c\u8bbe\u8ba1\u7684\u5de5\u4f5c\u4e2d\uff0c\u8981\u8bbe\u8ba1\u4e00\u4e2a\u4ea7\u54c1\uff0c\u6211\u4eec\u8981\u4ece\u5b8f\u89c2\u7684\u7ecf\u6d4e\u5b66\u89d2\u5ea6\u53bb\u5206\u6790\u6211\u4eec\u8981\u5207\u5165\u7684\u5e02\u573a\u662f\u4ec0\u4e48\uff0c\u53d7\u4f17\u662f\u54ea\u4e9b\u4eba\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u62bd\u8c61\u51fa\u4e00\u4e2a\u53ef\u80fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u4ea7\u54c1\u7684\u4eba\u7fa4\uff0c\u660e\u786e\u5b9a\u4f4d\u7528\u6237\u3002\n\u62ff\u77e5\u4e4e\u4e2d\u8bb2\u7684\u4e00\u4e2a\u65b0\u6d6a\u5fae\u535a\u7684\u4f8b\u5b50\u6765\u8bf4\uff0c\u6700\u5f00\u59cb\uff0c\u5fae\u535a\u4e3b\u8981\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u4e3a\u4e86\u6ee1\u8db3\u4e00\u4e8c\u7ebf\u57ce\u5e02\u7684\u767d\u9886\u7684\u4f7f\u7528\u3002\u6b64\u65f6\u7684\u7528\u6237\u753b\u50cf\u53ef\u80fd\u662f\uff1a\u4e00\u4e8c\u7ebf\u57ce\u5e02\u3001\u4e8c\u5341\u5230\u4e09\u5341\u5c81\u3001\u8f83\u9ad8\u6559\u80b2\u7a0b\u5ea6\u3001\u767d\u9886\u3001\u6536\u5165\u57286k\u4ee5\u4e0a\u3002\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6240\u6709\u7684\u4ea7\u54c1\u4ea4\u4e92\u548c\u6d41\u7a0b\u8bbe\u8ba1\u90fd\u662f\u4f9d\u636e\u8fd9\u6837\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u865a\u62df\u4eba\u7fa4\u7684\u9700\u6c42\u7b49\u6765\u8bbe\u8ba1\u7684\u3002\u8fd9\u91cc\u7684\u4eba\u7fa4\u6ca1\u6709\u7279\u6307\u67d0\u4e2a\u7528\u6237\u3002  \u4ea7\u54c1\u7ecf\u8fc7\u79ef\u7d2f\u4e86\u4e00\u5b9a\u91cf\u7684\u7528\u6237\u884c\u4e3a\u7b49\u7b49\u7684\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u7cbe\u7ec6\u5730\u4e86\u89e3\u7528\u6237\u3002\u5e0c\u671b\u80fd\u591f\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u6765\u4e3a\u4ea7\u54c1\u63d0\u4f9b\u66f4\u597d\u5730\u652f\u6491\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u4f1a\u8bde\u751f\u4e00\u4e9b\u65b0\u7684\u529f\u80fd\u6765\u4e3a\u7528\u6237\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002\u6839\u636e\u7528\u6237\u5728\u4ea7\u54c1\u4e2d\u7684\u884c\u4e3a\u6570\u636e\uff0c\u4ea7\u51fa\u63cf\u8ff0\u8be5\u7528\u6237\u7684\u6807\u7b7e\u96c6\u5408\u3002\u8fd9\u4e2a\u65f6\u5019\u7684\u7528\u6237\u662f\u7279\u5b9a\u7684\u3002\n\u6bd4\u5982\u6211\u4eec\u9700\u8981\u63a8\u6d4b\u7528\u6237\u7684\u6027\u522b\u3001\u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5\u3001\u751f\u6d3b\u5de5\u4f5c\u6240\u5728\u5730\u3001\u5174\u8da3\u7231\u597d\u3001\u662f\u5426\u8ffd\u661f\u3001\u559c\u6b22\u4e70\u4ec0\u4e48\u4e1c\u897f\u7b49\u7b49\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u7528\u6237\u6570\u636e\u5316\uff0c\u7528\u4e8e\u7cbe\u51c6\u8425\u9500\u7b49\u3002(\u867d\u7136\u5f88\u591a\u5730\u65b9\u6211\u4eec\u90fd\u9700\u8981\u586b\u5199\u8d44\u6599\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u586b\u5199\u7684\u8d44\u6599\u662f\u7f3a\u5931\u7684\u6216\u4e0d\u771f\u5b9e\u7684\uff0c\u6240\u4ee5\u9700\u8981\u8fd0\u7528\u6570\u636e\u6316\u6398\u7684\u65b9\u6cd5\u6765\u63a8\u6d4b\u3002)",
            "title": "- \u4ea7\u751f\u573a\u666f\u7684\u4e0d\u540c"
        },
        {
            "location": "/UserProfile/Introduction/#_2",
            "text": "\u7cbe\u51c6\u8425\u9500\uff1a\u5206\u6790\u4ea7\u54c1\u6f5c\u5728\u7528\u6237\uff0c\u9488\u5bf9\u7279\u5b9a\u7fa4\u4f53\u5229\u7528\u77ed\u4fe1\u3001\u90ae\u4ef6\u7b49\u65b9\u5f0f\u8fdb\u884c\u8425\u9500\u3002\u4f8b\u5982\u63a8\u9500\u6bcd\u5a74\u4ea7\u54c1\uff0c\u5c31\u5411\u6211\u4eec\u63a8\u6d4b\u51fa\u7684\u6709\u5c0f\u5b69\u7684\u6bcd\u4eb2\u6216\u7531\u8d2d\u4e70\u6570\u636e\u8868\u73b0\u51fa\u6765\u7684\u7ecf\u5e38\u8d2d\u4e70\u6bcd\u5a74\u4ea7\u54c1\u7684\u7528\u6237\u5b9a\u5411\u63a8\u8350\u3002  \u7528\u6237\u7edf\u8ba1\uff1a\u6bd4\u5982\u4e9a\u9a6c\u900a\u53ef\u4ee5\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u5b66\u79d1\u6216\u67d0\u4e2a\u66f4\u7ec6\u5206\u7684\u5b66\u79d1\u7ecf\u5e38\u8d2d\u4e70\u7684\u4e66\u7c4d\u3002  \u6570\u636e\u6316\u6398\uff1a\u6700\u5178\u578b\u7684\u4f8b\u5b50\u662f\u5564\u9152\u548c\u5c3f\u5e03\u3002\u53ef\u4ee5\u901a\u8fc7\u5173\u8054\u89c4\u5219\u5206\u6790\u51fa\u7ecf\u5e38\u5728\u4e00\u8d77\u8d2d\u4e70\u7684\u7269\u54c1\u7b49\u7b49\u3002  \u5b9a\u4f4d\u670d\u52a1\u7fa4\u4f53\uff1a\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002  \u51b3\u7b56\u652f\u6301\uff1a\u901a\u8fc7\u67d0\u7c7b\u53d7\u4f17\u7684\u559c\u597d\u6765\u5bf9\u4ea7\u54c1\u8fdb\u884c\u5b9a\u4ef7\uff0c\u5236\u5b9a\u8425\u9500\u7b56\u7565\u7b49\u3002  \u4e1a\u52a1\u7ecf\u8425\u5206\u6790\u4ee5\u53ca\u7ade\u4e89\u5206\u6790\uff1a\u4e3a\u4f01\u4e1a\u53d1\u5c55\u63d0\u4f9b\u6570\u636e\u5206\u6790\u7684\u652f\u6301\u3002   tricks:\u77e5\u4e4e\u4e0a\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u7f57\u632f\u5b87\u5728\u300a\u65f6\u95f4\u7684\u670b\u53cb\u300b\u8de8\u5e74\u6f14\u8bb2\u4e0a\u4e3e\u4f8b\uff1a\u5f53\u4e00\u4e2a\u574f\u5546\u5bb6\u638c\u63e1\u4e86\u4f60\u7684\u8d2d\u4e70\u6570\u636e\uff0c\u4ed6\u5c31\u53ef\u4ee5\u6839\u636e\u4f60\u5e73\u5e38\u8d2d\u4e70\u5546\u54c1\u7684\u504f\u597d\u6765\u51b3\u5b9a\u7ed9\u4f60\u53d1\u6b63\u54c1\u8fd8\u662f\u5047\u8d27\u6765\u63d0\u9ad8\u5229\u6da6\u3002\u8fd9\u8bf4\u660e\u4e86\u7528\u6237\u753b\u50cf\u786e\u5b9e\u53ef\u4ee5\u505a\u5230\"\u7cbe\u51c6\u8425\u9500\"\uff0c\u5f53\u7136\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u9519\u8bef\u7684\u505a\u6cd5\u3002  \u6211\u8fd8\u60f3\u5230\u4e86\u9a6c\u4e91\u5728\u67d0\u6b21\u6f14\u8bb2\u4e2d\u8bf4\u5927\u6570\u636e\u7684\u4f5c\u7528\uff0c\u95ee\u5927\u5bb6\u5168\u56fd\u80f8\u6700\u5c0f\u7684\u7701\u4efd\u662f\u54ea\u91cc\u3002\u6211\u731c\u6d4b\u662f\u6839\u636e\u5404\u7701\u4efd\u7684\u7528\u6237\u6240\u8d2d\u4e70\u7684\u67d0\u6837\u4e1c\u897f\u7684\u5927\u5c0f\u6765\u8fdb\u884c\u7edf\u8ba1\u7684\uff0c\u5f53\u7136\u4e5f\u6709\u5f88\u591a\u5176\u4ed6\u8f85\u52a9\u624b\u6bb5\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u80fd\u8bf4\u660e\u7528\u6237\u753b\u50cf\u5728\u7528\u6237\u7edf\u8ba1\u65b9\u9762\u7684\u4f5c\u7528\u3002",
            "title": "\u7528\u6237\u753b\u50cf\u7684\u4f5c\u7528"
        },
        {
            "location": "/UserProfile/Introduction/#_3",
            "text": "\u6211\u4eec\u8981\u5efa\u7acb\u7528\u6237\u753b\u50cf\uff0c\u9700\u8981\u6536\u96c6\u6570\u636e\uff0c\u53ef\u662f\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5462\uff1f\u8fd9\u4e9b\u9700\u8981\u6839\u636e\u8981\u5efa\u7acb\u7684\u6807\u7b7e\u7cfb\u7edf\u6765\u8bf4\u3002\u5373\u6211\u4eec\u8981\u4e86\u89e3\u7528\u6237\u7684\u54ea\u4e9b\u5c5e\u6027\u3002\u7528\u6237\u7684\u6807\u7b7e\u7cfb\u7edf\u5c31\u50cf\u5bf9\u5546\u54c1\u5206\u7c7b\uff0c\u6bd4\u5982\u5bf9\u4e66\u8fdb\u884c\u5206\u7c7b\uff0c\u4e2d\u6587\u8fd8\u662f\u5916\u6587\uff1f\u662f\u6587\u5b66\u7c7b\u7ecf\u7ba1\u7c7b\u793e\u79d1\u7c7b\u8fd8\u662f\u79d1\u6280\u7c7b\uff1f\u5728\u8fd9\u4e9b\u7c7b\u522b\u4e0b\u8fd8\u6709\u66f4\u7ec6\u5206\u7684\u7c7b\u522b\u3002\n\u7528\u6237\u7684\u5206\u7c7b\u8ddf\u4e66\u7684\u5206\u7c7b\u7c7b\u4f3c\uff0c\u4f46\u662f\u7528\u6237\u7684\u5206\u7c7b\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u4eba\u7684\u5174\u8da3\u5206\u7c7b\uff0c\u662f\u6709\u65f6\u6548\u6027\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u8de8\u8d8a\u5f88\u591a\u4e0d\u540c\u7684\u5174\u8da3\u5206\u7c7b\u7b49\u7b49\u3002  \u9605\u8bfb\u8d44\u6599\u540e\uff0c\u6211\u5f52\u7eb3\u7684\u7528\u6237\u753b\u50cf\u4e3b\u8981\u6709\u4ee5\u4e0b\u56db\u4e2a\u7ef4\u5ea6\u7684\u6807\u7b7e\uff1a   \u57fa\u672c\u5c5e\u6027\uff1a\u4e3b\u8981\u662f\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\uff1a \u6027\u522b \u3001 \u5e74\u9f84\u6216\u79bb\u6563\u7684\u5e74\u9f84\u6bb5 \u3001 \u751f\u6d3b\u5de5\u4f5c\u5b66\u4e60\u7684\u5730\u533a \u3002\u8fd8\u6709\u4e00\u4e9b \u624b\u673a\u53f7\u7801 \u3001 \u90ae\u7bb1 \u7b49\u5c5e\u6027\u3002  \u793e\u4f1a\u5c5e\u6027\uff1a \u5b66\u5386 \u3001 \u804c\u4e1a \u3001 \u6536\u5165 \u3001 \u5a5a\u59fb\u72b6\u51b5 \u3001 \u5bb6\u5ead\u6210\u5458 (\u53ef\u80fd\u4e5f\u4f1a\u5305\u542b\u5bb6\u5ead\u6210\u5458\u7684\u5c5e\u6027\uff0c\u5982 \u6709\u591a\u5927\u7684\u5b69\u5b50 \u7b49)\u7b49(\u8fd9\u4e9b\u5c5e\u6027\u53ef\u80fd\u4f1a\u7a0d\u5fae\u53d8\u5316)\u3002\u4e0d\u540c\u4ea7\u54c1\u4f1a\u5bf9\u4e0d\u540c\u7684\u5c5e\u6027\u611f\u5174\u8da3\uff0c\u5982\u6559\u80b2\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5b66\u5386\u66f4\u611f\u5174\u8da3\uff0c\u6bcd\u5a74\u4ea7\u54c1\u53ef\u80fd\u5bf9\u5bb6\u5ead\u6210\u5458\u611f\u5174\u8da3\u3002  \u4e2a\u6027\u5c5e\u6027\uff1a\u4e3b\u8981\u6307\u7531\u7528\u6237\u5728\u4e92\u8054\u7f51\u73af\u5883\u4e0b\u4ea7\u751f\u7684\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u5982\u5728\u7535\u5546\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u505c\u7559\u65f6\u957f\u3001\u8d2d\u4e70\u7b49\u884c\u4e3a\uff0c\u8d2d\u4e70\u7684\u5546\u54c1\u7684\u5c5e\u6027\uff0c\u5bf9\u5546\u54c1\u7684\u8bc4\u4ef7\u7b49\u7b49\u5f52\u7eb3\u51fa\u6765\u7684\u7528\u6237\u8d2d\u4e70\u7684 \u7c7b\u76ee\u504f\u597d (\u559c\u6b22\u6536\u7eb3\u6216\u559c\u6b22\u65e5\u7cfb\u7b49)\u3001 \u54c1\u724c\u504f\u597d \u3001 \u5546\u54c1\u5c5e\u6027\u504f\u597d (\u9ad8\u6027\u4ef7\u6bd4\u6216\u5962\u4f88\u54c1\u7b49)\u7b49\u7b49\u3002\u5728\u793e\u4ea4\u7f51\u7ad9\u4e2d\u7531\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u641c\u7d22\u3001\u827e\u7279\u670b\u53cb\uff0c\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\uff0c\u53d1\u5e03\u5185\u5bb9\uff0c\u5f15\u7528\u8bdd\u9898\u7b49\u884c\u4e3a\u5f52\u7eb3\u51fa\u6765\u7684 \u7528\u6237\u5174\u8da3\u504f\u597d \uff0c \u793e\u4ea4\u5c5e\u6027 \u7b49\u7b49\u3002  \u4ef7\u503c\u5c5e\u6027\uff1a\u8fd9\u4e2a\u4e3b\u8981\u662f\u8be5\u7528\u6237\u5bf9\u4ea7\u54c1\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u8be5\u7528\u6237\u672c\u8eab\u7684\u4ef7\u503c\u3002\u5bf9\u4e8e\u7535\u5546\u7f51\u7ad9\u6765\u8bf4\u7528\u6237\u7684 \u6d88\u8d39\u6863\u6b21 \uff0c \u7528\u6237\u79ef\u5206\u7b49\u7ea7 \uff0c\u8d2d\u4e70\u9891\u6b21\u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u793e\u4ea4\u7f51\u7ad9\u6765\u8bf4\uff0c\u7528\u6237\u7684 \u6d3b\u8dc3\u5ea6 \u3001 \u5f71\u54cd\u529b \u7b49\u662f\u5224\u65ad\u7528\u6237\u4ef7\u503c\u7684\u5c5e\u6027\u3002\u5bf9\u94f6\u884c\u6765\u8bf4\uff0c\u7528\u6237\u7684\u501f\u8d37\u4fe1\u606f\u7b49\u51b3\u5b9a\u7528\u6237 \u8bda\u4fe1\u5ea6 \u4ef7\u503c\u3002   \u77e5\u4e4e\u4e0a\u6709\u4eba\u8bf4\u53ef\u4ee5\u4ece\u4eba\u7684\u5fc3\u7406\u3001\u4eba\u683c\u5c42\u9762\u5bf9 \u4ef7\u503c\u89c2 \u3001 \u4eba\u683c \u8fdb\u884c\u5efa\u6a21\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u6709\u4e9b\u7ec6\u601d\u6050\u6781\uff0c\u4f46\u662f\u5e94\u8be5\u4e5f\u662f\u4e00\u4e2a\u53d1\u5c55\u65b9\u5411\u3002\n\u6211\u4eec\u73b0\u5728\u6240\u505a\u7684\u5c31\u662f\u5c06\u4eba\u6570\u636e\u5316\uff0c\u53ea\u662f\u6bcf\u4e2a\u4eba\u6240\u5305\u542b\u7684\u6807\u7b7e\u8fd8\u4e0d\u591f\u591a\uff0c\u6240\u638c\u63e1\u7684\u4fe1\u606f\u4e0d\u591f\u591a\uff0c\u8fd8\u6ca1\u6709\u5230\u8fbe\u80fd\u591f\u8fd8\u539f\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u4eba\u7684\u5730\u6b65\u3002\n\u8bf4\u8fd9\u4e2a\u53ea\u662f\u5e2e\u52a9\u7406\u89e3\u7528\u6237\u753b\u50cf\u662f\u4ec0\u4e48\u3002",
            "title": "\u7528\u6237\u753b\u50cf\u6807\u7b7e\u7cfb\u7edf"
        },
        {
            "location": "/UserProfile/Introduction/#_4",
            "text": "\u4e0d\u540c\u516c\u53f8\u7684\u4e1a\u52a1\u5bfc\u81f4\u4e86\u5b83\u4eec\u7684\u6570\u636e\u7c7b\u578b\u4f1a\u6709\u5f88\u5927\u7684\u4e0d\u540c\u3002\u4f8b\u5982\u5bf9\u57fa\u672c\u5c5e\u6027\uff0c\u963f\u91cc\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u662f\u975e\u5e38\u7cbe\u786e\u7684\uff0c\u4e0d\u5149\u662f\u4ece\u7528\u6237\u586b\u5199\u7684\u8d44\u6599\u65b9\u9762\uff0c\u4ece\u963f\u91cc\u7684\u5927\u91cf\u7535\u5546\u6570\u636e\u4e2d\u53ef\u4ee5\u975e\u5e38\u7cbe\u51c6\u5730\u63a8\u6d4b\u8be5\u7528\u6237\u7684\u57fa\u672c\u5c5e\u6027\u3002\u800c\u767e\u5ea6\u7528\u6237\u7684\u57fa\u672c\u4fe1\u606f\u6bd4\u8f83\u4e0d\u7cbe\u786e\uff0c\u4f46\u662f\u767e\u5ea6\u7684\u641c\u7d22\u6570\u636e\u5728\u5b8f\u89c2\u5c42\u9762\u6709\u975e\u5e38\u591a\u7684\u5e94\u7528\u3002\u4f8b\u5982\u963f\u91cc\u7684\u793e\u4ea4\u6570\u636e\u5c31\u4e0d\u5982\u817e\u8baf\uff0c\u6240\u4ee5\u5bf9\u4e8e\u4e0d\u540c\u516c\u53f8\uff0c\u6536\u96c6\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\u7684\u80fd\u529b\u662f\u6709\u4e00\u5b9a\u9650\u5236\u7684\u3002  \u4e2a\u4eba\u8ba4\u4e3a\uff1a\u6536\u96c6\u54ea\u4e9b\u6570\u636e\u5176\u5b9e\u662f\u7279\u5f81\u5de5\u7a0b\u7684\u4e00\u90e8\u5206\u3002  \u6765\u81ea\u7f51\u7edc\u7684\u603b\u7ed3\u548c\u4e2a\u4eba\u601d\u8003(\u6839\u636e\u4f5c\u8005\u7684\u5b9e\u9645\u7ecf\u5386\u53ef\u80fd\u4f1a\u6709\u4e9b\u4fee\u6b63\u548c\u66f4\u65b0)\uff1a  \u5bf9\u4e8e\u50cf\u963f\u91cc\u8fd9\u6837\u7684\u7535\u5546\u5927\u6237\uff1a   \u7f51\u7edc\u884c\u4e3a\u6570\u636e\uff1a\u6d3b\u8dc3\u5929\u6570\u3001\u9875\u9762\u6d4f\u89c8\u91cf\u3001\u8bbf\u95ee\u65f6\u957f\u3001\u6fc0\u6d3b\u7387(\u5927\u6982\u662f\u6d4f\u89c8\u8f6c\u5316\u4e3a\u70b9\u51fb\u7684\u6bd4\u7387\uff1f)\u3001\u5916\u90e8\u89e6\u70b9(\uff1f)\u3001\u793e\u4ea4\u6570\u636e\u7b49\u3002  \u670d\u52a1\u5185\u884c\u4e3a\u6570\u636e\uff1a\u6d4f\u89c8\u8def\u5f84\u3001\u9875\u9762\u505c\u7559\u65f6\u957f\u3001\u8bbf\u95ee\u6df1\u5ea6\u3001\u552f\u4e00\u9875\u9762\u6d4f\u89c8\u6b21\u6570(\uff1f)\u7b49\u3002  \u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8/\u6536\u85cf\u5185\u5bb9\u3001\u8d2d\u7269\u8f66\u5185\u5bb9\u3001\u8bc4\u8bba\u5185\u5bb9\u3001\u4e92\u52a8\u5185\u5bb9\u3001\u751f\u6d3b\u5f62\u6001\u504f\u597d\u3001\u54c1\u724c\u504f\u597d\u7b49\u3002  \u4ea4\u6613\u6570\u636e\uff1a\u8d21\u732e\u7387\u3001\u5ba2\u5355\u4ef7(\uff1f)\u3001\u8fde\u5e26\u7387\u3001\u56de\u5934\u7387\u3001\u6d41\u5931\u7387\u7b49\u3002   \u5bf9\u4e8e\u50cf\u65b0\u6d6a\u5fae\u535a\u8fd9\u6837\u7684\u793e\u4f1a\u5a92\u4f53\u5927\u6237\uff1a   \u5185\u5bb9\u504f\u597d\u6570\u636e\uff1a\u6d4f\u89c8\u3001\u70b9\u51fb\u3001\u70b9\u8d5e\u3001\u8bc4\u8bba\u3001\u8f6c\u53d1\u3001\u641c\u7d22\u3001\u5206\u7ec4\u7b49  \u793e\u4ea4\u6570\u636e\uff1a\u5173\u6ce8\u3001\u88ab\u5173\u6ce8\u3001\u53cc\u5411\u5173\u6ce8\u3001\u53d1\u5e03\u7684\u5185\u5bb9\u827e\u7279\u7684\u670b\u53cb\u7b49  \u5185\u5bb9\u4ea7\u51fa\u6570\u636e\uff1a\u53d1\u5e03\u7684\u5fae\u535a\u6587\u672c\u3001\u56fe\u7247\u3001\u89c6\u9891\u3001\u53c2\u4e0e\u7684\u8bdd\u9898\u7b49   \u672a\u6765\u5f85\u5206\u6790(\u4e5f\u6709\u53ef\u80fd\u4e0d\u5206\u6790\u4e86)\uff1a\u817e\u8baf\u793e\u4ea4\u5927\u6237\u3001b\u7ad9\u89c6\u9891\u5927\u6237\u3001\u7f51\u6613\u4e91\u97f3\u4e50\u7b49\u7b49\u3002",
            "title": "\u7528\u6237\u753b\u50cf\u9700\u8981\u6536\u96c6\u54ea\u4e9b\u6570\u636e"
        },
        {
            "location": "/Classification/logistic_regression/",
            "text": "Introduction\n\n\nLogistic Regression\uff0c\u903b\u8f91\u65af\u8482\u56de\u5f52\u3002",
            "title": "Logistic Regression"
        },
        {
            "location": "/Classification/logistic_regression/#introduction",
            "text": "Logistic Regression\uff0c\u903b\u8f91\u65af\u8482\u56de\u5f52\u3002",
            "title": "Introduction"
        },
        {
            "location": "/Classification/random_forest/",
            "text": "Introduction\n\n\nRandom Forest\uff0c\u968f\u673a\u68ee\u6797\u3002",
            "title": "Random Forest"
        },
        {
            "location": "/Classification/random_forest/#introduction",
            "text": "Random Forest\uff0c\u968f\u673a\u68ee\u6797\u3002",
            "title": "Introduction"
        },
        {
            "location": "/Classification/support_vector_machine/",
            "text": "Introduction\n\n\nSupport Vector Machine(SVM)\uff0c\u652f\u6301\u5411\u91cf\u673a\u3002",
            "title": "Support Vector Machine"
        },
        {
            "location": "/Classification/support_vector_machine/#introduction",
            "text": "Support Vector Machine(SVM)\uff0c\u652f\u6301\u5411\u91cf\u673a\u3002",
            "title": "Introduction"
        },
        {
            "location": "/Classification/back_propagation_neural_networks/",
            "text": "Introduction\n\n\nBack-propagation neural networks\uff0c\u53cd\u5411\u4f20\u64ad\u795e\u7ecf\u7f51\u7edc\u3002",
            "title": "Multi-Layer Perceptron(MLP)"
        },
        {
            "location": "/Classification/back_propagation_neural_networks/#introduction",
            "text": "Back-propagation neural networks\uff0c\u53cd\u5411\u4f20\u64ad\u795e\u7ecf\u7f51\u7edc\u3002",
            "title": "Introduction"
        },
        {
            "location": "/DeepLearning/Introduction/",
            "text": "\u8bf4\u660e\n\n\n\u7b14\u8bb0\u8bf4\u660e\n\n\n\u6b64\u677f\u5757\u5e76\u4e0d\u662f\u6211\u7684\u539f\u521b\uff0c\u800c\u662f\u5b66\u4e60\u65f6\u5019\u7684\u7b14\u8bb0\u3002\n\u8be5\u7b14\u8bb0\u4e3a\u4e2a\u4eba\u5411\uff0c\u662f\u4e2a\u4eba\u89c9\u5f97\u91cd\u8981\u800c\u6458\u6284\u7684\u77e5\u8bc6\u70b9\u3002\n\n\n\u4e66\u672c\u4ecb\u7ecd\n\n\n\u6b64\u6a21\u5757\u4e3b\u8981\u662f\u5bf9Deep Learning\u7684\u5b66\u4e60\u3002\n\u6240\u53c2\u8003\u7684\u6559\u6750\u662f\n\u82b1\u4e66: Deep Learning\n\uff0c\u8be5\u4e66\u7531\u5168\u7403\u77e5\u540d\u7684\u4e09\u4f4d\u4e13\u5bb6 Ian Goodfellow\u3001Yoshua Bengio \u548c Aaron Courville\u8054\u5408\u64b0\u5199\uff0c\u662f\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u5960\u57fa\u6027\u7684\u7ecf\u5178\u6559\u6750\u3002",
            "title": "Introduction"
        },
        {
            "location": "/DeepLearning/Introduction/#_1",
            "text": "",
            "title": "\u8bf4\u660e"
        },
        {
            "location": "/DeepLearning/Introduction/#_2",
            "text": "\u6b64\u677f\u5757\u5e76\u4e0d\u662f\u6211\u7684\u539f\u521b\uff0c\u800c\u662f\u5b66\u4e60\u65f6\u5019\u7684\u7b14\u8bb0\u3002\n\u8be5\u7b14\u8bb0\u4e3a\u4e2a\u4eba\u5411\uff0c\u662f\u4e2a\u4eba\u89c9\u5f97\u91cd\u8981\u800c\u6458\u6284\u7684\u77e5\u8bc6\u70b9\u3002",
            "title": "\u7b14\u8bb0\u8bf4\u660e"
        },
        {
            "location": "/DeepLearning/Introduction/#_3",
            "text": "\u6b64\u6a21\u5757\u4e3b\u8981\u662f\u5bf9Deep Learning\u7684\u5b66\u4e60\u3002\n\u6240\u53c2\u8003\u7684\u6559\u6750\u662f \u82b1\u4e66: Deep Learning \uff0c\u8be5\u4e66\u7531\u5168\u7403\u77e5\u540d\u7684\u4e09\u4f4d\u4e13\u5bb6 Ian Goodfellow\u3001Yoshua Bengio \u548c Aaron Courville\u8054\u5408\u64b0\u5199\uff0c\u662f\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u5960\u57fa\u6027\u7684\u7ecf\u5178\u6559\u6750\u3002",
            "title": "\u4e66\u672c\u4ecb\u7ecd"
        },
        {
            "location": "/DeepLearning/chapter_1/",
            "text": "",
            "title": "Chapter 1"
        },
        {
            "location": "/code_offer/Introduction/",
            "text": "\u8bf4\u660e\n\n\n\u8fd9\u91cc\u662f\u6211\u5728\u725b\u5ba2\u7f51\u4e0a\u7ec3\u4e60\u7f16\u7a0b\u9898\u7559\u4e0b\u6765\u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\uff0c\u65b9\u4fbf\u81ea\u5df1\u6574\u7406\u77e5\u8bc6\u548c\u590d\u4e60\u56de\u987e\u3002\n\n\n\u73b0\u5728\u8fd9\u91cc\u53ea\u6709Java\u7248\u672c\u7684\u7a0b\u5e8f\uff0c\u5f80\u540e\u53ef\u80fd\u4f1a\u6709Python\u7248\u672c\u7684\u4ee3\u7801\u3002\n\n\n\u76ee\u524d\u66f4\u65b0\u7684Java\u7248\u672c\u7a0b\u5e8f\u662f\u6211\u5728\u6ca1\u6709\u770b\u7f51\u4e0a\u7684\u5927\u5bb6\u63d0\u4f9b\u7684\u60c5\u51b5\u4e0b\u5199\u7684\u4ee3\u7801\uff08\u6709\u51e0\u4e2a\u9898\u505a\u4e0d\u51fa\u6765\u8fd8\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u725b\u7684\u5199\u6cd5\uff09\uff0c\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u725b\u5ba2\u7f51\u4ee3\u7801\u7684\u6d4b\u8bd5\uff0c\u4f46\u662f\u4e5f\u53ef\u80fd\u5b58\u5728\u5c11\u8bb8\u9519\u8bef\uff0c\u5e94\u8be5\u8bf4\n\u4e00\u5b9a\u4f1a\u6709\u9519\u8bef\n\u3002\u4ee3\u7801\u5199\u5f97\u4e5f\u4e0d\u591f\u591a\uff0c\u53ea\u80fd\u778e\u641e\u641e\u8fd9\u6837\u5b50\uff0c\u6709\u65f6\u5019\u8003\u8651\u4e0d\u5468\u5168\uff0c\u6709\u65f6\u5019\u6b6a\u6253\u6b63\u7740\u3002\n\n\n\u5982\u679c\u53d1\u73b0\u4e86\u9519\u8bef\uff0c\u8bf7\u4e0e\u6211\u8054\u7cfb~ \u5fae\u535a\uff1a\u84dd\u767d\u7edb\u3002",
            "title": "Introduction"
        },
        {
            "location": "/code_offer/Introduction/#_1",
            "text": "\u8fd9\u91cc\u662f\u6211\u5728\u725b\u5ba2\u7f51\u4e0a\u7ec3\u4e60\u7f16\u7a0b\u9898\u7559\u4e0b\u6765\u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0\uff0c\u65b9\u4fbf\u81ea\u5df1\u6574\u7406\u77e5\u8bc6\u548c\u590d\u4e60\u56de\u987e\u3002  \u73b0\u5728\u8fd9\u91cc\u53ea\u6709Java\u7248\u672c\u7684\u7a0b\u5e8f\uff0c\u5f80\u540e\u53ef\u80fd\u4f1a\u6709Python\u7248\u672c\u7684\u4ee3\u7801\u3002  \u76ee\u524d\u66f4\u65b0\u7684Java\u7248\u672c\u7a0b\u5e8f\u662f\u6211\u5728\u6ca1\u6709\u770b\u7f51\u4e0a\u7684\u5927\u5bb6\u63d0\u4f9b\u7684\u60c5\u51b5\u4e0b\u5199\u7684\u4ee3\u7801\uff08\u6709\u51e0\u4e2a\u9898\u505a\u4e0d\u51fa\u6765\u8fd8\u662f\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u725b\u7684\u5199\u6cd5\uff09\uff0c\u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u725b\u5ba2\u7f51\u4ee3\u7801\u7684\u6d4b\u8bd5\uff0c\u4f46\u662f\u4e5f\u53ef\u80fd\u5b58\u5728\u5c11\u8bb8\u9519\u8bef\uff0c\u5e94\u8be5\u8bf4 \u4e00\u5b9a\u4f1a\u6709\u9519\u8bef \u3002\u4ee3\u7801\u5199\u5f97\u4e5f\u4e0d\u591f\u591a\uff0c\u53ea\u80fd\u778e\u641e\u641e\u8fd9\u6837\u5b50\uff0c\u6709\u65f6\u5019\u8003\u8651\u4e0d\u5468\u5168\uff0c\u6709\u65f6\u5019\u6b6a\u6253\u6b63\u7740\u3002  \u5982\u679c\u53d1\u73b0\u4e86\u9519\u8bef\uff0c\u8bf7\u4e0e\u6211\u8054\u7cfb~ \u5fae\u535a\uff1a\u84dd\u767d\u7edb\u3002",
            "title": "\u8bf4\u660e"
        },
        {
            "location": "/code_offer/java1-10/",
            "text": "1 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e\n\n\n\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002\n\n\npublic class Solution {\n    public boolean Find(int target, int [][] array)\n    {\n        boolean flag = false;\n        for(int i=0; i<array.length; i++)\n        {\n            for(int j=0; j<array[0].length; j++)\n            {\n                if(array[i][j] < target)\n                {\n                    continue;\n                }else if(array[i][j] > target){\n                    break;\n                }else{\n                    flag = true;\n                }\n            }\n        }\n        return flag;\n    }\n}\n\n\n\n\n2 \u66ff\u6362\u7a7a\u683c\n\n\n\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002\n\n\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        return str.toString().replaceAll(\" \",\"%20\");\n    }\n}\n\n\n\n\n3 \u4ece\u5934\u5230\u4f4d\u6253\u5370\u94fe\u8868\n\n\n\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u503c\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2aArrayList\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.Stack;\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        if(listNode == null)\n        {\n            return arrayList;\n        }else{\n            Stack<Integer> s = new Stack<Integer>();\n            while(listNode.next != null)\n            {\n                s.push(listNode.val);\n                listNode = listNode.next;\n            }\n            arrayList.add(listNode.val);\n            while(s.empty()==false)\n            {\n                arrayList.add(s.pop());\n            }\n            return arrayList;\n        }\n    }\n}\n\n\n\n\n4 \u91cd\u5efa\u4e8c\u53c9\u6811\n\n\n\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1,2,4,7,3,5,6,8}\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4,7,2,1,5,3,8,6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002\n\n\npublic class Solution {\n    public TreeNode reConstructBinaryTree(int[] pre, int[] in)\n    {//reConstructBinaryTree\u4e3b\u8981\u662f\u4e00\u4e2a\u8fd4\u56de\u6839\u8282\u70b9\u7684\u7b97\u6cd5\n        if(pre.length == 0)\n        {\n            return null;//pre\u548cin\u7684length\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u67e5\u770b\u4e00\u4e2a\u662f\u5426\u957f\u5ea6\u4e3a0\u5c31\u884c\n            //\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\u662f\uff1a\u8282\u70b9\u5907\u9009\u9879\u957f\u5ea6\u4e3a0\uff0c\u8fd9\u4e2a\u65f6\u5019\u60f3\u8981\u57280\u4e2a\u6570\u4e2d\u627e\u5230\u6839\u8282\u70b9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u8fd4\u56denull\n            //\u540c\u6837\u5bf9\u4e8e\u4e00\u5f00\u59cb\u7ed9\u5b9a\u7684pre\u548cin\uff0c\u5982\u679c\u90fd\u662f\u7a7a\u7684\u6ca1\u6709\u6570\u5b57\u7684\uff0c\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2anull\u7684\u6839\u8282\u70b9\n        }else{//\u5982\u679cpre\u548cin\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u627e\u5176\u4e2d\u7684\u6839\u8282\u70b9\n            //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e5f\u8981\u627e\u6839\u8282\u70b9\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u6839\u8282\u70b9\u5c31\u662findex\u4e3a0\u7684\u6570\uff0c\u5176\u5de6\u53f3\u7684\u6570\u5747\u4e3a0\n            //\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u5747\u4e3a0\uff0c\u90a3\u4e48\u8fd4\u56de\u5176\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\u4e3anull\n\n            int root_value = pre[0];//\u6839\u8282\u70b9\u7684\u503c\u4e3apre\u7684\u7b2c\u4e00\u4e2a\u6570\n            int index = in_index(root_value, in);//\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684index\n\n            //\u5de6\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230left_pre\u548cleft_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52\n            int[] left_pre = new int[index];\n            int[] left_in = new int[index];\n            for(int i=0; i<left_pre.length; i++)\n            {\n                left_pre[i] = pre[i+1];\n                left_in[i] = in[i];\n            }\n            //\u53f3\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230right_pre\u548cright_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52\n            int[] right_pre = new int[in.length-1-index];\n            int[] right_in = new int[in.length-1-index];\n            for(int i=0; i<right_pre.length; i++)\n            {\n                right_pre[i] = pre[i+index+1];\n                right_in[i] = in[i+index+1];\n            }\n\n            TreeNode root = new TreeNode(root_value);\n            root.left = reConstructBinaryTree(left_pre,left_in);\n            root.right = reConstructBinaryTree(right_pre,right_in);\n            return root;\n        }\n    }\n\n    public int in_index(int target, int[] in)\n    {\n        int index = -1;\n        for(int i=0; i<in.length; i++)\n        {\n            if(in[i] == target)\n            {\n                index = i;\n            }\n        }\n        return index;\n    }\n}\n\n\n\n\n5 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\n\n\n\u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3aint\u7c7b\u578b\u3002\n\n\nimport java.util.Stack;\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n\n    public void push(int node) {\n        stack1.push(node);\n    }\n\n    public int pop() {\n        while(stack1.empty()==false)\n        {\n            stack2.push(stack1.pop());\n        }\n        int value = stack2.pop();\n        while(stack2.empty()==false)\n        {\n            stack1.push(stack2.pop());\n        }\n        return value;\n    }\n}\n\n\n\n\n6 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57\n\n\n\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002\n\n\nimport java.util.ArrayList;\npublic class Solution {\n    public int minNumberInRotateArray(int [] array)\n    {\n        int n = 0;\n        if(array.length == 1)\n        {\n            n = array[0];\n        }else if(array.length > 1)\n        {\n            boolean flag = false;\n            for(int i=1; i<array.length-1; i++)\n            {\n                if(array[i]<array[i-1])\n                {\n                    flag = true;\n                    n = array[i];\n                }\n            }\n            if(flag == false)\n            {\n                n = array[0];\n            }\n        }\n        return n;\n    }\n}\n\n\n\n\n7 \u6590\u6ce2\u90a3\u5951\u6570\u5217\n\n\n\u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff08\u4ece0\u5f00\u59cb\uff0c\u7b2c0\u9879\u4e3a0\uff09\u3002n<=39\n\n\npublic class Solution {\n    public int Fibonacci(int n)\n    {\n        int result = 0;\n        if(n==0)\n        {\n            result = 0;\n        }else if(n==1)\n        {\n            result = 1;\n        }else{\n            result = Fibonacci(n-2) + Fibonacci(n-1);\n        }\n        return result;\n    }\n}\n\n\n\n\n8 \u8df3\u53f0\u9636\n\n\n\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002\n\n\npublic class Solution {\n    public int JumpFloor(int target)\n    {\n        int n_solution = 0;\n        if(target==1){\n            n_solution = 1;\n        }else if(target>1)\n        {\n            int max_double = target/2;\n            for(int n_2=0; n_2<=max_double; n_2++)\n            {\n                int n_1 = target - 2 * n_2;\n                n_solution = n_solution + get_catogory(n_1, n_2);\n            }\n        }\n        return n_solution;\n    }\n\n    public int get_catogory(int int_n_1, int int_n_2)\n    {\n        long n_1 = int_n_1;\n        long n_2 = int_n_2;\n        if(n_1==0 ||n_2==0)\n        {\n            return 1;\n        }\n        long n = n_1 + n_2;\n        if(n_1>n_2)\n        {\n            n_1 = n_2;\n        }\n        long up = n;\n        long down = 1l;\n        for(int i=1; i<n_1; i++)\n        {\n            up = up * (n-i);\n            down = down * (1+i);\n        }\n        long n_return = up/down;\n        return (int)n_return;\n    }\n}\n\n\n\n\n9 \u53d8\u6001\u8df3\u53f0\u9636\n\n\n\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002\n\n\npublic class Solution {\n    public int JumpFloorII(int target)\n    {\n        int n_solution = 0;\n        if(target == 0)\n        {\n            return 0;\n        }else if(target == 1)\n        {\n            return 1;\n        }else{\n            int[] array = new int[target+1];\n            array[0] = 0;\n            array[1] = 1;\n\n            for(int i=2; i<target+1; i++)\n            {\n                array[i] = 0;\n                for(int j=0; j<i; j++)\n                {\n                    array[i] += array[j];\n                }\n                ++array[i];\n            }\n            n_solution = array[target];\n        }\n        return n_solution;\n    }\n}\n\n\n\n\n10 \u77e9\u5f62\u8986\u76d6\n\n\n\u6211\u4eec\u53ef\u4ee5\u75282*1\u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528n\u4e2a2*1\u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a2*n\u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f\n\n\npublic class Solution {\n    public int RectCover(int target)\n    {\n        int n_solution = 0;\n        if(target==1){\n            n_solution = 1;\n        }else if(target>1)\n        {\n            int max_double = target/2;\n            for(int n_2=0; n_2<=max_double; n_2++)\n            {\n                int n_1 = target - (2 * n_2);\n                n_solution = n_solution + get_catogory(n_1, n_2);\n            }\n        }\n        return n_solution;\n    }\n\n    public int get_catogory(int int_n_1, int int_n_2)\n    {\n        long n_1 = int_n_1;\n        long n_2 = int_n_2;\n        if(n_1==0 ||n_2==0)\n        {\n            return 1;\n        }\n        long n = n_1 + n_2;\n        if(n_1>n_2)\n        {\n            n_1 = n_2;\n        }\n        long up = n;\n        long down = 1l;\n        for(int i=1; i<n_1; i++)\n        {\n            up = up * (n-i);\n            down = down * (1+i);\n        }\n        long n_return = up/down;\n        return (int)n_return;\n    }\n}",
            "title": "Java 1-10"
        },
        {
            "location": "/code_offer/java1-10/#1",
            "text": "\u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff08\u6bcf\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u957f\u5ea6\u76f8\u540c\uff09\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002  public class Solution {\n    public boolean Find(int target, int [][] array)\n    {\n        boolean flag = false;\n        for(int i=0; i<array.length; i++)\n        {\n            for(int j=0; j<array[0].length; j++)\n            {\n                if(array[i][j] < target)\n                {\n                    continue;\n                }else if(array[i][j] > target){\n                    break;\n                }else{\n                    flag = true;\n                }\n            }\n        }\n        return flag;\n    }\n}",
            "title": "1 \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"
        },
        {
            "location": "/code_offer/java1-10/#2",
            "text": "\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3aWe Are Happy.\u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u4e3aWe%20Are%20Happy\u3002  public class Solution {\n    public String replaceSpace(StringBuffer str) {\n        return str.toString().replaceAll(\" \",\"%20\");\n    }\n}",
            "title": "2 \u66ff\u6362\u7a7a\u683c"
        },
        {
            "location": "/code_offer/java1-10/#3",
            "text": "\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u6309\u94fe\u8868\u503c\u4ece\u5c3e\u5230\u5934\u7684\u987a\u5e8f\u8fd4\u56de\u4e00\u4e2aArrayList\u3002  import java.util.ArrayList;\nimport java.util.Stack;\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        if(listNode == null)\n        {\n            return arrayList;\n        }else{\n            Stack<Integer> s = new Stack<Integer>();\n            while(listNode.next != null)\n            {\n                s.push(listNode.val);\n                listNode = listNode.next;\n            }\n            arrayList.add(listNode.val);\n            while(s.empty()==false)\n            {\n                arrayList.add(s.pop());\n            }\n            return arrayList;\n        }\n    }\n}",
            "title": "3 \u4ece\u5934\u5230\u4f4d\u6253\u5370\u94fe\u8868"
        },
        {
            "location": "/code_offer/java1-10/#4",
            "text": "\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1,2,4,7,3,5,6,8}\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4,7,2,1,5,3,8,6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002  public class Solution {\n    public TreeNode reConstructBinaryTree(int[] pre, int[] in)\n    {//reConstructBinaryTree\u4e3b\u8981\u662f\u4e00\u4e2a\u8fd4\u56de\u6839\u8282\u70b9\u7684\u7b97\u6cd5\n        if(pre.length == 0)\n        {\n            return null;//pre\u548cin\u7684length\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u67e5\u770b\u4e00\u4e2a\u662f\u5426\u957f\u5ea6\u4e3a0\u5c31\u884c\n            //\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\u662f\uff1a\u8282\u70b9\u5907\u9009\u9879\u957f\u5ea6\u4e3a0\uff0c\u8fd9\u4e2a\u65f6\u5019\u60f3\u8981\u57280\u4e2a\u6570\u4e2d\u627e\u5230\u6839\u8282\u70b9\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u8fd4\u56denull\n            //\u540c\u6837\u5bf9\u4e8e\u4e00\u5f00\u59cb\u7ed9\u5b9a\u7684pre\u548cin\uff0c\u5982\u679c\u90fd\u662f\u7a7a\u7684\u6ca1\u6709\u6570\u5b57\u7684\uff0c\u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2anull\u7684\u6839\u8282\u70b9\n        }else{//\u5982\u679cpre\u548cin\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u627e\u5176\u4e2d\u7684\u6839\u8282\u70b9\n            //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e5f\u8981\u627e\u6839\u8282\u70b9\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a\u6839\u8282\u70b9\u5c31\u662findex\u4e3a0\u7684\u6570\uff0c\u5176\u5de6\u53f3\u7684\u6570\u5747\u4e3a0\n            //\u90a3\u4e48\u6839\u636e\u4e0a\u9762\u7684\u9012\u5f52\u51fa\u6765\u7684\u6761\u4ef6\uff0c\u5176\u5de6\u53f3\u5b50\u6811\u7684\u8282\u70b9\u6570\u5747\u4e3a0\uff0c\u90a3\u4e48\u8fd4\u56de\u5176\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9\u4e3anull\n\n            int root_value = pre[0];//\u6839\u8282\u70b9\u7684\u503c\u4e3apre\u7684\u7b2c\u4e00\u4e2a\u6570\n            int index = in_index(root_value, in);//\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684index\n\n            //\u5de6\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230left_pre\u548cleft_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52\n            int[] left_pre = new int[index];\n            int[] left_in = new int[index];\n            for(int i=0; i<left_pre.length; i++)\n            {\n                left_pre[i] = pre[i+1];\n                left_in[i] = in[i];\n            }\n            //\u53f3\u5b50\u6811\u4e2d\u5305\u542b\u7684\u6570\u590d\u5236\u5230right_pre\u548cright_in\u4e2d\uff0c\u51c6\u5907\u9012\u5f52\n            int[] right_pre = new int[in.length-1-index];\n            int[] right_in = new int[in.length-1-index];\n            for(int i=0; i<right_pre.length; i++)\n            {\n                right_pre[i] = pre[i+index+1];\n                right_in[i] = in[i+index+1];\n            }\n\n            TreeNode root = new TreeNode(root_value);\n            root.left = reConstructBinaryTree(left_pre,left_in);\n            root.right = reConstructBinaryTree(right_pre,right_in);\n            return root;\n        }\n    }\n\n    public int in_index(int target, int[] in)\n    {\n        int index = -1;\n        for(int i=0; i<in.length; i++)\n        {\n            if(in[i] == target)\n            {\n                index = i;\n            }\n        }\n        return index;\n    }\n}",
            "title": "4 \u91cd\u5efa\u4e8c\u53c9\u6811"
        },
        {
            "location": "/code_offer/java1-10/#5",
            "text": "\u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3aint\u7c7b\u578b\u3002  import java.util.Stack;\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n\n    public void push(int node) {\n        stack1.push(node);\n    }\n\n    public int pop() {\n        while(stack1.empty()==false)\n        {\n            stack2.push(stack1.pop());\n        }\n        int value = stack2.pop();\n        while(stack2.empty()==false)\n        {\n            stack1.push(stack2.pop());\n        }\n        return value;\n    }\n}",
            "title": "5 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"
        },
        {
            "location": "/code_offer/java1-10/#6",
            "text": "\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002  import java.util.ArrayList;\npublic class Solution {\n    public int minNumberInRotateArray(int [] array)\n    {\n        int n = 0;\n        if(array.length == 1)\n        {\n            n = array[0];\n        }else if(array.length > 1)\n        {\n            boolean flag = false;\n            for(int i=1; i<array.length-1; i++)\n            {\n                if(array[i]<array[i-1])\n                {\n                    flag = true;\n                    n = array[i];\n                }\n            }\n            if(flag == false)\n            {\n                n = array[0];\n            }\n        }\n        return n;\n    }\n}",
            "title": "6 \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"
        },
        {
            "location": "/code_offer/java1-10/#7",
            "text": "\u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\uff08\u4ece0\u5f00\u59cb\uff0c\u7b2c0\u9879\u4e3a0\uff09\u3002n<=39  public class Solution {\n    public int Fibonacci(int n)\n    {\n        int result = 0;\n        if(n==0)\n        {\n            result = 0;\n        }else if(n==1)\n        {\n            result = 1;\n        }else{\n            result = Fibonacci(n-2) + Fibonacci(n-1);\n        }\n        return result;\n    }\n}",
            "title": "7 \u6590\u6ce2\u90a3\u5951\u6570\u5217"
        },
        {
            "location": "/code_offer/java1-10/#8",
            "text": "\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\uff08\u5148\u540e\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u7ed3\u679c\uff09\u3002  public class Solution {\n    public int JumpFloor(int target)\n    {\n        int n_solution = 0;\n        if(target==1){\n            n_solution = 1;\n        }else if(target>1)\n        {\n            int max_double = target/2;\n            for(int n_2=0; n_2<=max_double; n_2++)\n            {\n                int n_1 = target - 2 * n_2;\n                n_solution = n_solution + get_catogory(n_1, n_2);\n            }\n        }\n        return n_solution;\n    }\n\n    public int get_catogory(int int_n_1, int int_n_2)\n    {\n        long n_1 = int_n_1;\n        long n_2 = int_n_2;\n        if(n_1==0 ||n_2==0)\n        {\n            return 1;\n        }\n        long n = n_1 + n_2;\n        if(n_1>n_2)\n        {\n            n_1 = n_2;\n        }\n        long up = n;\n        long down = 1l;\n        for(int i=1; i<n_1; i++)\n        {\n            up = up * (n-i);\n            down = down * (1+i);\n        }\n        long n_return = up/down;\n        return (int)n_return;\n    }\n}",
            "title": "8 \u8df3\u53f0\u9636"
        },
        {
            "location": "/code_offer/java1-10/#9",
            "text": "\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002  public class Solution {\n    public int JumpFloorII(int target)\n    {\n        int n_solution = 0;\n        if(target == 0)\n        {\n            return 0;\n        }else if(target == 1)\n        {\n            return 1;\n        }else{\n            int[] array = new int[target+1];\n            array[0] = 0;\n            array[1] = 1;\n\n            for(int i=2; i<target+1; i++)\n            {\n                array[i] = 0;\n                for(int j=0; j<i; j++)\n                {\n                    array[i] += array[j];\n                }\n                ++array[i];\n            }\n            n_solution = array[target];\n        }\n        return n_solution;\n    }\n}",
            "title": "9 \u53d8\u6001\u8df3\u53f0\u9636"
        },
        {
            "location": "/code_offer/java1-10/#10",
            "text": "\u6211\u4eec\u53ef\u4ee5\u75282*1\u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528n\u4e2a2*1\u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a2*n\u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f  public class Solution {\n    public int RectCover(int target)\n    {\n        int n_solution = 0;\n        if(target==1){\n            n_solution = 1;\n        }else if(target>1)\n        {\n            int max_double = target/2;\n            for(int n_2=0; n_2<=max_double; n_2++)\n            {\n                int n_1 = target - (2 * n_2);\n                n_solution = n_solution + get_catogory(n_1, n_2);\n            }\n        }\n        return n_solution;\n    }\n\n    public int get_catogory(int int_n_1, int int_n_2)\n    {\n        long n_1 = int_n_1;\n        long n_2 = int_n_2;\n        if(n_1==0 ||n_2==0)\n        {\n            return 1;\n        }\n        long n = n_1 + n_2;\n        if(n_1>n_2)\n        {\n            n_1 = n_2;\n        }\n        long up = n;\n        long down = 1l;\n        for(int i=1; i<n_1; i++)\n        {\n            up = up * (n-i);\n            down = down * (1+i);\n        }\n        long n_return = up/down;\n        return (int)n_return;\n    }\n}",
            "title": "10 \u77e9\u5f62\u8986\u76d6"
        },
        {
            "location": "/code_offer/java11-20/",
            "text": "11 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570\n\n\n\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002\n\n\nimport java.util.Stack;\npublic class Solution {\n    public int NumberOf1(int n) {\n        if(n == 0)\n        {\n            return 0;\n        }else if(n > 0)\n        {\n            int quotient = n;//\u5546\n            int remainder = -1;//\u4f59\u6570\n            int count = 0;\n\n            while(quotient != 0)\n            {\n                remainder = quotient % 2;\n                quotient = quotient / 2;\n\n                if(remainder == 1)\n                {\n                    ++count;\n                }\n            }\n            return count;\n        }else{\n            int quotient = -n;\n            int remainder = -1;\n            int count = 0;\n            int len = 0;\n            boolean flag = false;\n\n            while(quotient != 0 && len < 31)\n            {\n                ++len;\n                remainder = quotient % 2;\n                quotient = quotient / 2;\n\n                if(flag == false && remainder==1)\n                {\n                    flag = true;\n                    ++count;\n                }else if(flag == true && remainder==0)\n                {\n                    ++count;\n                }\n            }\n            return count+32-len;\n        }\n    }\n}\n\n\n\n\n12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9\n\n\n\u7ed9\u5b9a\u4e00\u4e2adouble\u7c7b\u578b\u7684\u6d6e\u70b9\u6570base\u548cint\u7c7b\u578b\u7684\u6574\u6570exponent\u3002\u6c42base\u7684exponent\u6b21\u65b9\u3002\n\n\npublic class Solution {\n    public double Power(double base, int exponent) {\n        double result = 1;\n        if(exponent==0)\n        {\n            result = 1;\n        }else if(exponent == 1)\n        {\n            result = base;\n        }else if(exponent > 0)\n        {\n            for(int i=0; i<exponent; i++)\n            {\n                result = result * base;\n            }\n        }else{\n            for(int i=0; i<-exponent; i++)\n            {\n                result = result * base;\n            }\n            result = 1 / result;\n        }\n        return result;\n    }\n}\n\n\n\n\n13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762\n\n\n\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002\n\n\nimport java.util.ArrayList;\npublic class Solution {\n    public void reOrderArray(int [] array)\n    {\n        ArrayList<Integer> odd = new ArrayList<>();\n        ArrayList<Integer> even = new ArrayList<>();\n        for(int i=0; i<array.length; i++)\n        {\n            if(array[i] % 2 == 1)\n            {\n                odd.add(array[i]);\n            }else{\n                even.add(array[i]);\n            }\n        }\n        int index = -1;\n        for(int i=0; i<odd.size(); i++)\n        {\n            ++index;\n            array[index] = odd.get(i);\n        }\n        for(int i=0; i<even.size(); i++)\n        {\n            ++index;\n            array[index] = even.get(i);\n        }\n    }\n}\n\n\n\n\n14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\n\n\n\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002\n\n\nimport java.util.Stack;\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k)\n    {\n        Stack<ListNode> stack = new Stack<>();\n        int size = 0;\n        if(head == null)\n        {\n            return null;\n        }\n\n        if(k == 0)\n        {\n            return null;\n        }else{\n            while(head.next != null)//\u6700\u540e\u4e00\u4e2anext\u4e3a\u7a7a\u7684\u8282\u70b9\u6ca1\u6709push\u8fdb\u53bb\n            {\n                stack.push(head);\n                ++size;\n                head = head.next;\n            }\n            if(k == 1)\n            {\n                return head;\n            }else if(k > (size+1))\n            {\n                return null;\n            }else{\n                for(int i=0; i<k-2; i++)//\u5982\u679c\u8981\u5012\u6570\u7b2c\u4e8c\u4e2a\uff0c\u5c31\u53ea\u7528pop1\u6b21\n                {\n                    stack.pop();\n                }\n                return stack.pop();\n            }\n        }\n    }\n}\n\n\n\n\n15 \u53cd\u8f6c\u94fe\u8868\n\n\n\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002\n\n\nimport java.util.Stack;\npublic class Solution {\n    public ListNode ReverseList(ListNode head)\n    {\n        if(head == null)\n        {\n            return null;\n        }else if(head.next == null)\n        {\n            return head;\n        }else{\n            Stack<ListNode> stack = new Stack<>();\n            ListNode new_head = null;\n            while(head.next != null)\n            {\n                stack.push(head);\n                head = head.next;\n            }\n            new_head = head;//head\u73b0\u5728\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u8d4b\u503c\u7ed9new_head\n            while(stack.empty() == false){\n                head.next = stack.pop();\n                head = head.next;\n            }\n            head.next = null;//\u5c06pop\u51fa\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684next\u8d4b\u503c\u4e3anull\n            return new_head;\n        }\n    }\n}\n\n\n\n\n16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868\n\n\n\u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002\n\n\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2)\n    {\n        if(list1 == null)\n        {\n            return list2;\n        }else if(list2 == null)\n        {\n            return list1;\n        }else{\n            ListNode new_head = null;\n            if(list1.val<=list2.val)\n            {\n                new_head = list1;\n            }else{\n                new_head = list2;//\u4ee5list1\u4e3a\u57fa\u51c6\uff0c\u5982\u679clist1\u7684\u7b2c\u4e00\u4e2a\u6570\u5927\u4e8elist2\u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u5219\u4ea4\u6362list1\u548clist2\n                list2 = list1;\n                list1 = new_head;\n            }\n            while(list1.next != null)\n            {\n                if(list1.next.val >= list2.val)\n                {\n                    if(list2.next == null)\n                    {\n                        list2.next = list1.next;\n                        list1.next = list2;\n                        break;\n                    }else{\n                        ListNode temp2 = list2.next;\n                        list2.next = list1.next;\n                        list1.next = list2;\n                        list1 = list1.next;\n                        list2 = temp2;\n                    }\n                }else {\n                    list1 = list1.next;\n                }\n            }\n            list1.next = list2;\n            return new_head;\n        }\n    }\n}\n\n\n\n\n17 \u6811\u7684\u5b50\u7ed3\u6784\n\n\n\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09\n\n\nimport java.util.LinkedList;\nimport java.util.Queue;\npublic class Solution {\n    public boolean HasSubtree(TreeNode root1,TreeNode root2)\n    {\n        if(root2 == null)\n        {\n            return false;\n        }else{\n            int target = root2.val;\n            boolean flag = false;\n\n            Queue<TreeNode> q = new LinkedList<>();\n            q.offer(root1);\n            while((root1 = q.poll()) != null)\n            {\n                if(root1.left != null){q.offer(root1.left);}\n                if(root1.right != null){q.offer(root1.right);}\n                if(root1.val == target)\n                {\n                    if(isSub(root1,root2) == true)\n                    {\n                        flag = true;\n                        break;\n                    }\n                }\n            }\n            return flag;\n        }\n    }\n    public boolean isSub(TreeNode root1,TreeNode root2)//\u5224\u65ad\u6811b\u662f\u5426\u662f\u6811a\u7684\u5b50\u7ed3\u6784\n    {\n        if(root1==null){\n            return false;\n        }\n        TreeNode root2_left = root2.left;\n        TreeNode root2_right = root2.right;\n        TreeNode root1_left = root1.left;\n        TreeNode root1_right = root1.right;\n        if(root2_left == null && root2_right == null)\n        {\n            return root1.val == root2.val;\n        }else if(root2_left != null && root2_right == null)\n        {\n            return isSub(root1_left,root2_left);\n        }else if(root2_left == null && root2_right != null)\n        {\n            return isSub(root1_right,root2_right);\n        }else{\n            return isSub(root1_left,root2_left) && isSub(root1_right,root2_right);\n        }\n    }\n}\n\n\n\n\n18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf\n\n\n\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002\n\n\n\u8f93\u5165\u63cf\u8ff0:\n\n\n\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u5b9a\u4e49\uff1a\u6e90\u4e8c\u53c9\u6811\n\n\n            8\n           /  \\\n          6   10\n         / \\  / \\\n        5  7 9 11\n        \u955c\u50cf\u4e8c\u53c9\u6811\n            8\n           /  \\\n          10   6\n         / \\  / \\\n        11 9 7  5\n\n\n\n\nimport java.util.LinkedList;\nimport java.util.Queue;\npublic class Solution {\n    public void Mirror(TreeNode root)\n    {\n        TreeNode p = root;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(p);\n        while((p = queue.poll()) != null)\n        {\n            if(p.left != null){queue.offer(p.left);}\n            if(p.right != null){queue.offer(p.right);}\n            TreeNode temp = p.left;\n            p.left = p.right;\n            p.right = temp;\n        }\n    }\n}\n\n\n\n\n19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635\n\n\n\u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4 X 4\u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\n\n\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printMatrix(int [][] matrix)\n    {\n        ArrayList<Integer> out = new ArrayList<>();\n\n        int len = matrix.length;\n        if(len == 0){return out;}\n        int dim = matrix[0].length;\n        if(dim == 0){return out;}\n\n        int min = -1;\n        if(len<=dim){min = len;}\n        else{min = dim;}\n\n        int round = (min+1)/2;\n        for(int i=0; i<round; i++)\n        {\n            int len_bound = len - i*2;\n            int dim_bound = dim - i*2;\n            int j = 0;\n            int k = 0;\n            if(len_bound==1)\n            {\n                for(; k<dim_bound; k++)\n                {\n                    out.add(matrix[i][k+i]);\n                }\n            }else if(dim_bound==1)\n            {\n                for(; j<len_bound; j++)\n                {\n                    out.add(matrix[j+i][i]);\n                }\n            }else{\n                for(; k<dim_bound-1; k++)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n                for(; j<len_bound-1; j++)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n                for(; k>0; k--)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n                for(; j>0; j--)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n            }\n\n        }\n        return out;\n    }\n}\n\n\n\n\n20 \u5305\u542bmin\u51fd\u6570\u7684\u6808\n\n\n\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684min\u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO\uff081\uff09\uff09\u3002\n\n\nimport java.util.Stack;\nimport java.util.ArrayList;\npublic class Solution {\n\n    ArrayList<Integer> arr = new ArrayList<>();\n    int min_index = 0;\n    public void push(int node) {\n        arr.add(node);\n        if(node < arr.get(min_index))\n        {\n            min_index = arr.size()-1;\n        }\n    }\n\n    public void pop() {\n        if(min_index == arr.size()-1)\n        {\n            arr.remove(arr.size()-1);\n            min_index = 0;\n            for(int i=1; i<arr.size(); i++)\n            {\n                if(arr.get(i) < arr.get(min_index))\n                {\n                    min_index = i;\n                }\n            }\n        }else{\n            arr.remove(arr.size()-1);\n        }\n\n    }\n\n    public int top() {\n        return arr.get(arr.size()-1);\n    }\n\n    public int min() {\n        return arr.get(min_index);\n    }\n}",
            "title": "Java 11-20"
        },
        {
            "location": "/code_offer/java11-20/#11-1",
            "text": "\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002  import java.util.Stack;\npublic class Solution {\n    public int NumberOf1(int n) {\n        if(n == 0)\n        {\n            return 0;\n        }else if(n > 0)\n        {\n            int quotient = n;//\u5546\n            int remainder = -1;//\u4f59\u6570\n            int count = 0;\n\n            while(quotient != 0)\n            {\n                remainder = quotient % 2;\n                quotient = quotient / 2;\n\n                if(remainder == 1)\n                {\n                    ++count;\n                }\n            }\n            return count;\n        }else{\n            int quotient = -n;\n            int remainder = -1;\n            int count = 0;\n            int len = 0;\n            boolean flag = false;\n\n            while(quotient != 0 && len < 31)\n            {\n                ++len;\n                remainder = quotient % 2;\n                quotient = quotient / 2;\n\n                if(flag == false && remainder==1)\n                {\n                    flag = true;\n                    ++count;\n                }else if(flag == true && remainder==0)\n                {\n                    ++count;\n                }\n            }\n            return count+32-len;\n        }\n    }\n}",
            "title": "11 \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"
        },
        {
            "location": "/code_offer/java11-20/#12",
            "text": "\u7ed9\u5b9a\u4e00\u4e2adouble\u7c7b\u578b\u7684\u6d6e\u70b9\u6570base\u548cint\u7c7b\u578b\u7684\u6574\u6570exponent\u3002\u6c42base\u7684exponent\u6b21\u65b9\u3002  public class Solution {\n    public double Power(double base, int exponent) {\n        double result = 1;\n        if(exponent==0)\n        {\n            result = 1;\n        }else if(exponent == 1)\n        {\n            result = base;\n        }else if(exponent > 0)\n        {\n            for(int i=0; i<exponent; i++)\n            {\n                result = result * base;\n            }\n        }else{\n            for(int i=0; i<-exponent; i++)\n            {\n                result = result * base;\n            }\n            result = 1 / result;\n        }\n        return result;\n    }\n}",
            "title": "12 \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"
        },
        {
            "location": "/code_offer/java11-20/#13",
            "text": "\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u7684\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u7684\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\uff0c\u5e76\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\u3002  import java.util.ArrayList;\npublic class Solution {\n    public void reOrderArray(int [] array)\n    {\n        ArrayList<Integer> odd = new ArrayList<>();\n        ArrayList<Integer> even = new ArrayList<>();\n        for(int i=0; i<array.length; i++)\n        {\n            if(array[i] % 2 == 1)\n            {\n                odd.add(array[i]);\n            }else{\n                even.add(array[i]);\n            }\n        }\n        int index = -1;\n        for(int i=0; i<odd.size(); i++)\n        {\n            ++index;\n            array[index] = odd.get(i);\n        }\n        for(int i=0; i<even.size(); i++)\n        {\n            ++index;\n            array[index] = even.get(i);\n        }\n    }\n}",
            "title": "13 \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"
        },
        {
            "location": "/code_offer/java11-20/#14-k",
            "text": "\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002  import java.util.Stack;\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k)\n    {\n        Stack<ListNode> stack = new Stack<>();\n        int size = 0;\n        if(head == null)\n        {\n            return null;\n        }\n\n        if(k == 0)\n        {\n            return null;\n        }else{\n            while(head.next != null)//\u6700\u540e\u4e00\u4e2anext\u4e3a\u7a7a\u7684\u8282\u70b9\u6ca1\u6709push\u8fdb\u53bb\n            {\n                stack.push(head);\n                ++size;\n                head = head.next;\n            }\n            if(k == 1)\n            {\n                return head;\n            }else if(k > (size+1))\n            {\n                return null;\n            }else{\n                for(int i=0; i<k-2; i++)//\u5982\u679c\u8981\u5012\u6570\u7b2c\u4e8c\u4e2a\uff0c\u5c31\u53ea\u7528pop1\u6b21\n                {\n                    stack.pop();\n                }\n                return stack.pop();\n            }\n        }\n    }\n}",
            "title": "14 \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9"
        },
        {
            "location": "/code_offer/java11-20/#15",
            "text": "\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u53cd\u8f6c\u94fe\u8868\u540e\uff0c\u8f93\u51fa\u65b0\u94fe\u8868\u7684\u8868\u5934\u3002  import java.util.Stack;\npublic class Solution {\n    public ListNode ReverseList(ListNode head)\n    {\n        if(head == null)\n        {\n            return null;\n        }else if(head.next == null)\n        {\n            return head;\n        }else{\n            Stack<ListNode> stack = new Stack<>();\n            ListNode new_head = null;\n            while(head.next != null)\n            {\n                stack.push(head);\n                head = head.next;\n            }\n            new_head = head;//head\u73b0\u5728\u6307\u5411\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5c06\u5b83\u8d4b\u503c\u7ed9new_head\n            while(stack.empty() == false){\n                head.next = stack.pop();\n                head = head.next;\n            }\n            head.next = null;//\u5c06pop\u51fa\u6765\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684next\u8d4b\u503c\u4e3anull\n            return new_head;\n        }\n    }\n}",
            "title": "15 \u53cd\u8f6c\u94fe\u8868"
        },
        {
            "location": "/code_offer/java11-20/#16",
            "text": "\u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002  public class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2)\n    {\n        if(list1 == null)\n        {\n            return list2;\n        }else if(list2 == null)\n        {\n            return list1;\n        }else{\n            ListNode new_head = null;\n            if(list1.val<=list2.val)\n            {\n                new_head = list1;\n            }else{\n                new_head = list2;//\u4ee5list1\u4e3a\u57fa\u51c6\uff0c\u5982\u679clist1\u7684\u7b2c\u4e00\u4e2a\u6570\u5927\u4e8elist2\u7684\u7b2c\u4e00\u4e2a\u6570\uff0c\u5219\u4ea4\u6362list1\u548clist2\n                list2 = list1;\n                list1 = new_head;\n            }\n            while(list1.next != null)\n            {\n                if(list1.next.val >= list2.val)\n                {\n                    if(list2.next == null)\n                    {\n                        list2.next = list1.next;\n                        list1.next = list2;\n                        break;\n                    }else{\n                        ListNode temp2 = list2.next;\n                        list2.next = list1.next;\n                        list1.next = list2;\n                        list1 = list1.next;\n                        list2 = temp2;\n                    }\n                }else {\n                    list1 = list1.next;\n                }\n            }\n            list1.next = list2;\n            return new_head;\n        }\n    }\n}",
            "title": "16 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"
        },
        {
            "location": "/code_offer/java11-20/#17",
            "text": "\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09  import java.util.LinkedList;\nimport java.util.Queue;\npublic class Solution {\n    public boolean HasSubtree(TreeNode root1,TreeNode root2)\n    {\n        if(root2 == null)\n        {\n            return false;\n        }else{\n            int target = root2.val;\n            boolean flag = false;\n\n            Queue<TreeNode> q = new LinkedList<>();\n            q.offer(root1);\n            while((root1 = q.poll()) != null)\n            {\n                if(root1.left != null){q.offer(root1.left);}\n                if(root1.right != null){q.offer(root1.right);}\n                if(root1.val == target)\n                {\n                    if(isSub(root1,root2) == true)\n                    {\n                        flag = true;\n                        break;\n                    }\n                }\n            }\n            return flag;\n        }\n    }\n    public boolean isSub(TreeNode root1,TreeNode root2)//\u5224\u65ad\u6811b\u662f\u5426\u662f\u6811a\u7684\u5b50\u7ed3\u6784\n    {\n        if(root1==null){\n            return false;\n        }\n        TreeNode root2_left = root2.left;\n        TreeNode root2_right = root2.right;\n        TreeNode root1_left = root1.left;\n        TreeNode root1_right = root1.right;\n        if(root2_left == null && root2_right == null)\n        {\n            return root1.val == root2.val;\n        }else if(root2_left != null && root2_right == null)\n        {\n            return isSub(root1_left,root2_left);\n        }else if(root2_left == null && root2_right != null)\n        {\n            return isSub(root1_right,root2_right);\n        }else{\n            return isSub(root1_left,root2_left) && isSub(root1_right,root2_right);\n        }\n    }\n}",
            "title": "17 \u6811\u7684\u5b50\u7ed3\u6784"
        },
        {
            "location": "/code_offer/java11-20/#18",
            "text": "\u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002  \u8f93\u5165\u63cf\u8ff0:  \u4e8c\u53c9\u6811\u7684\u955c\u50cf\u5b9a\u4e49\uff1a\u6e90\u4e8c\u53c9\u6811              8\n           /  \\\n          6   10\n         / \\  / \\\n        5  7 9 11\n        \u955c\u50cf\u4e8c\u53c9\u6811\n            8\n           /  \\\n          10   6\n         / \\  / \\\n        11 9 7  5  import java.util.LinkedList;\nimport java.util.Queue;\npublic class Solution {\n    public void Mirror(TreeNode root)\n    {\n        TreeNode p = root;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(p);\n        while((p = queue.poll()) != null)\n        {\n            if(p.left != null){queue.offer(p.left);}\n            if(p.right != null){queue.offer(p.right);}\n            TreeNode temp = p.left;\n            p.left = p.right;\n            p.right = temp;\n        }\n    }\n}",
            "title": "18 \u4e8c\u53c9\u6811\u7684\u955c\u50cf"
        },
        {
            "location": "/code_offer/java11-20/#19",
            "text": "\u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4 X 4\u77e9\u9635\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.  import java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printMatrix(int [][] matrix)\n    {\n        ArrayList<Integer> out = new ArrayList<>();\n\n        int len = matrix.length;\n        if(len == 0){return out;}\n        int dim = matrix[0].length;\n        if(dim == 0){return out;}\n\n        int min = -1;\n        if(len<=dim){min = len;}\n        else{min = dim;}\n\n        int round = (min+1)/2;\n        for(int i=0; i<round; i++)\n        {\n            int len_bound = len - i*2;\n            int dim_bound = dim - i*2;\n            int j = 0;\n            int k = 0;\n            if(len_bound==1)\n            {\n                for(; k<dim_bound; k++)\n                {\n                    out.add(matrix[i][k+i]);\n                }\n            }else if(dim_bound==1)\n            {\n                for(; j<len_bound; j++)\n                {\n                    out.add(matrix[j+i][i]);\n                }\n            }else{\n                for(; k<dim_bound-1; k++)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n                for(; j<len_bound-1; j++)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n                for(; k>0; k--)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n                for(; j>0; j--)\n                {\n                    out.add(matrix[j+i][k+i]);\n                }\n            }\n\n        }\n        return out;\n    }\n}",
            "title": "19 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"
        },
        {
            "location": "/code_offer/java11-20/#20-min",
            "text": "\u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u4e2d\u6240\u542b\u6700\u5c0f\u5143\u7d20\u7684min\u51fd\u6570\uff08\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO\uff081\uff09\uff09\u3002  import java.util.Stack;\nimport java.util.ArrayList;\npublic class Solution {\n\n    ArrayList<Integer> arr = new ArrayList<>();\n    int min_index = 0;\n    public void push(int node) {\n        arr.add(node);\n        if(node < arr.get(min_index))\n        {\n            min_index = arr.size()-1;\n        }\n    }\n\n    public void pop() {\n        if(min_index == arr.size()-1)\n        {\n            arr.remove(arr.size()-1);\n            min_index = 0;\n            for(int i=1; i<arr.size(); i++)\n            {\n                if(arr.get(i) < arr.get(min_index))\n                {\n                    min_index = i;\n                }\n            }\n        }else{\n            arr.remove(arr.size()-1);\n        }\n\n    }\n\n    public int top() {\n        return arr.get(arr.size()-1);\n    }\n\n    public int min() {\n        return arr.get(min_index);\n    }\n}",
            "title": "20 \u5305\u542bmin\u51fd\u6570\u7684\u6808"
        },
        {
            "location": "/code_offer/java21-30/",
            "text": "21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217\n\n\n\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171,2,3,4,5\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u52174,5,3,2,1\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464,3,5,1,2\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09\n\n\nimport java.util.ArrayList;\n\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        int[] seq = new int[pushA.length];\n        for(int i=0; i<popA.length; i++)\n        {\n            boolean find_flag = false;\n            for (int j = 0; j < pushA.length; j++) {\n                if (popA[i] == pushA[j]) {\n                    seq[i] = j;\n                    find_flag = true;\n                    break;\n                }\n            }\n            if(find_flag == false)\n            {\n                return false;\n            }\n        }\n\n        for(int i=0; i<seq.length-1; i++)\n        {\n            ArrayList<Integer> temp = new ArrayList<>();\n            for(int j=0; j<seq[i]; j++)\n            {\n                temp.add(j);\n            }\n\n            if(i==0)\n            {\n                if(seq[i+1] < temp.get(temp.size()-1)){return false;}\n                else{continue;}\n            }else{\n                for(int j=0; j<i; j++)\n                {\n                    temp.remove((Integer)seq[j]);\n                }\n                if(seq[i+1]<temp.get(temp.size()-1)){return false;}\n                else{continue;}\n            }\n        }\n        return true;\n    }\n}\n\n\n\n\n22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811\n\n\n\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class Solution {\n    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root)\n    {\n        ArrayList<Integer> arr = new ArrayList();\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while((root = q.poll()) != null)\n        {\n            arr.add(root.val);\n            if(root.left != null){q.offer(root.left);}\n            if(root.right != null){q.offer(root.right);}\n\n        }\n        return arr;\n    }\n}\n\n\n\n\n23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\n\n\n\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002\n\n\npublic class Solution {\n    public boolean VerifySquenceOfBST(int [] sequence)\n    {\n        if(sequence.length == 0)\n        {\n            return false;\n        }else{\n            return check(sequence);\n        }\n    }\n\n    public boolean check(int [] sequence)\n    {\n        if(sequence.length == 0)\n        {\n            return true;\n        }else{\n            int mid = sequence[sequence.length-1];\n            int front_length = 0;\n\n            for(int i=0; i<sequence.length-1; i++)\n            {\n                if(sequence[i] > mid)\n                {\n                    break;\n                }else{\n                    ++front_length;\n                }\n            }\n            int[] front_half = new int[front_length];\n            int[] back_half = new int[sequence.length-1-front_length];\n            for(int i=0; i<front_length; i++)\n            {\n                front_half[i] = sequence[i];\n            }\n            for(int i=0; i<back_half.length; i++)\n            {\n                if(sequence[i+front_length] < mid){return false;}\n                else{\n                    back_half[i] = sequence[i+front_length];\n                }\n            }\n            return check(front_half) && check(back_half);\n        }\n    }\n\n}\n\n\n\n\n24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84\n\n\n\u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u8ddf\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d)\n\n\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {\n        ArrayList<ArrayList<Integer>> final_list = new ArrayList<>();\n        if(root == null){\n            return final_list;\n        }else{\n            ArrayList<Integer> list = new ArrayList<>();\n            search(final_list,root,list,0,target);\n            return final_list;\n        }\n    }\n\n    public void search(ArrayList<ArrayList<Integer>> final_list, TreeNode root,\n                                     ArrayList<Integer> current_list, int current_sum, int target)\n    {\n\n        if(root.left == null && root.right == null) {\n            if((current_sum+root.val) == target)\n            {\n                current_list.add(root.val);\n                current_sum += root.val;\n                final_list.add(current_list);\n            }\n        }else\n        {\n            current_list.add(root.val);\n            current_sum += root.val;\n\n            if(root.left!=null && root.right==null)\n            {search(final_list,root.left,current_list,current_sum,target);}\n            else if(root.left==null && root.right!=null)\n            {search(final_list,root.right,current_list,current_sum,target);}\n            else{\n                ArrayList<Integer> copy_current_list = copy(current_list);\n                search(final_list,root.left,current_list,current_sum,target);\n                search(final_list,root.right,copy_current_list,current_sum,target);\n            }\n        }\n    }\n\n    public ArrayList<Integer> copy(ArrayList<Integer> arr)\n    {\n        ArrayList<Integer> new_arr = new ArrayList<>();\n        for(Integer i: arr){\n            new_arr.add(i);\n        }\n        return new_arr;\n    }\n}\n\n\n\n\n25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236\n\n\n\u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09\n\n\npublic class Solution {\n    public RandomListNode Clone(RandomListNode pHead)\n    {\n        if(pHead == null){\n            return null;\n        }else{\n            RandomListNode p = pHead;\n\n            do{\n                RandomListNode node = new RandomListNode(p.label);\n                node.next = p.next;\n                p.next = node;\n                p = p.next.next;\n            }while(p != null);\n\n            p = pHead;\n            do{\n                if(p.random != null)\n                {\n                    p.next.random = p.random.next;\n                }else{\n                    p.next.random = null;\n                }\n                p = p.next.next;\n            }while(p != null);\n\n            p = pHead;\n            RandomListNode q = pHead.next;\n            RandomListNode remain_head = q;\n\n            while (q.next != null)\n            {\n                p.next = q.next;\n                q.next = q.next.next;\n\n                p = p.next;\n                q = q.next;\n            }\n            p.next = null;\n\n            return remain_head;\n        }\n    }\n}\n\n\n\n\n26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868\n\n\n\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002\n\n\nimport java.util.Stack;\npublic class Solution {\n    public TreeNode Convert(TreeNode pRootOfTree)\n    {\n        if(pRootOfTree == null){\n            return null;\n        }else{\n            TreeNode p = pRootOfTree;\n            TreeNode pre = pRootOfTree;\n            Stack<TreeNode> stack = new Stack<>();\n            while(p.left!=null){\n                stack.push(p);\n                p = p.left;\n            }\n            pRootOfTree = p;//head node\n            pre = null;\n            while(p != null || !stack.empty()){\n                while(p!=null){\n                    stack.push(p);\n                    p = p.left;\n                }\n                p = stack.pop();\n\n                p.left = pre;\n                if(pre != null){\n                    pre.right = p;\n                }\n\n                pre = p;\n                p = p.right;\n\n            }\n        }\n        return pRootOfTree;\n    }\n}\n\n\n\n\n27 \u5b57\u7b26\u4e32\u7684\u6392\u5217\n\n\n\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002\n\n\nimport java.util.ArrayList;\nimport java.util.Collections;\npublic class Solution {\n    public ArrayList<String> Permutation(String str) {\n        ArrayList<String> final_list = new ArrayList<>();\n        if(str.equals(\"\")){return final_list;}\n\n        char[] arr = str.toCharArray();\n\n        ArrayList<Character> char_list = new ArrayList<>();\n        for(int i=0; i<arr.length; i++){\n            char_list.add(arr[i]);\n        }\n        Collections.sort(char_list);\n\n        char[] init_char_arr = new char[char_list.size()];\n        for(int i=0; i<char_list.size(); i++){\n            init_char_arr[i] = char_list.get(i);\n        }\n        final_list.add(make_string(init_char_arr));\n        add_string(final_list, init_char_arr, 0);\n        Collections.sort(final_list);\n\n        return final_list;\n    }\n\n    public void add_string(ArrayList<String> final_list, char[] char_arr, int index){\n        if(index < char_arr.length-1){\n            add_string(final_list,char_arr,index+1);\n\n            for(int i=index+1; i<char_arr.length; i++){\n                if(char_arr[index] != char_arr[i]){\n                    char[] new_char_arr = copy_char_arr(char_arr);\n                    char temp = new_char_arr[index];\n                    new_char_arr[index] = new_char_arr[i];\n                    new_char_arr[i] = temp;\n                    final_list.add(make_string(new_char_arr));\n                    add_string(final_list, new_char_arr, index+1);\n                }\n            }\n        }\n    }\n\n    public char[] copy_char_arr(char[] arr){\n        char[] new_arr = new char[arr.length];\n        for(int i=0; i<arr.length; i++){\n            new_arr[i] = arr[i];\n        }\n        return new_arr;\n    }\n\n    public String make_string(char[] char_arr){\n        String s = \"\";\n        for(int i=0; i<char_arr.length; i++){\n            s += char_arr[i];\n        }\n        return s;\n    }\n}\n\n\n\n\n28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57\n\n\n\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a9\u7684\u6570\u7ec4{1,2,3,2,2,2,5,4,2}\u3002\u7531\u4e8e\u6570\u5b572\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e865\u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa2\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa0\u3002\n\n\nimport java.util.HashMap;\npublic class Solution {\n    public int MoreThanHalfNum_Solution(int [] array) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i=0; i<array.length; i++){\n            if(map.get(array[i])!=null){\n                map.put(array[i], map.get(array[i])+1);\n            }else{\n                map.put(array[i], 1);\n            }\n        }\n        for(Integer k: map.keySet()){\n            if(map.get(k) > array.length/2){\n                return k;\n            }\n        }\n        return 0;\n    }\n}\n\n\n\n\n29 \u6700\u5c0f\u7684k\u4e2a\u6570\n\n\n\u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684K\u4e2a\u6570\u3002\u4f8b\u5982\u8f93\u51654,5,1,6,2,7,3,8\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1,2,3,4,\u3002\n\n\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {\n        ArrayList<Integer> list = new ArrayList<>();\n        if(input.length == 0){\n            return list;\n        }\n        heapSort(list, input, input.length, k);\n        return list;\n    }\n\n    public void heapSort(ArrayList<Integer> list, int[] input, int len, int k){\n        if(len > input.length-k && k <= input.length){\n            int temp;\n            int index = len/2-1;\n            for(int i=index; i>-1; i--){\n                int remain_i = i;\n                boolean exchange_flag = false;\n                int min_index = -1;\n                if(i*2+2 < len){\n                    min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2;\n                }else{\n                    min_index = i*2+1;\n                }\n\n                if(input[i] > input[min_index]){\n                    exchange_flag = true;\n                    temp = input[i];//exchange\n                    input[i] = input[min_index];\n                    input[min_index] = temp;\n                }\n                while(exchange_flag == true){\n                    i = min_index;\n                    if(i*2+2 < len){\n                        min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2;\n                        if(input[i] > input[min_index]){\n                            temp = input[i];//exchange\n                            input[i] = input[min_index];\n                            input[min_index] = temp;\n                        }else{\n                            exchange_flag = false;\n                        }\n                    }else if(i*2+1 < len){\n                        min_index = i*2+1;\n                        if(input[i] > input[min_index]){\n                            temp = input[i];//exchange\n                            input[i] = input[min_index];\n                            input[min_index] = temp;\n                        }else{\n                            exchange_flag = false;\n                        }\n                    }else{\n                        exchange_flag = false;\n                    }\n                }\n                i = remain_i;\n            }\n            int min = input[0];\n            input[0] = input[len-1];\n            input[len-1] = min;\n            list.add(min);\n            heapSort(list,input,len-1,k);\n        }\n    }\n}\n\n\n\n\n30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\n\n\nHZ\u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002\u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e,\u4ed6\u53c8\u53d1\u8bdd\u4e86:\u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d,\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c,\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019,\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002\u4f46\u662f,\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570,\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570,\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f\u4f8b\u5982:{6,-3,-2,7,-15,1,2,2},\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a8(\u4ece\u7b2c0\u4e2a\u5f00\u59cb,\u5230\u7b2c3\u4e2a\u4e3a\u6b62)\u3002\u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f(\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f1)\n\n\npublic class Solution {\n    public int FindGreatestSumOfSubArray(int[] array)\n    {\n        int max = 0;\n        for(int i=0; i<array.length; i++){\n            if(array[i]<0){\n                continue;\n            }\n            int sum = array[i];\n            int neg = 0;\n            for(int j=i-1; j>-1; j--){\n                System.out.println(\"j = \"+j);\n                if(array[j]>=0){\n                    sum += array[j];\n                }else{\n                    neg = array[j];\n                    int comple = 0;\n                    for(int k=j-1; k>-1; k--){\n                        if(neg+array[k]<comple){\n                            neg = neg+array[k];\n                        }else{\n                            comple = neg+array[k];\n                            neg = neg+array[k];\n                        }\n                    }\n                    sum = sum + comple;\n                    break;\n                }\n            }\n\n            neg = 0;\n            for(int j=i+1; j<array.length; j++){\n                System.out.println(\"j = \"+j);\n                if(array[j]>=0){\n                    sum += array[j];\n                }else{\n                    neg = array[j];\n                    int comple = 0;\n                    for(int k=j+1; k<array.length; k++){\n                        if(neg+array[k]<comple){\n                            neg = neg+array[k];\n                        }else{\n                            comple = neg+array[k];\n                            neg = neg+array[k];\n                        }\n                    }\n                    sum = sum + comple;\n                    break;\n                }\n            }\n\n            if(sum > max){\n                max = sum;\n            }\n        }\n        if(max == 0){\n            max = array[0];\n            for(int i=1; i<array.length; i++){\n                if(array[i]>max){\n                    max = array[i];\n                }\n            }\n        }\n\n        return max;\n    }\n}",
            "title": "Java 21-30"
        },
        {
            "location": "/code_offer/java21-30/#21",
            "text": "\u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u53ef\u80fd\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171,2,3,4,5\u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u52174,5,3,2,1\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464,3,5,1,2\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002\uff08\u6ce8\u610f\uff1a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u957f\u5ea6\u662f\u76f8\u7b49\u7684\uff09  import java.util.ArrayList;\n\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        int[] seq = new int[pushA.length];\n        for(int i=0; i<popA.length; i++)\n        {\n            boolean find_flag = false;\n            for (int j = 0; j < pushA.length; j++) {\n                if (popA[i] == pushA[j]) {\n                    seq[i] = j;\n                    find_flag = true;\n                    break;\n                }\n            }\n            if(find_flag == false)\n            {\n                return false;\n            }\n        }\n\n        for(int i=0; i<seq.length-1; i++)\n        {\n            ArrayList<Integer> temp = new ArrayList<>();\n            for(int j=0; j<seq[i]; j++)\n            {\n                temp.add(j);\n            }\n\n            if(i==0)\n            {\n                if(seq[i+1] < temp.get(temp.size()-1)){return false;}\n                else{continue;}\n            }else{\n                for(int j=0; j<i; j++)\n                {\n                    temp.remove((Integer)seq[j]);\n                }\n                if(seq[i+1]<temp.get(temp.size()-1)){return false;}\n                else{continue;}\n            }\n        }\n        return true;\n    }\n}",
            "title": "21 \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"
        },
        {
            "location": "/code_offer/java21-30/#22",
            "text": "\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002  import java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n\npublic class Solution {\n    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root)\n    {\n        ArrayList<Integer> arr = new ArrayList();\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while((root = q.poll()) != null)\n        {\n            arr.add(root.val);\n            if(root.left != null){q.offer(root.left);}\n            if(root.right != null){q.offer(root.right);}\n\n        }\n        return arr;\n    }\n}",
            "title": "22 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"
        },
        {
            "location": "/code_offer/java21-30/#23",
            "text": "\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002  public class Solution {\n    public boolean VerifySquenceOfBST(int [] sequence)\n    {\n        if(sequence.length == 0)\n        {\n            return false;\n        }else{\n            return check(sequence);\n        }\n    }\n\n    public boolean check(int [] sequence)\n    {\n        if(sequence.length == 0)\n        {\n            return true;\n        }else{\n            int mid = sequence[sequence.length-1];\n            int front_length = 0;\n\n            for(int i=0; i<sequence.length-1; i++)\n            {\n                if(sequence[i] > mid)\n                {\n                    break;\n                }else{\n                    ++front_length;\n                }\n            }\n            int[] front_half = new int[front_length];\n            int[] back_half = new int[sequence.length-1-front_length];\n            for(int i=0; i<front_length; i++)\n            {\n                front_half[i] = sequence[i];\n            }\n            for(int i=0; i<back_half.length; i++)\n            {\n                if(sequence[i+front_length] < mid){return false;}\n                else{\n                    back_half[i] = sequence[i+front_length];\n                }\n            }\n            return check(front_half) && check(back_half);\n        }\n    }\n\n}",
            "title": "23 \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"
        },
        {
            "location": "/code_offer/java21-30/#24",
            "text": "\u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u8ddf\u8282\u70b9\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002(\u6ce8\u610f: \u5728\u8fd4\u56de\u503c\u7684list\u4e2d\uff0c\u6570\u7ec4\u957f\u5ea6\u5927\u7684\u6570\u7ec4\u9760\u524d)  import java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {\n        ArrayList<ArrayList<Integer>> final_list = new ArrayList<>();\n        if(root == null){\n            return final_list;\n        }else{\n            ArrayList<Integer> list = new ArrayList<>();\n            search(final_list,root,list,0,target);\n            return final_list;\n        }\n    }\n\n    public void search(ArrayList<ArrayList<Integer>> final_list, TreeNode root,\n                                     ArrayList<Integer> current_list, int current_sum, int target)\n    {\n\n        if(root.left == null && root.right == null) {\n            if((current_sum+root.val) == target)\n            {\n                current_list.add(root.val);\n                current_sum += root.val;\n                final_list.add(current_list);\n            }\n        }else\n        {\n            current_list.add(root.val);\n            current_sum += root.val;\n\n            if(root.left!=null && root.right==null)\n            {search(final_list,root.left,current_list,current_sum,target);}\n            else if(root.left==null && root.right!=null)\n            {search(final_list,root.right,current_list,current_sum,target);}\n            else{\n                ArrayList<Integer> copy_current_list = copy(current_list);\n                search(final_list,root.left,current_list,current_sum,target);\n                search(final_list,root.right,copy_current_list,current_sum,target);\n            }\n        }\n    }\n\n    public ArrayList<Integer> copy(ArrayList<Integer> arr)\n    {\n        ArrayList<Integer> new_arr = new ArrayList<>();\n        for(Integer i: arr){\n            new_arr.add(i);\n        }\n        return new_arr;\n    }\n}",
            "title": "24 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"
        },
        {
            "location": "/code_offer/java21-30/#25",
            "text": "\u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09  public class Solution {\n    public RandomListNode Clone(RandomListNode pHead)\n    {\n        if(pHead == null){\n            return null;\n        }else{\n            RandomListNode p = pHead;\n\n            do{\n                RandomListNode node = new RandomListNode(p.label);\n                node.next = p.next;\n                p.next = node;\n                p = p.next.next;\n            }while(p != null);\n\n            p = pHead;\n            do{\n                if(p.random != null)\n                {\n                    p.next.random = p.random.next;\n                }else{\n                    p.next.random = null;\n                }\n                p = p.next.next;\n            }while(p != null);\n\n            p = pHead;\n            RandomListNode q = pHead.next;\n            RandomListNode remain_head = q;\n\n            while (q.next != null)\n            {\n                p.next = q.next;\n                q.next = q.next.next;\n\n                p = p.next;\n                q = q.next;\n            }\n            p.next = null;\n\n            return remain_head;\n        }\n    }\n}",
            "title": "25 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"
        },
        {
            "location": "/code_offer/java21-30/#26",
            "text": "\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002  import java.util.Stack;\npublic class Solution {\n    public TreeNode Convert(TreeNode pRootOfTree)\n    {\n        if(pRootOfTree == null){\n            return null;\n        }else{\n            TreeNode p = pRootOfTree;\n            TreeNode pre = pRootOfTree;\n            Stack<TreeNode> stack = new Stack<>();\n            while(p.left!=null){\n                stack.push(p);\n                p = p.left;\n            }\n            pRootOfTree = p;//head node\n            pre = null;\n            while(p != null || !stack.empty()){\n                while(p!=null){\n                    stack.push(p);\n                    p = p.left;\n                }\n                p = stack.pop();\n\n                p.left = pre;\n                if(pre != null){\n                    pre.right = p;\n                }\n\n                pre = p;\n                p = p.right;\n\n            }\n        }\n        return pRootOfTree;\n    }\n}",
            "title": "26 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"
        },
        {
            "location": "/code_offer/java21-30/#27",
            "text": "\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002  import java.util.ArrayList;\nimport java.util.Collections;\npublic class Solution {\n    public ArrayList<String> Permutation(String str) {\n        ArrayList<String> final_list = new ArrayList<>();\n        if(str.equals(\"\")){return final_list;}\n\n        char[] arr = str.toCharArray();\n\n        ArrayList<Character> char_list = new ArrayList<>();\n        for(int i=0; i<arr.length; i++){\n            char_list.add(arr[i]);\n        }\n        Collections.sort(char_list);\n\n        char[] init_char_arr = new char[char_list.size()];\n        for(int i=0; i<char_list.size(); i++){\n            init_char_arr[i] = char_list.get(i);\n        }\n        final_list.add(make_string(init_char_arr));\n        add_string(final_list, init_char_arr, 0);\n        Collections.sort(final_list);\n\n        return final_list;\n    }\n\n    public void add_string(ArrayList<String> final_list, char[] char_arr, int index){\n        if(index < char_arr.length-1){\n            add_string(final_list,char_arr,index+1);\n\n            for(int i=index+1; i<char_arr.length; i++){\n                if(char_arr[index] != char_arr[i]){\n                    char[] new_char_arr = copy_char_arr(char_arr);\n                    char temp = new_char_arr[index];\n                    new_char_arr[index] = new_char_arr[i];\n                    new_char_arr[i] = temp;\n                    final_list.add(make_string(new_char_arr));\n                    add_string(final_list, new_char_arr, index+1);\n                }\n            }\n        }\n    }\n\n    public char[] copy_char_arr(char[] arr){\n        char[] new_arr = new char[arr.length];\n        for(int i=0; i<arr.length; i++){\n            new_arr[i] = arr[i];\n        }\n        return new_arr;\n    }\n\n    public String make_string(char[] char_arr){\n        String s = \"\";\n        for(int i=0; i<char_arr.length; i++){\n            s += char_arr[i];\n        }\n        return s;\n    }\n}",
            "title": "27 \u5b57\u7b26\u4e32\u7684\u6392\u5217"
        },
        {
            "location": "/code_offer/java21-30/#28",
            "text": "\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a9\u7684\u6570\u7ec4{1,2,3,2,2,2,5,4,2}\u3002\u7531\u4e8e\u6570\u5b572\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e865\u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa2\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa0\u3002  import java.util.HashMap;\npublic class Solution {\n    public int MoreThanHalfNum_Solution(int [] array) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i=0; i<array.length; i++){\n            if(map.get(array[i])!=null){\n                map.put(array[i], map.get(array[i])+1);\n            }else{\n                map.put(array[i], 1);\n            }\n        }\n        for(Integer k: map.keySet()){\n            if(map.get(k) > array.length/2){\n                return k;\n            }\n        }\n        return 0;\n    }\n}",
            "title": "28 \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"
        },
        {
            "location": "/code_offer/java21-30/#29-k",
            "text": "\u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684K\u4e2a\u6570\u3002\u4f8b\u5982\u8f93\u51654,5,1,6,2,7,3,8\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1,2,3,4,\u3002  import java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {\n        ArrayList<Integer> list = new ArrayList<>();\n        if(input.length == 0){\n            return list;\n        }\n        heapSort(list, input, input.length, k);\n        return list;\n    }\n\n    public void heapSort(ArrayList<Integer> list, int[] input, int len, int k){\n        if(len > input.length-k && k <= input.length){\n            int temp;\n            int index = len/2-1;\n            for(int i=index; i>-1; i--){\n                int remain_i = i;\n                boolean exchange_flag = false;\n                int min_index = -1;\n                if(i*2+2 < len){\n                    min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2;\n                }else{\n                    min_index = i*2+1;\n                }\n\n                if(input[i] > input[min_index]){\n                    exchange_flag = true;\n                    temp = input[i];//exchange\n                    input[i] = input[min_index];\n                    input[min_index] = temp;\n                }\n                while(exchange_flag == true){\n                    i = min_index;\n                    if(i*2+2 < len){\n                        min_index = input[i*2+1] < input[i*2+2] ? i*2+1 : i*2+2;\n                        if(input[i] > input[min_index]){\n                            temp = input[i];//exchange\n                            input[i] = input[min_index];\n                            input[min_index] = temp;\n                        }else{\n                            exchange_flag = false;\n                        }\n                    }else if(i*2+1 < len){\n                        min_index = i*2+1;\n                        if(input[i] > input[min_index]){\n                            temp = input[i];//exchange\n                            input[i] = input[min_index];\n                            input[min_index] = temp;\n                        }else{\n                            exchange_flag = false;\n                        }\n                    }else{\n                        exchange_flag = false;\n                    }\n                }\n                i = remain_i;\n            }\n            int min = input[0];\n            input[0] = input[len-1];\n            input[len-1] = min;\n            list.add(min);\n            heapSort(list,input,len-1,k);\n        }\n    }\n}",
            "title": "29 \u6700\u5c0f\u7684k\u4e2a\u6570"
        },
        {
            "location": "/code_offer/java21-30/#30",
            "text": "HZ\u5076\u5c14\u4f1a\u62ff\u4e9b\u4e13\u4e1a\u95ee\u9898\u6765\u5ffd\u60a0\u90a3\u4e9b\u975e\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u540c\u5b66\u3002\u4eca\u5929\u6d4b\u8bd5\u7ec4\u5f00\u5b8c\u4f1a\u540e,\u4ed6\u53c8\u53d1\u8bdd\u4e86:\u5728\u53e4\u8001\u7684\u4e00\u7ef4\u6a21\u5f0f\u8bc6\u522b\u4e2d,\u5e38\u5e38\u9700\u8981\u8ba1\u7b97\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c,\u5f53\u5411\u91cf\u5168\u4e3a\u6b63\u6570\u7684\u65f6\u5019,\u95ee\u9898\u5f88\u597d\u89e3\u51b3\u3002\u4f46\u662f,\u5982\u679c\u5411\u91cf\u4e2d\u5305\u542b\u8d1f\u6570,\u662f\u5426\u5e94\u8be5\u5305\u542b\u67d0\u4e2a\u8d1f\u6570,\u5e76\u671f\u671b\u65c1\u8fb9\u7684\u6b63\u6570\u4f1a\u5f25\u8865\u5b83\u5462\uff1f\u4f8b\u5982:{6,-3,-2,7,-15,1,2,2},\u8fde\u7eed\u5b50\u5411\u91cf\u7684\u6700\u5927\u548c\u4e3a8(\u4ece\u7b2c0\u4e2a\u5f00\u59cb,\u5230\u7b2c3\u4e2a\u4e3a\u6b62)\u3002\u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u7684\u6700\u5927\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\uff0c\u4f60\u4f1a\u4e0d\u4f1a\u88ab\u4ed6\u5ffd\u60a0\u4f4f\uff1f(\u5b50\u5411\u91cf\u7684\u957f\u5ea6\u81f3\u5c11\u662f1)  public class Solution {\n    public int FindGreatestSumOfSubArray(int[] array)\n    {\n        int max = 0;\n        for(int i=0; i<array.length; i++){\n            if(array[i]<0){\n                continue;\n            }\n            int sum = array[i];\n            int neg = 0;\n            for(int j=i-1; j>-1; j--){\n                System.out.println(\"j = \"+j);\n                if(array[j]>=0){\n                    sum += array[j];\n                }else{\n                    neg = array[j];\n                    int comple = 0;\n                    for(int k=j-1; k>-1; k--){\n                        if(neg+array[k]<comple){\n                            neg = neg+array[k];\n                        }else{\n                            comple = neg+array[k];\n                            neg = neg+array[k];\n                        }\n                    }\n                    sum = sum + comple;\n                    break;\n                }\n            }\n\n            neg = 0;\n            for(int j=i+1; j<array.length; j++){\n                System.out.println(\"j = \"+j);\n                if(array[j]>=0){\n                    sum += array[j];\n                }else{\n                    neg = array[j];\n                    int comple = 0;\n                    for(int k=j+1; k<array.length; k++){\n                        if(neg+array[k]<comple){\n                            neg = neg+array[k];\n                        }else{\n                            comple = neg+array[k];\n                            neg = neg+array[k];\n                        }\n                    }\n                    sum = sum + comple;\n                    break;\n                }\n            }\n\n            if(sum > max){\n                max = sum;\n            }\n        }\n        if(max == 0){\n            max = array[0];\n            for(int i=1; i<array.length; i++){\n                if(array[i]>max){\n                    max = array[i];\n                }\n            }\n        }\n\n        return max;\n    }\n}",
            "title": "30 \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"
        },
        {
            "location": "/code_offer/java31-40/",
            "text": "",
            "title": "Java 31-40"
        },
        {
            "location": "/code_offer/java41-50/",
            "text": "",
            "title": "Java 41-50"
        },
        {
            "location": "/code_offer/java51-60/",
            "text": "",
            "title": "Java 51-60"
        },
        {
            "location": "/code_offer/java61-66/",
            "text": "",
            "title": "Java 61-66"
        }
    ]
}